# Note: ensure our possibly updated `PATH` variable is picked up by
# `$(shell …)` invocations when using older (<4.4) make versions.
SHELL = env PATH='$(PATH)' bash

ifeq (,$(PARALLEL_JOBS))
  PARALLEL_JOBS := $(or $(patsubst -j%,%,$(filter -j%,$(MAKEFLAGS))))
endif
ifeq (,$(PARALLEL_LOAD))
  PARALLEL_LOAD := $(or $(patsubst -l%,%,$(filter -l%,$(MAKEFLAGS))))
endif
ifeq (,$(and $(PARALLEL_JOBS),$(PARALLEL_LOAD)))
  CORES := $(shell getconf _NPROCESSORS_ONLN)
  ALLOCATED_CORES := $(CORES)
  # Detect when running under cgroups, so we don't try
  # to run with `make/ninja -j36 …` on some CI workers.
  ifneq (,$(wildcard /sys/fs/cgroup/cpu/cpu.shares))
    ALLOCATED_CORES := $(shell echo $$(($$(cat /sys/fs/cgroup/cpu/cpu.shares) / 1024)))
  endif
  ifeq (,$(PARALLEL_JOBS))
    PARALLEL_JOBS := $(if $(CI),$(shell echo $$(($(ALLOCATED_CORES) + ($(ALLOCATED_CORES) + 1) / 2))),$(ALLOCATED_CORES))
  endif
  ifeq (,$(PARALLEL_LOAD))
    PARALLEL_LOAD := $(CORES)
  endif
endif
export PARALLEL_JOBS
export PARALLEL_LOAD

DRY_RUN := $(findstring n,$(firstword -$(MAKEFLAGS)))

# Use ccache in build system by default. Define USE_NO_CCACHE=1 to force disable it.
ifeq ($(USE_NO_CCACHE), 1)
  CCACHE :=
else
  CCACHE := $(or $(CCACHE),$(shell command -v ccache))
endif

UNAME:=$(shell uname -s)
UNAME_ARCH:=$(shell uname -m)

# Should point at the actual directory in which *this* makefile resides, as opposed to $(CURDIR),
# which is simply $PWD *at the time of the original make call*, which is not necessarily the same thing.
# NOTE: Will only behave as long as there aren't any spaces in the paths involved!
MAKEFILE_DIR:=$(dir $(realpath $(lastword $(MAKEFILE_LIST))))
TOOLCHAIN_DIR:=$(MAKEFILE_DIR)toolchain
ANDROID_ARCH?=arm
export ANDROID_HOME := $(or $(ANDROID_HOME),$(ANDROID_SDK_ROOT),$(TOOLCHAIN_DIR)/android-sdk-linux)
export ANDROID_SDK_ROOT := $(ANDROID_HOME)
export ANDROID_NDK_HOME := $(or $(ANDROID_NDK_HOME),$(ANDROID_NDK_ROOT),$(TOOLCHAIN_DIR)/android-ndk-r23c)
export ANDROID_NDK_ROOT := $(ANDROID_NDK_HOME)
ANDROID_TOOLCHAIN := $(ANDROID_NDK_HOME)/toolchains/llvm/prebuilt/linux-x86_64
ifeq ($(ANDROID_ARCH), arm64)
	# 64bit arches require at least ABI 21.
	export NDKABI?=21
else ifeq ($(ANDROID_ARCH), x86_64)
	# Ditto.
	export NDKABI?=21
else
	# Android 4.3 (Jelly Bean MR2); our minimal supported version.
	export NDKABI?=18
endif

LINUX_ARCH?=native

# Detect LuaRocks 3
LR_VER_NUM := $(shell luarocks --version | grep -Eo '[0-9]+.[0-9]+')
LR_GT_3_0 := $(shell awk -v LR_VER_NUM=$(LR_VER_NUM) 'BEGIN { print (LR_VER_NUM >= 3.0); }')

# set debug-related variables to cascade down
ifdef KODEBUG
	DEBUG:=$(KODEBUG)
	export DEBUG
endif

# CMAKE:=cmake --no-warn-unused-cli
CMAKE := cmake

ifeq ($(NINJA),)
  NINJA := $(shell command -v ninja)
endif

ifneq ($(NINJA),)
  ifeq ($(USE_MAKE),)
    USE_NINJA := 1
  endif
endif

ifneq ($(USE_NINJA),)
  CMAKE_FLAGS = -G Ninja
  CMAKE_MAKE_PROGRAM = $(abspath $(THIRDPARTY_DIR)/cmake_modules/koninja.sh) $(NINJA)
  ifneq (,$(or $(VERBOSE),$(V)))
    NINJAFLAGS := -v
  endif
  ifneq (,$(PARALLEL_JOBS))
    NINJAFLAGS += -j$(PARALLEL_JOBS)
  endif
  ifneq (,$(PARALLEL_LOAD))
    NINJAFLAGS += -l$(PARALLEL_LOAD)
  endif
  ifneq (,$(DRY_RUN))
    NINJAFLAGS += -nv
  endif
  CMAKE_MAKE_PROGRAM_FLAGS ?=
else
  CMAKE_MAKE_PROGRAM = $(abspath $(THIRDPARTY_DIR)/cmake_modules/komake.sh) $(MAKE)
  CMAKE_MAKE_PROGRAM_FLAGS ?=
endif

ifneq (,$(or $(VERBOSE),$(V)))
  ifeq (4.4,$(firstword $(sort $(MAKE_VERSION) 4.4)))
    MAKEFLAGS += --debug=print
  else
    MAKEFLAGS += --trace
  endif
endif
ifneq (,$(DRY_RUN))
  MAKEFLAGS += -n
endif

export NINJAFLAGS

# set this to your ARM cross compiler:
# set CC CXX AR LD RANLIB
ifeq ($(TARGET), arm-generic)
	CHOST?=arm-linux-gnueabi
else ifeq ($(TARGET), kindle)
	KINDLE=1
	HAS_KINDLE5_TC:=$(shell command -v arm-kindle5-linux-gnueabi-gcc 2> /dev/null)
	ifdef HAS_KINDLE5_TC
		#Use the custom build TC
		CHOST?=arm-kindle5-linux-gnueabi
	else
		#Use the generic linaro TC for debugging
		CHOST?=arm-linux-gnueabi
	endif
else ifeq ($(TARGET), kindlepw2)
	KINDLE=1
	HAS_KINDLEPW2_TC:=$(shell command -v arm-kindlepw2-linux-gnueabi-gcc 2> /dev/null)
	ifdef HAS_KINDLEPW2_TC
		CHOST?=arm-kindlepw2-linux-gnueabi
	else
		CHOST?=arm-linux-gnueabi
	endif
else ifeq ($(TARGET), kindle-legacy)
	KINDLE=1
	CHOST?=arm-kindle-linux-gnueabi
	LEGACY=1
else ifeq ($(TARGET), kobo)
	KOBO=1
	HAS_KOBO_TC:=$(shell command -v arm-kobo-linux-gnueabihf-gcc 2> /dev/null)
	ifdef HAS_KOBO_TC
		CHOST?=arm-kobo-linux-gnueabihf
	else
		CHOST?=arm-linux-gnueabihf
	endif
	USE_LJ_WPACLIENT=1
else ifeq ($(TARGET), ubuntu-touch)
	CHOST?=arm-linux-gnueabihf
	SDL=1
	UBUNTUTOUCH=1
else ifeq ($(TARGET), appimage)
	EMULATE_READER=1
	SDL=1
	APPIMAGE=1
else ifeq ($(TARGET), linux)
	SDL=1
	ifeq ($(LINUX_ARCH), arm)
		CHOST?=arm-linux-gnueabihf
	else ifeq ($(LINUX_ARCH), arm64)
		CHOST?=aarch64-linux-gnu
	else
		LINUX=1
		EMULATE_READER=1
	endif
else ifeq ($(TARGET), macos)
	SDL=1
	MACOS=1
	EMULATE_READER=1
else ifeq ($(TARGET), android)
	ANDROID=1
	export PATH:=$(ANDROID_TOOLCHAIN)/bin:$(PATH)
	export SYSROOT=$(ANDROID_TOOLCHAIN)/sysroot
	ifeq ($(ANDROID_ARCH), x86)
		CHOST?=i686-linux-android$(NDKABI)
	else ifeq ($(ANDROID_ARCH), x86_64)
		CHOST?=x86_64-linux-android$(NDKABI)
	else ifeq ($(ANDROID_ARCH), arm64)
		CHOST?=aarch64-linux-android$(NDKABI)
	else
		CHOST?=armv7a-linux-androideabi$(NDKABI)
	endif
	export CC=clang
	export CXX=clang++
else ifeq ($(TARGET), win32)
	CHOST?=x86_64-w64-mingw32
	WIN32=1
	SDL=1
else ifeq ($(TARGET), pocketbook)
	CHOST?=arm-pocketbook-linux-gnueabi
	POCKETBOOK=1
	HAS_POCKETBOOK_TC:=$(shell command -v arm-pocketbook-linux-gnueabi-gcc 2> /dev/null)
	ifdef HAS_POCKETBOOK_TC
		CHOST?=arm-pocketbook-linux-gnueabi
	else
		CHOST?=arm-linux-gnueabi
	endif
else ifeq ($(TARGET), remarkable)
	CHOST?=arm-remarkable-linux-gnueabihf
	REMARKABLE=1
	USE_LJ_WPACLIENT=1
else ifeq ($(TARGET), sony-prstux)
	CHOST?=arm-linux-gnueabihf
	SONY_PRSTUX=1
	USE_LJ_WPACLIENT=1
else ifeq ($(TARGET), cervantes)
	CERVANTES=1
	HAS_CERVANTES_TC:=$(shell command -v arm-cervantes-linux-gnueabi-gcc 2> /dev/null)
	ifdef HAS_CERVANTES_TC
		CHOST?=arm-cervantes-linux-gnueabi
	else
		CHOST?=arm-linux-gnueabi
	endif
	USE_LJ_WPACLIENT=1
else ifndef TARGET
	# if TARGET is not defined we will build an emulator on current machine
	EMULATE_READER=1
	SDL=1
else
  $(error Invalid TARGET: "$(TARGET)")
endif

ifneq (,$(filter $(UNAME), Darwin))
	DARWINHOST=1
	ifneq (,$(filter $(UNAME_ARCH), arm64))
		DARWIN_AARCH64_HOST=1
	endif
	ifdef EMULATE_READER
		DARWIN=1
		ifdef DARWIN_AARCH64_HOST
			DARWIN_AARCH64=1
		endif
	endif
endif

# ccache still has tons of problems when cross-compiling Android port on Darwin
ifdef DARWINHOST
	ifdef ANDROID
		CCACHE=
	endif
endif

ifneq ($(CCACHE),)
	export CCACHE
endif

# NOTE: This is necessary (at least on Android), because some early API levels will not put DT_NEEDED libraries in the global namespace.
#       Ensuring Lua/C modules have their own DT_NEEDED entry to the shared LuaJIT library works around this quirk (and is otherwise mostly harmless).
#       Saner APIs behave like Linux, and wouldn't require this hack.
USE_LUAJIT_LIB=$(or $(DARWIN),$(ANDROID),$(WIN32))

SKIP_LUAJIT_BIN=$(or $(ANDROID),$(MACOS))

RCP := cp -R
WGET ?= wget --progress=dot:giga

define wget_and_validate
	$(WGET) -O '$1' '$2' \
	&& echo '$3 $1' | sha1sum -c - \
	|| { code=$$?; rm -f '$1'; exit $$code; }
endef

# ln --symbolic --no-dereference --force --relative
SYMLINK = ln -snf$(if $(DARWINHOST),,r)

# unknown device
ifdef SBOX_UNAME_MACHINE
	CC:=gcc
	CXX:=g++
endif

# set cross-compiler/host CC and CXX
ifneq (,$(findstring clang, $(CC)))
	ifdef CHOST
		CC:=$(CHOST)-clang
		CXX:=$(CHOST)-clang++
	else
		CC:=clang
		CXX:=clang++
	endif
	HOSTCC:=clang
	HOSTCXX:=clang++
	# quiet flag
	QFLAGS:=-Wno-ignored-optimization-argument -Wno-unknown-warning-option
	# Tone down some very verbose Clang 5 warnings, too.
	# This one can be *extremely* verbose
	QFLAGS+=-Wno-array-bounds
	# This one checks if -I flags are actually used, even at steps where it makes little sense.
	# Since we massively pass -I/-L flags ourselves, this becomes insane really quick.
	QFLAGS+=-Wno-unused-command-line-argument
	# Let FreeType do its thing...
	QFLAGS+=-Wno-self-assign
	# Also extremely verbose...
	QFLAGS+=-Wno-parentheses-equality
	# For dropbear's libtom...
	QFLAGS+=-Wno-macro-redefined
else
	ifdef CHOST
		CC:=$(CHOST)-gcc
		CXX:=$(CHOST)-g++
	else
		CC:=gcc
		CXX:=g++
	endif
	HOSTCC:=gcc
	HOSTCXX:=g++
	QFLAGS:=
endif

# set cross-compiler/host AR LD RANLIB
ifeq ($(TARGET), android)
	STRIP:=llvm-strip
	AR:=llvm-ar
	LD:=ld
	RANLIB:=llvm-ranlib
else ifdef CHOST
	STRIP:=$(CHOST)-strip
	AR:=$(CHOST)-ar
	LD:=$(CHOST)-ld
	RC:=$(CHOST)-windres
	RANLIB:=$(CHOST)-ranlib
else
	STRIP:=strip
	AR:=ar
	LD:=ld
	RC:=windres
	RANLIB:=ranlib
endif

HOSTSTRIP:=strip
HOSTAR:=ar
HOSTLD:=ld
HOSTRANLIB:=ranlib

# Path to the shared STL, because we need to ship it on most platforms.
# We don't want to rely on -static-libstdc++, as it risks breaking the ODR.
# (Also, it was a pain to deal with because of libtool,
# c.f., https://www.gnu.org/software/libtool/manual/html_node/Stripped-link-flags.html#Stripped-link-flags).
ifndef DARWIN
	# TODO: Detect/support libc++ Clang TCs?
	ifdef ANDROID
		SHARED_STL_LIB:=$(shell $(CC) -print-file-name=libc++_shared.so)
	else
		SHARED_STL_LIB:=$(shell $(CC) -print-file-name=libstdc++.so.6)
	endif
endif

# Base CFLAGS, without arch. We'll need it for luajit, because its
# Makefiles do some tricky stuff to differentiate HOST/TARGET
BASE_CFLAGS:=-O2 -ffast-math -pipe -fomit-frame-pointer
# For ricers.
#BASE_CFLAGS:=-O3 -ffast-math -pipe -fomit-frame-pointer -frename-registers -fweb
# Used to enforce aggressive optimizations in some components
VECTO_CFLAGS:=-O3 -ffast-math -pipe -fomit-frame-pointer -frename-registers -fweb -ftree-vectorize -funroll-loops
# And for an aggressive LTO build
#BASE_CFLAGS:=$(VECTO_CFLAGS) -flto=8 -fuse-linker-plugin
# Use this for debugging:
ifdef KODEBUG
	BASE_CFLAGS:=-Og -g -pipe -fno-omit-frame-pointer
	# Prevent runaway buildsystems from screwing with us and stripping stuff behind our backs...
	STRIP:=true
	# Don't enforce extra CFLAGS in debug builds
	VECTO_CFLAGS:=
endif

# Misc GCC tricks to ensure backward compatibility with the K2,
# even when using a fairly recent TC (Linaro/MG).
# NOTE: -mno-unaligned-access is needed for TC based on Linaro 4.6/4.7
# or GCC 4.7, or weird crap happens on FW 2.x. We unfortunately can't
# set it by default, since it's a new flag.
# A possible workaround would be to set the alignment trap to
# fixup (echo 2 > /proc/cpu/alignment) in the launch script,
# but that's terribly ugly, and might severly nerf performance...
# That said, MG 2012.03 is still using GCC 4.6.3, so we're good ;).
#
# For ref:
## no-ssp & killing FORTIFY_SOURCE are for the *_chk private GLIBC symbols [@GLIBC_2.11 & @GLIBC_2.15]
## no-finite-maths-only is for the *_finite LM symbols (byproduct of using ffast-maths) [@GLIBC_2.15]
## GNU_SOURCE is a very heavy-handed way of getting rid of the __isoc99_sscanf stuff [@GLIBC_2.7]
## no-use-cxa-atexit is to get rid of cxa_atexit
#

MG2K12_COMPAT_CFLAGS:=-fno-stack-protector -U_FORTIFY_SOURCE -D_GNU_SOURCE -fno-finite-math-only
MG2K12_COMPAT_CXXFLAGS:=-fno-use-cxa-atexit
# My legacy TC is based on glibc 2.9, that should be enough :).
NILUJE_COMPAT_CFLAGS:=-fno-stack-protector -U_FORTIFY_SOURCE -D_GNU_SOURCE -mno-unaligned-access
# As for PB, despite the old TC targeting glibc 2.9, some devices are apparently still running glibc 2.5... (#5939)
PB_COMPAT_CFLAGS:=-D_GNU_SOURCE

# Same deal, but when targeting the K5/Kobo & using Ubuntu's Linaro TCs
UBUNTU_COMPAT_CFLAGS:=-fno-finite-math-only -fno-stack-protector -U_FORTIFY_SOURCE

# When we can't avoid pulling in the system's libstdc++ on a platform using GCC < 5.1
# The potential for actual runtime issues is fairly low, though,
# c.f., https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_dual_abi.html
STLABI_COMPAT_CFLAGS:=-D_GLIBCXX_USE_CXX11_ABI=0

# ARM 1136JF-S (Legacy Kidle devices [K2/K3/DX/DXG])
ARMV6_1136_ARCH:=-march=armv6j -mtune=arm1136jf-s -mfpu=vfp -marm
# Generic armv6
ARMV6_GENERIC_ARCH:=-march=armv6 -mtune=generic-armv6 -marm
# Generic armv7
ARMV7_GENERIC_ARCH:=-march=armv7-a -mtune=generic-armv7-a -mfpu=vfpv3 -mthumb
# Generic arm 64 bits
ARM64_GENERIC_ARCH:=-march=armv8-a
# Cortex A8 (K4, Kindle Touch, PW1, Kobos since the Touch)
ARMV7_A8_ARCH:=-march=armv7-a -mtune=cortex-a8 -mfpu=neon -mthumb
# Cortex A9 (Kindle PW2)
ARMV7_A9_ARCH:=-march=armv7-a -mtune=cortex-a9 -mfpu=neon -mthumb
# Mirror the NDK's armeabi-v7a APP_ABI (cf. #201)
ifeq ($(ANDROID_ARCH), arm)
	ANDROID_ARM_ARCH:=-march=armv7-a -mfpu=vfpv3-d16
	ANDROID_ARM_ARCH+=-mthumb
	# NOTE: NDK15c actually uses -fstack-protector-strong
	ANDROID_ARM_ARCH+=-ffunction-sections -funwind-tables -fstack-protector -no-canonical-prefixes
else ifeq ($(ANDROID_ARCH), arm64)
	ANDROID_ARM_ARCH:=-ffunction-sections -funwind-tables -fstack-protector -no-canonical-prefixes
endif

TARGET_MACHINE := $(shell $(CC) -dumpmachine)
ifeq (,$(TARGET_MACHINE))
  ifneq (,$(filter-out distclean fetch%,$(or $(MAKECMDGOALS),all)))
    $(error failed to retrieve target machine)
  endif
endif
ifdef KODEBUG
  MACHINE = $(TARGET_MACHINE)-debug
else
  MACHINE = $(TARGET_MACHINE)
endif

# Use target-specific CFLAGS
ifeq ($(TARGET), kobo)
	# NOTE: If we only care about Kobos w/ a Touch screen, we're good.
	ARM_ARCH:=$(ARMV7_A8_ARCH)
	ARM_ARCH+=-mfloat-abi=hard
	ifeq ($(TARGET_MACHINE), arm-linux-gnueabihf)
		COMPAT_CFLAGS:=$(UBUNTU_COMPAT_CFLAGS)
		COMPAT_CXXFLAGS:=$(UBUNTU_COMPAT_CFLAGS)
	endif
else ifeq ($(TARGET), ubuntu-touch)
	ARM_ARCH:=$(ARMV7_A8_ARCH)
	ARM_ARCH+=-mfloat-abi=hard
	COMPAT_CFLAGS:=$(UBUNTU_COMPAT_CFLAGS)
	COMPAT_CXXFLAGS:=$(UBUNTU_COMPAT_CFLAGS)
else ifeq ($(TARGET), pocketbook)
	# NOTE: The TC itself is built in ARM mode (otherwise glibc 2.9 fails to build).
	#       We prefer Thumb mode for our own binaries, though, much like on every other i.MX device ;).
	ARM_ARCH:=$(ARMV7_A8_ARCH)
	ARM_ARCH+=-mfloat-abi=softfp
	# NOTE: Because of course everything is terrible, newer FW (5.19+) use GCC 6.3.0's libstdc++,
	#       so, ideally, we shouldn't be using this on those newer devices...
	COMPAT_CFLAGS:=$(STLABI_COMPAT_CFLAGS) $(PB_COMPAT_CFLAGS)
	COMPAT_CXXFLAGS:=$(STLABI_COMPAT_CFLAGS) $(PB_COMPAT_CFLAGS)
	ifeq ($(TARGET_MACHINE), arm-linux-gnueabi)
		COMPAT_CFLAGS+=$(UBUNTU_COMPAT_CFLAGS)
		COMPAT_CXXFLAGS+=$(UBUNTU_COMPAT_CFLAGS)
	endif
else ifeq ($(TARGET), kindle)
	ARM_ARCH:=$(ARMV7_A8_ARCH)
	ARM_ARCH+=-mfloat-abi=softfp
	ifeq ($(TARGET_MACHINE), arm-linux-gnueabi)
		COMPAT_CFLAGS:=$(UBUNTU_COMPAT_CFLAGS)
		COMPAT_CXXFLAGS:=$(UBUNTU_COMPAT_CFLAGS)
	endif
else ifeq ($(TARGET), kindlepw2)
	ARM_ARCH:=$(ARMV7_A9_ARCH)
	ARM_ARCH+=-mfloat-abi=softfp
	ifeq ($(TARGET_MACHINE), arm-linux-gnueabi)
		COMPAT_CFLAGS:=$(UBUNTU_COMPAT_CFLAGS)
		COMPAT_CXXFLAGS:=$(UBUNTU_COMPAT_CFLAGS)
	endif
else ifeq ($(TARGET), kindle-legacy)
	ARM_ARCH:=$(ARMV6_1136_ARCH)
	ARM_ARCH+=-mfloat-abi=softfp
	ifeq ($(TARGET_MACHINE), arm-linux-gnueabi)
		COMPAT_CFLAGS:=$(MG2K12_COMPAT_CFLAGS)
		COMPAT_CXXFLAGS:=$(MG2K12_COMPAT_CXXFLAGS)
	endif
	COMPAT_CFLAGS:=$(NILUJE_COMPAT_CFLAGS)
	# Works around potential deadlocks with local statics in LunaSVG (cxa_guard -> futex)
	# We're not multi-threaded, so, whatever.
	# c.f., https://github.com/koreader/koreader/discussions/11246
        COMPAT_CXXFLAGS+=-fno-threadsafe-statics
	# Avoid pulling stuff from GLIBC_2.7 & 2.9 in glib
	export glib_cv_eventfd=no
	export ac_cv_func_pipe2=no
	# Avoid pulling stuff from GLIBC_2.6 in tar
	export ac_cv_func_utimensat=no
	export ac_cv_func_futimens=no
else ifeq ($(TARGET), android)
	ifeq ($(ANDROID_ARCH), arm)
		ARM_ARCH:=$(ANDROID_ARM_ARCH)
		ARM_ARCH+=-mfloat-abi=softfp
	else ifeq ($(ANDROID_ARCH), arm64)
		ARM_ARCH:=$(ANDROID_ARM_ARCH)
	else ifeq ($(ANDROID_ARCH), x86)
	endif
	ifneq (,$(filter arm%,$(ANDROID_ARCH)))
		export ac_cv_type_in_port_t=yes
	endif
	ifneq (,$(filter arm x86,$(ANDROID_ARCH)))
		# NOTE: to be removed when upgrading the minimal supported API level to 24.
		# (https://android.googlesource.com/platform/bionic/+/master/docs/32-bit-abi.md)
		export ac_cv_sys_file_offset_bits=32
	endif
else ifeq ($(TARGET), remarkable)
	ARM_ARCH:=$(ARMV7_A9_ARCH)
	ARM_ARCH+=-mfloat-abi=hard
else ifeq ($(TARGET), sony-prstux)
	ARM_ARCH:=$(ARMV7_A8_ARCH)
	ARM_ARCH+=-mfloat-abi=hard
else ifeq ($(TARGET), cervantes)
	ARM_ARCH:=$(ARMV7_GENERIC_ARCH)
	ARM_ARCH+=-mfloat-abi=softfp
	ifeq ($(TARGET_MACHINE), arm-linux-gnueabi)
		COMPAT_CFLAGS:=$(UBUNTU_COMPAT_CFLAGS)
		COMPAT_CXXFLAGS:=$(UBUNTU_COMPAT_CFLAGS)
	endif
else ifeq ($(TARGET), arm-generic)
	# Defaults to generic crap
	ARM_ARCH:=$(ARMV6_GENERIC_ARCH)
	ARM_ARCH+=-mfloat-abi=softfp
else ifeq ($(TARGET), linux)
	ifeq ($(LINUX_ARCH), arm)
		ARM_ARCH:=$(ARMV7_GENERIC_ARCH)
		ARM_ARCH+=-mfloat-abi=hard
	else ifeq ($(LINUX_ARCH), arm64)
		ARM_ARCH:=$(ARM64_GENERIC_ARCH)
	endif
else
	# else, we are compiling emulator on x86
	ARM_ARCH:=
endif

HOST_ARCH:=-march=native
ifdef APPIMAGE
	# We want to run the AppImage on any 64-bit CPU
	HOST_ARCH:=-mtune=generic -march=x86-64
endif

ifdef LINUX
	HOST_ARCH:=-mtune=generic
endif

ifdef MACOS
	HOST_ARCH:=-mtune=generic
endif

ifdef DARWIN_AARCH64_HOST
# At the moment of writing, apple-m1 is the lowest common denominator for Apple silicon chips. Should work for M2 as well
	HOST_ARCH:=-mcpu=apple-m1
endif

# Some of our deps require C11 & C++17 (`if constexpr (…)`) support.
# NOTE: Technically, this also means we require GCC >= 7.1 (2017) or Clang >= 5.0.0 (2017),
hashsign := \#
hasminstd = $(shell printf '%s\n' '$(hashsign)if $3 >= $4L' 'yes' '$(hashsign)else' 'no' '$(hashsign)endif' '$3' | $1 -x $2 -P -E -)
ifneq (yes,$(firstword $(call hasminstd,$(CC),c,__STDC_VERSION__,201100)))
	CSTD_FLAGS := -std=gnu11
endif
ifneq (yes,$(firstword $(call hasminstd,$(CXX),c++,__cplusplus,201700)))
	CXXSTD_FLAGS := -std=gnu++17
endif

HOSTCFLAGS:=$(HOST_ARCH) $(BASE_CFLAGS) $(QFLAGS)

CFLAGS:=$(BASE_CFLAGS) $(QFLAGS) $(CSTD_FLAGS)
CXXFLAGS:=$(BASE_CFLAGS) $(QFLAGS) $(CXXSTD_FLAGS)

ifndef DARWIN
	# To prefer our shipped libraries over the system's,
	# we set a couple rpath via an include file to make sure it goes through buildsystem indirection unscathed...
	# NOTE: We enforce DT_RPATH over DT_RUNPATH because DT_RUNPATH is *not* honored for *transitive* dependencies,
	#       which can lead to hilarious catastrophe if such a dependency pulls a SONAME identical to something we ship,
	#       because it will *not* load ours, but still let ours be loaded after that...
	#       (Assuming no LD_LIBRARY_PATH are set, since the search order is basically RPATH -> LD_LIBRARY_PATH -> RUNPATH).
	#       c.f., https://github.com/koreader/koreader-base/pull/1638#issuecomment-1636725691
	#       And https://bugs.launchpad.net/ubuntu/+source/eglibc/+bug/1253638/comments/5 for a nice recap.
	LDFLAGS:=-Wl,-O1 -Wl,--as-needed -Wl,@$(MAKEFILE_DIR)origin.ldflags $(COMPAT_LDFLAGS)
else
	LDFLAGS:=
endif

# NOTE: Follow the NDK's lead
ifeq ($(TARGET), android)
	LDFLAGS+=-no-canonical-prefixes
	ifeq ($(ANDROID_ARCH), arm)
		# FIXME: `--Wl,--fix-cortex-a8` still needed?
		LDFLAGS+=-Wl,--fix-cortex-a8 -march=armv7-a
	endif
	# Fix https://github.com/android/ndk/issues/1614
	LDFLAGS+=$(shell $(CC) -print-libgcc-file-name)
endif

ifeq ($(TARGET), win32)
	LDFLAGS+=-Wl,--allow-multiple-definition -static-libgcc
endif

# this will create a path named build/arm-none-linux-gnueabi or similar
OUTPUT_DIR ?= build/$(MACHINE)
CMAKE_DIR = $(OUTPUT_DIR)/cmake
STAGING_DIR = $(OUTPUT_DIR)/staging
THIRDPARTY_BUILD = $(OUTPUT_DIR)/thirdparty

# you can configure an emulation for the (eink) framebuffer here.
# the application won't use the framebuffer (and the special e-ink ioctls)
# in that case.

ifdef EMULATE_READER
	# Regular
	REALCC:=$(HOSTCC)
	REALCXX:=$(HOSTCXX)
	HOSTCC:=$(strip $(CCACHE) $(HOSTCC))
	HOSTCXX:=$(strip $(CCACHE) $(HOSTCXX))
	CC:=$(HOSTCC)
	CXX:=$(HOSTCXX)
	STRIP:=$(HOSTSTRIP)
	AR:=$(HOSTAR)
	LD:=$(HOSTLD)
	RANLIB:=$(HOSTRANLIB)
	CFLAGS+=$(HOST_ARCH)
	CXXFLAGS+=$(HOST_ARCH)
else
	ifndef SYSROOT
		export SYSROOT:=$(shell $(CC) -print-sysroot)
	endif
	REALCC:=$(CC)
	REALCXX:=$(CXX)
	CC:=$(strip $(CCACHE) $(CC))
	CXX:=$(strip $(CCACHE) $(CXX))
	CFLAGS+=$(ARM_ARCH) $(COMPAT_CFLAGS)
	CXXFLAGS+=$(ARM_ARCH) $(COMPAT_CXXFLAGS)
	# Make sure we always have mmap() support.
	# This is critical for FreeType, since the usage of platform-specific code depends on this,
	# and without it, we don't get CLOEXEC handling, which is problematic on Kobos, where we spawn stuff that might
	# survive us, and if they inherit some of our fds pointing to the removable user area, bad things happen when it
	# gets unmounted for USBMS handling....
	export ac_cv_func_mmap_fixed_mapped=yes
	# Never let pkg-config pickup native libraries (we don't actually rely on pkg-config anywhere, we do it all by hand).
	# NOTE: Let people shoot themselves in the foot with custom pkg-config wrappers?
	#undefine PKG_CONFIG
	#unexport PKG_CONFIG
	export PKG_CONFIG_PATH=""
	export PKG_CONFIG_LIBDIR=""
	# We'll want to ship the shared STL lib on non-SDL platforms
	ifndef SDL
		ifdef SHARED_STL_LIB
			SHIP_SHARED_STL:=true
		endif
	endif
endif

# not necessary to use PIC flag for win32 which has relocation table in dll
ifneq ($(TARGET), win32)
	CFLAGS+=-fPIC
	CXXFLAGS+=-fPIC
endif

CFLAGS := $(strip $(CFLAGS))
CXXFLAGS := $(strip $(CXXFLAGS))
LDFLAGS := $(strip $(LDFLAGS))

# Try to make sure CMake picks up our flags...
export CFLAGS
export CXXFLAGS
export LDFLAGS
# And that our TC is honored
export CC
export CXX
export AR
export RANLIB
export LD
export STRIP
ifdef WIN32
	export RC
endif

# FIXME: If we cared, we'd probably need to do something to convince libzmq not
# to enable support for eventfd [@GLIBC_2.7]
# FIXED: To cross compile libzmq for GLIBC_2.4 you need to configure with the
# option '--disable-eventfd'
#
# In the same vein, see base#421 for how to deal with an updated glibc symbol
# for a function which did NOT change its signature, and where we don't have
# access to a public definition of the old implementation, only a compat
# versioned symbol.
# With the added confusing quirk that the compat symbol (here, fmemopen) is
# pinned to a different GLIBC version on arm than on x86... (cf. #2188).
ifndef DARWIN
ifndef ANDROID
ifndef WIN32
	# We're a glibc system... Find the actual libc used by our TC, and check if it's >= 2.22...
	# We only care about that on non-emulated builds (i.e., arm), because compat symbols may be pinned
	# to different versions on different arches, and we only account for arm in our patches.
	ifndef EMULATE_READER
		GLIBC_FILE=$(basename $(notdir $(realpath $(shell $(CC) -print-file-name=libc.so.6))))
		GLIBC_VER=$(shell echo $(GLIBC_FILE) | cut -f2 -d'-')
		GLIBC_2_22_SORT=$(shell echo -e "$(GLIBC_VER)\n2.22" | sort -V | head -n1)
		ifeq ($(GLIBC_2_22_SORT), 2.22)
			ARM_GLIBC_GTE_2_22=1
		endif
	endif
endif
endif
endif

# NOTE: We generally want SIMD/ASM juicy stuff everywhere
export WANT_SIMD=1
# ... but on ARM targets that are not NEON capable, that obviously won't fly...
ifneq (,$(filter -march=arm%,$(CFLAGS)))
  # We're on ARM.
  ifeq (,$(filter -march=armv8-a -mfpu=neon,$(CFLAGS)))
    # We don't support NEON.
    WANT_SIMD=
  endif
endif
# ... ditto on Android x86, because the TC is old as hell, and that upsets libjpeg-turbo...
ifeq ($(TARGET), android)
  ifeq ($(ANDROID_ARCH), x86)
    WANT_SIMD=
  endif
endif

LIB_EXT=$(if $(WIN32),.dll,$(if $(DARWIN),.dylib,.so))

# you can probably leave these settings alone:

THIRDPARTY_DIR=thirdparty

LUAFILESYSTEM_DIR=luafilesystem

ZLIB_BUILD_DIR=$(THIRDPARTY_BUILD)/zlib
ZLIB_DIR=$(abspath $(ZLIB_BUILD_DIR)/install)
ZLIB_STATIC=$(ZLIB_DIR)/lib/libz.a
ZLIB=$(OUTPUT_DIR)/libs/$(if $(WIN32),zlib1.dll,$(if $(DARWIN),libz.1.dylib,libz.so.1))

ZSTD_BUILD_DIR=$(THIRDPARTY_BUILD)/zstd
ZSTD_DIR=$(abspath $(ZSTD_BUILD_DIR)/install)
ZSTD_LIB_EXT=$(if $(WIN32),.dll,$(if $(DARWIN),.1.dylib,.so.1))
ZSTD_LIB=$(OUTPUT_DIR)/libs/libzstd$(ZSTD_LIB_EXT)

MINIZIP_BUILD_DIR=$(THIRDPARTY_BUILD)/minizip
MINIZIP_DIR=$(abspath $(MINIZIP_BUILD_DIR)/source)
AES_LIB_DIR=$(MINIZIP_DIR)/aes
AES_LIB=$(MINIZIP_DIR)/aes/libaes.a

MUPDF_BUILD_DIR=$(THIRDPARTY_BUILD)/mupdf
MUPDF_DIR=$(abspath $(MUPDF_BUILD_DIR)/source)
MUPDF_LIB=$(OUTPUT_DIR)/libs/libmupdf$(LIB_EXT)

DJVULIBRE_BUILD_DIR=$(THIRDPARTY_BUILD)/djvulibre
DJVULIBRE_DIR=$(abspath $(DJVULIBRE_BUILD_DIR)/install)
DJVULIBRE_LIB_EXT=$(if $(WIN32),-21.dll,$(if $(DARWIN),.21.dylib,.so.21))
DJVULIBRE_LIB=$(OUTPUT_DIR)/libs/libdjvulibre$(DJVULIBRE_LIB_EXT)
# We can't use -ldjvulibre because we don't ship the bare .so symlink in LIB_DIR,
# we only keep the one with the SOVER that ends up in the DT_NEEDED entry...
DJVULIBRE_LIB_LINK_FLAG=$(if $(WIN32),-l:libdjvulibre-21.dll,$(if $(DARWIN),$(DJVULIBRE_LIB),-l:libdjvulibre.so.21))

CRENGINE_BUILD_DIR=$(THIRDPARTY_BUILD)/crengine
CRENGINE_DIR=$(abspath $(CRENGINE_BUILD_DIR))
CRENGINE_SRC_DIR=$(abspath $(THIRDPARTY_DIR)/kpvcrlib/crengine)
CRENGINE_SRC_FILES=$(wildcard $(CRENGINE_SRC_DIR)/crengine/src/*.cpp)
CRENGINE_SRC_FILES+=$(wildcard $(CRENGINE_SRC_DIR)/crengine/include/*.h)
CRENGINE_SRC_FILES+=$(wildcard $(CRENGINE_SRC_DIR)/crengine/src/*.h)
CRENGINE_SRC_FILES+=$(wildcard $(CRENGINE_SRC_DIR)/crengine/src/*_h.*)
CRENGINE_LIB = $(CRENGINE_BUILD_DIR)/libcrengine.a
CRENGINE_THIRDPARTY_LIBS = $(addprefix $(CRENGINE_BUILD_DIR)/crengine/thirdparty/, antiword/libantiword.a chmlib/libchmlib.a)
CRENGINE_NEEDED_LIBS =  $(FREETYPE_LIB) $(FRIBIDI_LIB) $(HARFBUZZ_LIB) \
			$(JPEG_LIB) $(LIBUNIBREAK_LIB) $(LIBWEBP_LIB) \
			$(LIBWEBPDEMUX_LIB) $(LUNASVG_LIB) $(PNG_LIB) \
			$(UTF8PROC_LIB) $(ZLIB) $(ZSTD_LIB)
CRENGINE_CFLAGS = \
		-include '$(CRENGINE_BUILD_DIR)/crsetup.h' \
		'-I$(CRENGINE_SRC_DIR)/crengine/include' \
		'-I$(FREETYPE_DIR)/include/freetype2' \
		'-I$(HARFBUZZ_DIR)/include/harfbuzz' \
		'-I$(LIBUNIBREAK_DIR)/include' \

LUAJIT_BUILD_DIR=$(THIRDPARTY_BUILD)/luajit
LUAJIT_DIR=$(abspath $(LUAJIT_BUILD_DIR)/source)
LUAJIT=$(OUTPUT_DIR)/$(if $(WIN32),luajit.exe,luajit)
LUAJIT_JIT=$(OUTPUT_DIR)/jit
LUAJIT_LIB=$(OUTPUT_DIR)/$(if $(WIN32),lua51.dll,libs/libluajit.so)
LUAJIT_STATIC=$(LUAJIT_DIR)/src/libluajit.a
ifeq ($(USE_LUAJIT_LIB), 1)
	LUAJIT_LIB_LINK_FLAG=$(if $(WIN32),-l:lua51.dll,-lluajit)
endif

POPEN_NOSHELL_BUILD_DIR=$(THIRDPARTY_BUILD)/popen-noshell
POPEN_NOSHELL_DIR=$(POPEN_NOSHELL_BUILD_DIR)/source
POPEN_NOSHELL_LIB=$(POPEN_NOSHELL_DIR)/libpopen_noshell.a

LEPTONICA_BUILD_DIR = $(THIRDPARTY_BUILD)/leptonica
LEPTONICA_DIR = $(LEPTONICA_BUILD_DIR)/install
LEPT_LIB_EXT = $(if $(WIN32),-5.dll,$(if $(DARWIN),.5.dylib,.so.5))
LEPTONICA_LIB = $(OUTPUT_DIR)/libs/liblept$(LEPT_LIB_EXT)

TESSERACT_BUILD_DIR = $(THIRDPARTY_BUILD)/tesseract
TESSERACT_DIR = $(TESSERACT_BUILD_DIR)/install
TESS_LIB_EXT = $(if $(WIN32),-3.dll,$(if $(DARWIN),.3.dylib,.so.3))
TESSERACT_LIB = $(OUTPUT_DIR)/libs/libtesseract$(TESS_LIB_EXT)

K2PDFOPT_BUILD_DIR=$(THIRDPARTY_BUILD)/libk2pdfopt
K2PDFOPT_DIR=$(abspath $(K2PDFOPT_BUILD_DIR)/source)
K2PDFOPT_LIB_EXT=$(if $(WIN32),-2.dll,$(if $(DARWIN),.2.dylib,.so.2))
K2PDFOPT_LIB=$(OUTPUT_DIR)/libs/libk2pdfopt$(K2PDFOPT_LIB_EXT)
K2PDFOPT_CFLAGS=-I$(K2PDFOPT_DIR)/willuslib \
		-I$(K2PDFOPT_DIR)/k2pdfoptlib -I$(K2PDFOPT_DIR) \
		-I$(LEPTONICA_DIR)/include/leptonica
K2PDFOPT_LIB_LINK_FLAG=$(if $(WIN32),-l:libk2pdfopt-2.dll,$(if $(DARWIN),$(K2PDFOPT_LIB),-l:libk2pdfopt.so.2))

FREETYPE_LIB_EXT=$(if $(WIN32),-6.dll,$(if $(DARWIN),.6.dylib,.so.6))
FREETYPE_LIB=$(OUTPUT_DIR)/libs/libfreetype$(FREETYPE_LIB_EXT)
FREETYPE_BUILD_DIR=$(THIRDPARTY_BUILD)/freetype2
FREETYPE_DIR=$(abspath $(FREETYPE_BUILD_DIR)/install)
FREETYPE_LIB_LINK_FLAG=$(if $(WIN32),-l:libfreetype-6.dll,$(if $(DARWIN),$(FREETYPE_LIB),-l:libfreetype.so.6))

HARFBUZZ_LIB_EXT=$(if $(WIN32),-0.dll,$(if $(DARWIN),.0.dylib,.so.0))
HARFBUZZ_LIB=$(OUTPUT_DIR)/libs/libharfbuzz$(HARFBUZZ_LIB_EXT)
HARFBUZZ_BUILD_DIR=$(THIRDPARTY_BUILD)/harfbuzz
HARFBUZZ_DIR=$(abspath $(HARFBUZZ_BUILD_DIR)/install)
HARFBUZZ_LIB_LINK_FLAG=$(if $(WIN32),-l:libharfbuzz-0.dll,$(if $(DARWIN),$(HARFBUZZ_LIB),-l:libharfbuzz.so.0))

FRIBIDI_LIB_EXT=$(if $(WIN32),-0.dll,$(if $(DARWIN),.0.dylib,.so.0))
FRIBIDI_LIB=$(OUTPUT_DIR)/libs/libfribidi$(FRIBIDI_LIB_EXT)
FRIBIDI_BUILD_DIR=$(THIRDPARTY_BUILD)/fribidi
FRIBIDI_DIR=$(abspath $(FRIBIDI_BUILD_DIR)/install)
FRIBIDI_LIB_LINK_FLAG=$(if $(WIN32),-l:libfribidi-0.dll,$(if $(DARWIN),$(FRIBIDI_LIB),-l:libfribidi.so.0))

LIBUNIBREAK_LIB_EXT=$(if $(WIN32),-6.dll,$(if $(DARWIN),.6.dylib,.so.6))
LIBUNIBREAK_LIB=$(OUTPUT_DIR)/libs/libunibreak$(LIBUNIBREAK_LIB_EXT)
LIBUNIBREAK_BUILD_DIR=$(THIRDPARTY_BUILD)/libunibreak
LIBUNIBREAK_DIR=$(abspath $(LIBUNIBREAK_BUILD_DIR)/install)
LIBUNIBREAK_LIB_LINK_FLAG=$(if $(WIN32),-l:libunibreak-6.dll,$(if $(DARWIN),$(LIBUNIBREAK_LIB),-l:libunibreak.so.6))

UTF8PROC_LIB_EXT=$(if $(WIN32),-3.dll,$(if $(DARWIN),.3.dylib,.so.3))
UTF8PROC_LIB=$(OUTPUT_DIR)/libs/libutf8proc$(UTF8PROC_LIB_EXT)
UTF8PROC_BUILD_DIR=$(THIRDPARTY_BUILD)/utf8proc
UTF8PROC_DIR=$(abspath $(UTF8PROC_BUILD_DIR)/install)

JPEG_LIB_EXT=$(if $(WIN32),-8.dll,$(if $(DARWIN),.8.dylib,.so.8))
JPEG_LIB=$(OUTPUT_DIR)/libs/libjpeg$(JPEG_LIB_EXT)
JPEG_LIB_LINK_FLAG=$(if $(WIN32),-l:libjpeg-8.dll,$(if $(DARWIN),$(JPEG_LIB),-l:libjpeg.so.8))
TURBOJPEG_LIB=$(OUTPUT_DIR)/libs/libturbojpeg$(if $(WIN32),.dll,$(if $(DARWIN),.dylib,.so))
JPEG_BUILD_DIR=$(THIRDPARTY_BUILD)/libjpeg-turbo
JPEG_DIR=$(abspath $(JPEG_BUILD_DIR)/install)

PNG_LIB_EXT=$(if $(WIN32),-16.dll,$(if $(DARWIN),.16.dylib,.so.16))
PNG_LIB=$(OUTPUT_DIR)/libs/libpng16$(PNG_LIB_EXT)
PNG_BUILD_DIR=$(THIRDPARTY_BUILD)/libpng
PNG_DIR=$(abspath $(PNG_BUILD_DIR)/install)

LODEPNG_LIB=$(OUTPUT_DIR)/libs/liblodepng$(LIB_EXT)
LODEPNG_BUILD_DIR=$(THIRDPARTY_BUILD)/lodepng
LODEPNG_DIR=$(abspath $(LODEPNG_BUILD_DIR)/build)

GIF_LIB_EXT=$(if $(WIN32),-7.dll,$(if $(DARWIN),.7.dylib,.so.7))
GIF_LIB=$(OUTPUT_DIR)/libs/libgif$(GIF_LIB_EXT)
GIF_BUILD_DIR=$(THIRDPARTY_BUILD)/giflib
GIF_DIR=$(abspath $(GIF_BUILD_DIR)/build)

LIBWEBP_LIB_EXT=$(if $(WIN32),-7.dll,$(if $(DARWIN),.7.dylib,.so.7))
LIBWEBP_LIB=$(OUTPUT_DIR)/libs/libwebp$(LIBWEBP_LIB_EXT)
LIBWEBPDEMUX_LIB_EXT=$(if $(WIN32),-2.dll,$(if $(DARWIN),.2.dylib,.so.2))
LIBWEBPDEMUX_LIB=$(OUTPUT_DIR)/libs/libwebpdemux$(LIBWEBPDEMUX_LIB_EXT)
LIBSHARPYUV_LIB_EXT=$(if $(WIN32),-0.dll,$(if $(DARWIN),.0.dylib,.so.0))
LIBSHARPYUV_LIB=$(OUTPUT_DIR)/libs/libsharpyuv$(LIBSHARPYUV_LIB_EXT)
LIBWEBP_BUILD_DIR=$(THIRDPARTY_BUILD)/libwebp
LIBWEBP_DIR=$(abspath $(LIBWEBP_BUILD_DIR)/install)

LUNASVG_LIB_EXT=$(if $(WIN32),.dll,$(if $(DARWIN),.dylib,.so))
LUNASVG_LIB=$(OUTPUT_DIR)/libs/liblunasvg$(LUNASVG_LIB_EXT)
LUNASVG_BUILD_DIR=$(THIRDPARTY_BUILD)/lunasvg
LUNASVG_DIR=$(abspath $(LUNASVG_BUILD_DIR)/install)

SDCV_BUILD_DIR=$(THIRDPARTY_BUILD)/sdcv
SDCV_DIR=$(abspath $(SDCV_BUILD_DIR)/build)

GLIB_BUILD_DIR=$(THIRDPARTY_BUILD)/glib
GLIB_DIR=$(abspath $(GLIB_BUILD_DIR)/install)
GLIB=$(GLIB_DIR)/lib/libglib-2.0.a

LIBICONV_BUILD_DIR=$(THIRDPARTY_BUILD)/libiconv
LIBICONV_DIR=$(abspath $(LIBICONV_BUILD_DIR)/install)
LIBICONV=$(LIBICONV_DIR)/lib/libiconv.a

GETTEXT_BUILD_DIR=$(THIRDPARTY_BUILD)/gettext
GETTEXT_DIR=$(abspath $(GETTEXT_BUILD_DIR)/install)
LIBGETTEXT=$(GETTEXT_DIR)/lib/libintl.a

SDL2_BUILD_DIR=$(THIRDPARTY_BUILD)/sdl2
SDL2_DIR=$(abspath $(SDL2_BUILD_DIR)/build)
SDL2_LIB=$(OUTPUT_DIR)/libs/libSDL2$(LIB_EXT)

OPENSSL_BUILD_DIR=$(THIRDPARTY_BUILD)/openssl
OPENSSL_DIR=$(abspath $(OPENSSL_BUILD_DIR)/source)
OPENSSL_LIB=$(OPENSSL_DIR)/libssl.$(if $(WIN32),a,so)
SSL_LIB=$(OUTPUT_DIR)/libs/libssl$(if $(WIN32),-1.dll,$(if $(DARWIN),.1.1.dylib,.so.1.1))
CRYPTO_LIB=$(OUTPUT_DIR)/libs/libcrypto$(if $(WIN32),-1.dll,$(if $(DARWIN),.1.1.dylib,.so.1.1))

LUASOCKET_BUILD_DIR=$(THIRDPARTY_BUILD)/luasocket
LUASEC_BUILD_DIR=$(THIRDPARTY_BUILD)/luasec
LUASOCKET=$(OUTPUT_DIR)/common/socket
LUASEC=$(OUTPUT_DIR)/common/ssl

ZMQ_BUILD_DIR=$(THIRDPARTY_BUILD)/libzmq
ZMQ_DIR=$(abspath $(ZMQ_BUILD_DIR)/install)
ZMQ_LIB_EXT=$(if $(WIN32),.dll,$(if $(DARWIN),.4.dylib,.so.4))
ZMQ_LIB=$(OUTPUT_DIR)/libs/libzmq$(ZMQ_LIB_EXT)

CZMQ_BUILD_DIR=$(THIRDPARTY_BUILD)/czmq
CZMQ_DIR=$(abspath $(CZMQ_BUILD_DIR)/install)
CZMQ_LIB_EXT=$(if $(WIN32),.dll,$(if $(DARWIN),.1.dylib,.so.1))
CZMQ_LIB=$(OUTPUT_DIR)/libs/libczmq$(CZMQ_LIB_EXT)

TAR_BUILD_DIR=$(THIRDPARTY_BUILD)/tar

DROPBEAR_BUILD_DIR=$(THIRDPARTY_BUILD)/dropbear
DROPBEAR_DIR=$(abspath $(DROPBEAR_BUILD_DIR)/build)

OPENSSH_BUILD_DIR=$(THIRDPARTY_BUILD)/openssh
OPENSSH_DIR=$(abspath $(OPENSSH_BUILD_DIR)/build)

FBINK_BUILD_DIR=$(THIRDPARTY_BUILD)/fbink
FBINK_DIR=$(abspath $(FBINK_BUILD_DIR)/install)

KOBO_USBMS_BUILD_DIR = $(THIRDPARTY_BUILD)/kobo-usbms
KOBO_USBMS_DIR = $(abspath $(KOBO_USBMS_BUILD_DIR)/source/$(if $(KODEBUG),Debug,Release))

CURL_BUILD_DIR=$(THIRDPARTY_BUILD)/curl
CURL_DIR=$(abspath $(CURL_BUILD_DIR)/install)
# NOTE: We rename cURL on PB because everything is terrible (c.f., #5861)
CURL_LIB_EXT=$(if $(WIN32),.dll,$(if $(DARWIN),.dylib,$(if $(POCKETBOOK),_ko.so.4,.so.4)))
CURL_LIB=$(OUTPUT_DIR)/libs/libcurl$(CURL_LIB_EXT)

ZSYNC2_BUILD_DIR=$(THIRDPARTY_BUILD)/zsync2
ZSYNC2_DIR=$(abspath $(ZSYNC2_BUILD_DIR)/build)

TURBO_BUILD_DIR=$(THIRDPARTY_BUILD)/turbo
TURBO_DIR=$(abspath $(TURBO_BUILD_DIR)/source)
TURBO_FFI_WRAP_LIB=$(OUTPUT_DIR)/common/libtffi_wrap$(LIB_EXT)

# Unversioned LR 2 path and binary
LUAROCKS_BINARY=luarocks
# Versioned LR 3 path and binary, see koreader-base/pull/1003
ifeq ($(LR_GT_3_0),1)
LUAROCKS_BINARY+=--lua-version=5.1
endif
LUA_INCDIR=$(LUAJIT_DIR)/src
LUA_LIBDIR=$(abspath $(dir $(LUAJIT_LIB)))

LUA_HTMLPARSER_BUILD_DIR = $(THIRDPARTY_BUILD)/lua-htmlparser
LUA_HTMLPARSER_DIR = $(THIRDPARTY_BUILD)/lua-htmlparser/source
LUA_HTMLPARSER_MOD = $(OUTPUT_DIR)/common/htmlparser.lua

LPEG_BUILD_DIR = $(THIRDPARTY_BUILD)/lpeg
LPEG_DIR = $(abspath $(LPEG_BUILD_DIR)/source)
LPEG_MOD = $(OUTPUT_DIR)/common/lpeg.so

LUAJSON_BUILD_DIR = $(THIRDPARTY_BUILD)/luajson
LUAJSON_DIR = $(LUAJSON_BUILD_DIR)/source
LUAJSON_MOD = $(OUTPUT_DIR)/common/json.lua

LUA_RAPIDJSON_BUILD_DIR = $(THIRDPARTY_BUILD)/lua-rapidjson
LUA_RAPIDJSON_DIR = $(LUA_RAPIDJSON_BUILD_DIR)/build
LUA_RAPIDJSON_MOD = $(OUTPUT_DIR)/common/rapidjson.so

LUA_SPORE_BUILD_DIR=$(THIRDPARTY_BUILD)/lua-Spore
LUA_SPORE_DIR=$(abspath $(LUA_SPORE_BUILD_DIR)/source)
LUA_SPORE_MOD=$(OUTPUT_DIR)/common/Spore.lua

SQLITE_BUILD_DIR=$(THIRDPARTY_BUILD)/sqlite
SQLITE_DIR=$(abspath $(SQLITE_BUILD_DIR)/build)
SQLITE_LIB_EXT=$(if $(WIN32),.dll,$(if $(DARWIN),.dylib,.so))
SQLITE_LIB=$(OUTPUT_DIR)/libs/libsqlite3$(SQLITE_LIB_EXT)

LUA_LJ_SQLITE_DIR=$(abspath $(THIRDPARTY_DIR)/lua-ljsqlite3)
LUA_LJ_SQLITE_INSTALL_DIR=$(OUTPUT_DIR)/common/lua-ljsqlite3
LUA_LJ_SQLITE=$(LUA_LJ_SQLITE_INSTALL_DIR)/init.lua


# pure LuaJIT module, so no need to separate build dir by MACHINE
LJ_WPACLIENT_FILES=consts_h.lua poll_h.lua select_h.lua socket_h.lua socket.lua time_h.lua wpaclient.lua wpa_ctrl.lua
LJ_WPACLIENT_BUILD_DIR=$(THIRDPARTY_BUILD)/lj-wpaclient
LJ_WPACLIENT_DIR=$(abspath $(LJ_WPACLIENT_BUILD_DIR)/source)
LJ_WPACLIENT=$(addprefix $(OUTPUT_DIR)/common/lj-wpaclient/, $(LJ_WPACLIENT_FILES))

# Nanosvg headers (that include code)
NANOSVG_HEADER_FILES=nanosvg.h nanosvgrast.h stb_image_write.h
NANOSVG_BUILD_DIR=$(THIRDPARTY_BUILD)/nanosvg
NANOSVG_DIR=$(abspath $(NANOSVG_BUILD_DIR)/source)
NANOSVG_INCLUDE_DIR=$(abspath $(NANOSVG_BUILD_DIR)/include)
NANOSVG_HEADERS=$(addprefix $(NANOSVG_INCLUDE_DIR)/, $(NANOSVG_HEADER_FILES))

# Srell headers (that include code)
SRELL_DIR=$(abspath $(THIRDPARTY_DIR)/srell)
SRELL_INCLUDE_DIR=$(SRELL_DIR)

# CFLAGS for the Lua/C/C++ modules:
#
# Dynamic libraries must be compiled with "-shared" and "-fPIC".
# (And we enforce PIC everywhere via CFLAGS/CXXFLAGS).
DYNLIB_CFLAGS=-L$(abspath $(OUTPUT_DIR)/libs) $(CFLAGS) -I$(LUAJIT_DIR)/src -shared
DYNLIB_CXXFLAGS=-L$(abspath $(OUTPUT_DIR)/libs) $(CXXFLAGS) -I$(LUAJIT_DIR)/src -shared
ifdef DARWIN
	DYNLIB_CFLAGS+=-dynamiclib -undefined dynamic_lookup
	DYNLIB_CXXFLAGS+=-dynamiclib -undefined dynamic_lookup
endif

# Used by our custom Lua modules, where we want to hide private symbols by default
SYMVIS_FLAGS+=-fvisibility=hidden

CMAKE_THIRDPARTY_LIBS := kpvcrlib,nanosvg,zstd
CMAKE_THIRDPARTY_LIBS := $(CMAKE_THIRDPARTY_LIBS),luajit,lpeg,turbo
CMAKE_THIRDPARTY_LIBS := $(CMAKE_THIRDPARTY_LIBS),czmq,libzmq
CMAKE_THIRDPARTY_LIBS := $(CMAKE_THIRDPARTY_LIBS),libk2pdfopt,tesseract,leptonica
CMAKE_THIRDPARTY_LIBS := $(CMAKE_THIRDPARTY_LIBS),lj-wpaclient
CMAKE_THIRDPARTY_LIBS := $(CMAKE_THIRDPARTY_LIBS),lua-htmlparser,lua-rapidjson,lua-Spore,luasec,luasocket,glib,lodepng,minizip
CMAKE_THIRDPARTY_LIBS := $(CMAKE_THIRDPARTY_LIBS),djvulibre,mupdf,freetype2,harfbuzz,giflib,libpng,zlib,libwebp,lunasvg
CMAKE_THIRDPARTY_LIBS := $(CMAKE_THIRDPARTY_LIBS),tar,sdcv,libiconv,gettext,libjpeg-turbo,popen-noshell,sqlite
CMAKE_THIRDPARTY_LIBS := $(CMAKE_THIRDPARTY_LIBS),openssl,dropbear,openssh
CMAKE_THIRDPARTY_LIBS := $(CMAKE_THIRDPARTY_LIBS),curl,zsync2
CMAKE_THIRDPARTY_LIBS := $(CMAKE_THIRDPARTY_LIBS),fbink
CMAKE_THIRDPARTY_LIBS := $(CMAKE_THIRDPARTY_LIBS),kobo-usbms
CMAKE_THIRDPARTY_LIBS := $(CMAKE_THIRDPARTY_LIBS),fribidi,libunibreak,utf8proc
CMAKE_THIRDPARTY_LIBS := $(CMAKE_THIRDPARTY_LIBS),luajson

# CMake "real" toolchain file. {{{

CMAKE_TCF = $(CMAKE_DIR)/toolchain.cmake

# CMAKE_SYSTEM_PROCESSOR
# FIXME: use more fine grained values for ARM targets?
# (Cf. https://github.com/taka-no-me/android-cmake)
ifneq (,$(filter aarch64-%,$(CHOST)))
  CMAKE_SYSTEM_PROCESSOR = aarch64
else ifneq (,$(filter arm-% armv7a-%,$(CHOST)))
  CMAKE_SYSTEM_PROCESSOR = arm
else ifneq (,$(filter i686-%,$(CHOST)))
  CMAKE_SYSTEM_PROCESSOR = i686
else ifneq (,$(filter x86_64-%,$(CHOST)))
  CMAKE_SYSTEM_PROCESSOR = x86_64
else ifneq (,$(CHOST))
  $(warning CMAKE_SYSTEM_PROCESSOR not set! (CHOST is $(CHOST)))
endif

# Native & cross definitions.
define cmake_toolchain

cmake_minimum_required(VERSION 3.5.1)

# CMake Cross ToolChain config file. Adapted from Debian's dpkg-cross ;).
# c.f., https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling-toolchain
# NOTE: Remember that CMake is a special snowflake that completely *ignores* CPPFLAGS,
# because of course it does...
# (https://gitlab.kitware.com/cmake/cmake/issues/12928)

# Build type.
set(CMAKE_BUILD_TYPE $(if $(KODEBUG),Debug,Release))
set(CMAKE_DEBUG_POSTFIX "")

# Disable run time path handling (we have our own).
# And no, just using `set(CMAKE_SKIP_RPATH TRUE)`
# does not work: we end up with empty RPATH entries
# in some cases (e.g. with libwebp).
set(CMAKE_INSTALL_RPATH "")
set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)

# C language.
$(if $(CCACHE),set(CMAKE_C_COMPILER_LAUNCHER $(CCACHE)))
set(CMAKE_C_COMPILER $(REALCC))

# C++ language.
$(if $(CCACHE),set(CMAKE_CXX_COMPILER_LAUNCHER $(CCACHE)))
set(CMAKE_CXX_COMPILER $(REALCXX))

# OBJC language (for SDL2 on macOS).
$(if $(CCACHE),set(CMAKE_OBJC_COMPILER_LAUNCHER $(CCACHE)))
set(CMAKE_OBJC_COMPILER $(REALCC))

# Linker.
set(CMAKE_EXE_LINKER_FLAGS_INIT "$(strip $(LDFLAGS))")

# Tools.
set(CMAKE_AR $(AR) CACHE FILEPATH "Archive")
set(CMAKE_LD $(LD) CACHE FILEPATH "LD")
set(CMAKE_RANLIB $(RANLIB) CACHE FILEPATH "RanLib")
$(if $(WIN32),set(CMAKE_RC_COMPILER $(RC) CACHE FILEPATH "Resource Compiler"))
set(CMAKE_STRIP $(STRIP) CACHE FILEPATH "Strip")

endef

# Cross-compile only definitions.
define cmake_cross_toolchain

$(cmake_toolchain)

# OS.
# NOTE: use Linux for Android too (cf. https://github.com/taka-no-me/android-cmake and
# https://android.googlesource.com/platform/ndk/+/master/build/cmake/android.toolchain.cmake)
# In the meantime, I'll be sitting in the corner, crying hysterically.
set(CMAKE_SYSTEM_NAME $(if $(DARWIN),Darwin,$(if $(WIN32),Windows,Linux)))

# Magical value that inhibits all of CMake's own NDK handling code. (Or shit goes boom.)
$(if $(ANDROID),set(CMAKE_SYSTEM_VERSION 1))
$(if $(ANDROID),set(ANDROID_STL c++_shared))

# Target architecture.
set(CMAKE_SYSTEM_PROCESSOR $(CMAKE_SYSTEM_PROCESSOR))

# Set path(s) to search for libraries/binaries/headers.
set(CMAKE_SYSROOT $(abspath $(SYSROOT)))
set(CMAKE_FIND_ROOT_PATH $(abspath $(STAGING_DIR)))
# Search for programs in the build host directories.
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# For libraries and headers in the target directories.
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
# As well as for CMake packages too.
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

endef

# }}}

# KOReader "toolchain" file: for forwarding definitions to CMake. {{{

CMAKE_KO = $(CMAKE_DIR)/koreader.cmake
CMAKE_FLAGS += -DCMAKE_TOOLCHAIN_FILE='$(abspath $(CMAKE_KO))'

define cmake_koreader

set(CMAKE_TCF $(abspath $(CMAKE_TCF)))
# Ensure the real toolchain is included.
include($${CMAKE_TCF})

set(CHOST          $(CHOST))
set(EMULATE_READER $(EMULATE_READER))
set(LIB_EXT        $(LIB_EXT))

set(THIRDPARTY_DIR $(abspath $(THIRDPARTY_DIR)))

set(MAKE $(MAKE))
set(NINJA $(NINJA))

list(INSERT CMAKE_MODULE_PATH 0 $${THIRDPARTY_DIR}/cmake_modules)

# Platform flags.
set(ANDROID        $(ANDROID))
set(APPIMAGE       $(APPIMAGE))
set(CERVANTES      $(CERVANTES))
set(DARWIN         $(DARWIN))
set(DARWIN_AARCH64 $(DARWIN_AARCH64))
set(KINDLE         $(KINDLE))
set(KOBO           $(KOBO))
set(LEGACY         $(LEGACY))
set(MACOS          $(MACOS))
set(POCKETBOOK     $(POCKETBOOK))
set(REMARKABLE     $(REMARKABLE))
set(SONY_PRSTUX    $(SONY_PRSTUX))
set(WIN32          $(WIN32))

endef

# }}}

# Testing support. {{{

ifneq (,$(EMULATE_READER))

define busted_fn
busted() {(
eval "$$($(LUAROCKS_BINARY) path)";
export TESSDATA_DIR="$$PWD/data";
./luajit -e 'require "busted.runner" {standalone = false}' /dev/null
--exclude-tags=notest
--output=gtest
--sort-files
"$$@";
)}
endef

BUSTED_LUAJIT = $(strip $(busted_fn)); busted

endif

# }}}

# vim: foldmethod=marker foldlevel=0

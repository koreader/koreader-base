# set this to your ARM cross compiler:

SHELL:=/bin/bash

# Use ccache in build system by default. Define USE_NO_CCACHE=1 to force disable it.
ifeq ($(USE_NO_CCACHE), 1)
	CCACHE:=
else
	CCACHE?=$(shell which ccache)
endif

# android toolchain
ANDROID_TOOLCHAIN=toolchain/android-toolchain

# pocketbook toolchain
POCKETBOOK_TOOLCHAIN=toolchain/pocketbook-toolchain

# if TARGET is not defined we will build an emulator on current machine
ifdef TARGET
    export EMULATE_READER=
else
    export EMULATE_READER=1
endif

# set CC CXX AR LD RANLIB
ifneq (,$(filter $(TARGET), kindle arm-generic))
	CHOST?=arm-linux-gnueabi
else ifeq ($(TARGET), kindle5)
	CHOST?=arm-kindle5-linux-gnueabi
else ifeq ($(TARGET), kindlepw2)
	CHOST?=arm-kindlepw2-linux-gnueabi
else ifeq ($(TARGET), kindle-legacy)
	CHOST?=arm-kindle-linux-gnueabi
	export LEGACY=1
else ifeq ($(TARGET), kobo)
	CHOST?=arm-linux-gnueabihf
else ifeq ($(TARGET), ubuntu-touch)
	CHOST?=arm-linux-gnueabihf
	export SDL=1
	export UBUNTUTOUCH=1
else ifeq ($(TARGET), android)
	export ANDROID=1
	export PATH:=$(CURDIR)/$(ANDROID_TOOLCHAIN)/bin:$(PATH)
	export SYSROOT=$(NDK)/platforms/android-9/arch-arm
	CHOST?=arm-linux-androideabi
else ifeq ($(TARGET), win32)
	CHOST?=i686-w64-mingw32
	export WIN32=1
	export SDL=1
else ifeq ($(TARGET), pocketbook)
	CHOST?=arm-obreey-linux-gnueabi
	export LEGACY=1
	export POCKETBOOK=1
	export PATH:=$(CURDIR)/$(POCKETBOOK_TOOLCHAIN)/bin:$(PATH)
	export SYSROOT=$(CURDIR)/$(POCKETBOOK_TOOLCHAIN)/arm-obreey-linux-gnueabi/sysroot
else
	export SDL=1
endif

# unknown device
ifdef SBOX_UNAME_MACHINE
	CC:=gcc
	CXX:=g++
endif

# set cross-compiler/host CC and CXX
ifeq ($(CC), clang)
    CC:=$(CHOST)-clang
    CXX:=$(CHOST)-clang++
    HOSTCC:=clang
    HOSTCXX:=clang++
	# quiet flag
    QFLAGS:=-Qunused-arguments
    export CLANG=1
else
    CC:=$(CHOST)-gcc
    CXX:=$(CHOST)-g++
    HOSTCC:=gcc
    HOSTCXX:=g++
    QFLAGS:=
endif

# set cross-compiler/host AR LD RANLIB
STRIP:=$(CHOST)-strip
AR:=$(CHOST)-ar
LD:=$(CHOST)-ld
RC:=$(CHOST)-windres
RANLIB:=$(CHOST)-ranlib

HOSTAR:=ar
HOSTLD:=ld
HOSTRANLIB:=ranlib

# static libstdc++
STATIC_LIBSTDCPP=$(shell $(CC) -print-file-name=libstdc++.a)

# try to find number of CPUs for build machine
PROCESSORS:=$(shell grep processor /proc/cpuinfo|wc -l)
# incase we build on system that has no /proc/cpuinfo file
ifeq ($(PROCESSORS), 0)
    PROCESSORS=1
endif

# Base CFLAGS, without arch. We'll need it for luajit, because its
# Makefiles do some tricky stuff to differentiate HOST/TARGET
BASE_CFLAGS:=-O2 -ffast-math -pipe -fomit-frame-pointer
# Use this for debugging:
#BASE_CFLAGS:=-O0 -g
# For ricers.
#BASE_CFLAGS:=-O3 -ffast-math -pipe -fomit-frame-pointer -frename-registers -fweb

# Misc GCC tricks to ensure backward compatibility with the K2,
# even when using a fairly recent TC (Linaro/MG).
# NOTE: -mno-unaligned-access is needed for TC based on Linaro 4.6/4.7
# or GCC 4.7, or weird crap happens on FW 2.x. We unfortunately can't
# set it by default, since it's a new flag.
# A possible workaround would be to set the alignment trap to
# fixup (echo 2 > /proc/cpu/alignment) in the launch script,
# but that's terribly ugly, and might severly nerf performance...
# That said, MG 2012.03 is still using GCC 4.6.3, so we're good ;).
#
# For ref:
## no-ssp & killing FORTIFY_SOURCE are for the *_chk private GLIBC symbols [@GLIBC_2.11 & @GLIBC_2.15]
## no-finite-maths-only is for the *_finite LM symbols (byproduct of using ffast-maths) [@GLIBC_2.15]
## GNU_SOURCE is a very heavy-handed way of getting rid of the __isoc99_sscanf stuff [@GLIBC_2.7]
## no-use-cxa-atexit is to get rid of cxa_atexit
#
# FIXME: If we cared, we'd probably need to do something to convince libzmq not to enable support for eventfd [@GLIBC_2.7]
# FIXED: To cross compile libzmq for GLIBC_2.4 you need to configure with the option '--disable-eventfd'
#
MG2K12_COMPAT_CFLAGS:=-fno-stack-protector -U_FORTIFY_SOURCE -D_GNU_SOURCE -fno-finite-math-only
MG2K12_COMPAT_CXXFLAGS:=-fno-use-cxa-atexit
# My legacy TC is based on glibc 2.9, that should be enough :).
NILUJE_COMPAT_CFLAGS:=-fno-stack-protector -U_FORTIFY_SOURCE -D_GNU_SOURCE

# Same deal, but when targeting the K5/Kobo & using Ubuntu's Linaro TCs
UBUNTU_COMPAT_CFLAGS:=-fno-finite-math-only -fno-stack-protector -U_FORTIFY_SOURCE

# ARM 1136JF-S (Legacy Kidle devices [K2/K3/DX/DXG])
ARMV6_1136_ARCH:=-march=armv6j -mtune=arm1136jf-s -mfpu=vfp -marm
# Generic armv6
ARMV6_GENERIC_ARCH:=march=armv6 -mtune=generic-armv6 -marm
# Cortex A8 (K4, Kindle Touch, PW1, Kobos since the Touch)
ARMV7_A8_ARCH:=-march=armv7-a -mtune=cortex-a8 -mfpu=neon -mthumb
# Cortex A9 (Kindle PW2)
ARMV7_A9_ARCH:=-march=armv7-a -mtune=cortex-a9 -mfpu=neon -mthumb
# Android.
# Mirror the NDK's armeabi-v7a APP_ABI (cf. #201)
ANDROID_ARCH:=--sysroot $(SYSROOT)
ANDROID_ARCH+=-march=armv7-a -mfpu=vfpv3-d16
ANDROID_ARCH+=-mthumb
ANDROID_ARCH+=-ffunction-sections -funwind-tables -fstack-protector -no-canonical-prefixes

# Use target-specific CFLAGS
ifeq ($(TARGET), kobo)
	# NOTE: If we only care about Kobos w/ a Touch screen, we're good.
	ARM_ARCH:=$(ARMV7_A8_ARCH)
	ARM_ARCH+=-mfloat-abi=hard
	COMPAT_CFLAGS:=$(UBUNTU_COMPAT_CFLAGS)
	COMPAT_CXXFLAGS:=$(UBUNTU_COMPAT_CFLAGS)
else ifeq ($(TARGET), ubuntu-touch)
	ARM_ARCH:=$(ARMV7_A8_ARCH)
	ARM_ARCH+=-mfloat-abi=hard
	COMPAT_CFLAGS:=$(UBUNTU_COMPAT_CFLAGS)
	COMPAT_CXXFLAGS:=$(UBUNTU_COMPAT_CFLAGS)
else ifeq ($(TARGET), kindle)
	ARM_ARCH:=$(ARMV7_A8_ARCH)
	ARM_ARCH+=-mfloat-abi=softfp
	COMPAT_CFLAGS:=$(UBUNTU_COMPAT_CFLAGS)
	COMPAT_CXXFLAGS:=$(UBUNTU_COMPAT_CFLAGS)
else ifeq ($(TARGET), pocketbook)
	ARM_ARCH:=$(ARMV7_A8_ARCH)
	ARM_ARCH+=-mfloat-abi=softfp
	COMPAT_CFLAGS:=$(MG2K12_COMPAT_CFLAGS) -std=gnu99 --sysroot $(SYSROOT)
	COMPAT_CXXFLAGS:=$(MG2K12_COMPAT_CXXFLAGS) --sysroot $(SYSROOT)
else ifeq ($(TARGET), kindle5)
	ARM_ARCH:=$(ARMV7_A8_ARCH)
	ARM_ARCH+=-mfloat-abi=softfp
else ifeq ($(TARGET), kindlepw2)
	ARM_ARCH:=$(ARMV7_A9_ARCH)
	ARM_ARCH+=-mfloat-abi=softfp
else ifeq ($(TARGET), kindle-legacy)
	ARM_ARCH:=$(ARMV6_1136_ARCH)
	ARM_ARCH+=-mfloat-abi=softfp
	COMPAT_CFLAGS:=$(MG2K12_COMPAT_CFLAGS)
	COMPAT_CXXFLAGS:=$(MG2K12_COMPAT_CXXFLAGS)
	#COMPAT_CFLAGS:=$(NILUJE_COMPAT_CFLAGS)
	# Avoid pulling stuff from GLIBC_2.7 & 2.9 in glib
	export glib_cv_eventfd=no
	export ac_cv_func_pipe2=no
	# Avoid pulling stuff from GLIBC_2.6 in tar
	export ac_cv_func_utimensat=no
	export ac_cv_func_futimens=no
else ifeq ($(TARGET), android)
	ARM_ARCH:=$(ANDROID_ARCH)
	ARM_ARCH+=-mfloat-abi=softfp
else ifeq ($(TARGET), arm-generic)
	# Defaults to generic crap
	ARM_ARCH:=$(ARMV6_GENERIC_ARCH)
	ARM_ARCH+=-mfloat-abi=softfp
else
    # else, we are compiling emulator on x86
    ARM_ARCH:=
endif

# Clang 3.4 on Travis however doesn't define macro '__extern_always_inline'
ifdef CLANG
    BASE_CFLAGS+= -D__extern_always_inline=inline
endif

HOST_ARCH:=-march=native
HOSTCFLAGS:=$(HOST_ARCH) $(BASE_CFLAGS) $(QFLAGS)

CFLAGS:=$(BASE_CFLAGS) $(QFLAGS)
CXXFLAGS:=$(BASE_CFLAGS) $(QFLAGS)
LDFLAGS:=-Wl,-O1 -Wl,--as-needed -static-libstdc++

# NOTE: Follow the NDK's lead
ifeq ($(TARGET), android)
	LDFLAGS+=-march=armv7-a -no-canonical-prefixes -Wl,--fix-cortex-a8
endif

ifeq ($(TARGET), win32)
    LDFLAGS+=-Wl,--allow-multiple-definition -static-libgcc
endif

# in case the libstdc++ is to be linked statically, the location of the static
# library can be specified in the STATICLIBSTDCPP variable.
# the default is to link a shared library:
DYNAMICLIBSTDCPP:=-lstdc++
ifdef STATICLIBSTDCPP
	DYNAMICLIBSTDCPP:=
endif

# you can configure an emulation for the (eink) framebuffer here.
# the application won't use the framebuffer (and the special e-ink ioctls)
# in that case.

ifdef EMULATE_READER
	HOSTCC:=$(strip $(CCACHE) $(HOSTCC))
	HOSTCXX:=$(strip $(CCACHE) $(HOSTCXX))
	HOSTAR:=$(strip $(CCACHE) $(HOSTAR))
	CC:=$(HOSTCC)
	CXX:=$(HOSTCXX)
	AR:=$(HOSTAR)
	LD:=$(HOSTLD)
	RANLIB:=$(HOSTRANLIB)
	CFLAGS+= $(HOST_ARCH)
	CXXFLAGS+= $(HOST_ARCH)
else
	CC:=$(strip $(CCACHE) $(CC))
	CXX:=$(strip $(CCACHE) $(CXX))
	AR:=$(strip $(CCACHE) $(AR))
	CFLAGS+= $(ARM_ARCH) $(COMPAT_CFLAGS)
	CXXFLAGS+= $(ARM_ARCH) $(COMPAT_CXXFLAGS)
	# Make sure we always have mmap() support.
	# This is critical for FreeType, since the usage of platform-specific code depends on this,
	# and without it, we don't get CLOEXEC handling, which is problematic on Kobos, where we spawn stuff that might
	# survive us, and if they inherit some of our fds pointing to the removable user area, bad things happen when it
	# gets unmounted for USBMS handling....
	export ac_cv_func_mmap_fixed_mapped=yes
endif

# not necessary to use PIC flag for win32 which has relocation table in dll
ifneq ($(TARGET), win32)
    CFLAGS+= -fPIC
    CXXFLAGS+= -fPIC
endif

# set a flag that C code can differenciate on for Kobo code
# currently used for framebuffer related code in einkfb.c
ifeq ($(TARGET), kobo)
	CFLAGS+= -DKOBO_PLATFORM
endif

# this will create a path named build/arm-none-linux-gnueabi or similar
MACHINE?=$(shell PATH=$(PATH) $(CC) -dumpmachine 2>/dev/null)
OUTPUT_DIR?=build/$(MACHINE)

# you can probably leave these settings alone:

THIRD_PARTY_DIR=thirdparty

CRENGINE_WRAPPER_DIR=kpvcrlib
CRENGINE_WRAPPER_BUILD_DIR=$(CRENGINE_WRAPPER_DIR)/build
CRENGINE_DIR=$(CRENGINE_WRAPPER_DIR)/crengine
CRENGINE_BUILD_DIR=$(CRENGINE_WRAPPER_BUILD_DIR)/crengine

LUAFILESYSTEM_DIR=luafilesystem

ZLIB_DIR=zlib-1.2.8
ZLIB_STATIC=$(ZLIB_DIR)/libz.a

MINIZIP_DIR=minizip
AES_LIB_DIR=$(MINIZIP_DIR)/aes
AES_LIB=$(MINIZIP_DIR)/libaes.a

MUPDF_DIR=mupdf
MUPDF_LIB_DIR=$(MUPDF_DIR)/build/release
MUPDF_LIB_STATIC=$(MUPDF_LIB_DIR)/libmupdf.a
MUPDF_JS_LIB_STATIC=$(MUPDF_LIB_DIR)/libmujs.a
MUPDF_THIRDPARTY_LIBS=$(MUPDF_LIB_DIR)/libopenjpeg.a \
			$(MUPDF_LIB_DIR)/libjbig2dec.a \
			$(AES_LIB)
MUPDF_LIB=$(OUTPUT_DIR)/libs/libmupdf.$(if $(WIN32),dll,so)

DJVULIBRE_DIR=djvulibre
DJVULIBRE_LIB=$(OUTPUT_DIR)/libs/libdjvulibre$(if $(WIN32),-21.dll,.so.21)
DJVULIBRE_LIB_DIR=$(DJVULIBRE_DIR)/build/libdjvu/.libs/

CRENGINE_LIB=$(OUTPUT_DIR)/libs/libcrengine.$(if $(WIN32),dll,so)

LUA_DIR=luajit-2.0
LUAJIT=$(OUTPUT_DIR)/$(if $(WIN32),luajit.exe,luajit)
LUAJIT_JIT=$(OUTPUT_DIR)/jit
LUAJIT_LIB=$(OUTPUT_DIR)/$(if $(WIN32),lua51.dll,libs/libluajit.so)

POPEN_NOSHELL_DIR=popen-noshell
POPEN_NOSHELL_LIB=$(POPEN_NOSHELL_DIR)/libpopen_noshell.a

K2PDFOPT_DIR=libk2pdfopt
K2PDFOPT_LIB=$(OUTPUT_DIR)/libs/libk2pdfopt$(if $(WIN32),-2.dll,.so.2)
K2PDFOPT_CFLAGS=-I$(K2PDFOPT_DIR)/willuslib \
		-I$(K2PDFOPT_DIR)/k2pdfoptlib -I$(K2PDFOPT_DIR) \
		-I$(K2PDFOPT_DIR)/include_mod

FREETYPE_LIB=$(OUTPUT_DIR)/libs/libfreetype$(if $(WIN32),-6.dll,.so.6)
FREETYPE_DIR=freetype2
FREETYPE_ALL=$(FREETYPE_LIB) $(FREETYPE_DIR)/build/include/freetype2/ft2build.h

JPEG_LIB=$(OUTPUT_DIR)/libs/libjpeg$(if $(WIN32),-8.dll,.so.8)
TURBOJPEG_LIB=$(OUTPUT_DIR)/libs/libturbojpeg$(if $(WIN32),.dll,.so)
TURBOJPEG_DIR=libjpeg-turbo-1.4.2
JPEG_ALL=$(JPEG_LIB) $(TURBOJPEG_DIR)/include/jconfig.h

PNG_LIB=$(OUTPUT_DIR)/libs/libpng16$(if $(WIN32),-16.dll,.so$(if $(ANDROID),,.16))
PNG_DIR=libpng-1.6.19
PNG_BUILD_DIR=$(PNG_DIR)/lib

LODEPNG_LIB=$(OUTPUT_DIR)/libs/liblodepng$(if $(WIN32),.dll,.so)
LODEPNG_DIR=lodepng

GIF_LIB=$(OUTPUT_DIR)/libs/libgif$(if $(WIN32),-7.dll,.so.7)
GIF_DIR=giflib-5.1.1

SDCV_DIR=sdcv-0.4.2
GLIB_DIR=glib
LIBICONV_DIR=libiconv-1.14
GETTEXT_DIR=gettext-0.19

LIBICONV=$(LIBICONV_DIR)/lib/libiconv.a
LIBGETTEXT=$(GETTEXT_DIR)/lib/libintl.a
GLIB=$(GLIB_DIR)/lib/libglib-2.0.so.0
GLIB_STATIC=$(GLIB_DIR)/lib/libglib-2.0.a
ZLIB=$(OUTPUT_DIR)/libs/$(if $(WIN32),zlib1.dll,libz.so.1)

LEPTONICA_LIB=$(OUTPUT_DIR)/libs/liblept$(if $(WIN32),-3.dll,.so.3)
TESSERACT_LIB=$(OUTPUT_DIR)/libs/libtesseract$(if $(WIN32),-3.dll,.so.3)

OPENSSL_DIR=openssl
OPENSSL_LIB=$(OPENSSL_DIR)/libssl.$(if $(WIN32),a,so)
SSL_LIB=$(OUTPUT_DIR)/libs/libssl$(if $(WIN32),-1.dll,.so.1.0.0)
CRYPTO_LIB=$(OUTPUT_DIR)/libs/libcrypto$(if $(WIN32),-1.dll,.so.1.0.0)

LUA_SOCKET_DIR=luasocket
LUA_SEC_DIR=luasec
LUASOCKET=$(OUTPUT_DIR)/common/socket
LUASEC=$(OUTPUT_DIR)/common/ssl

EVERNOTE_SDK_DIR=plugins/evernote-sdk-lua
EVERNOTE_PLUGIN_DIR=$(OUTPUT_DIR)/plugins/evernote.koplugin
EVERNOTE_THRIFT_DIR=$(EVERNOTE_PLUGIN_DIR)/thrift
EVERNOTE_LIB=$(EVERNOTE_PLUGIN_DIR)/lib/libluasocket.so

LUASERIAL_DIR=lua-serialize
LUASERIAL_LIB=$(OUTPUT_DIR)/common/libserialize.so

ZMQ_DIR=libzmq
CZMQ_DIR=czmq
FILEMQ_DIR=filemq
ZYRE_DIR=zyre
ZMQ_LIB=$(OUTPUT_DIR)/libs/libzmq.$(if $(WIN32),dll,so.4)
CZMQ_LIB=$(OUTPUT_DIR)/libs/libczmq.$(if $(WIN32),dll,so.1)
FILEMQ_LIB=$(OUTPUT_DIR)/libs/libfmq.$(if $(WIN32),dll,so.1)
ZYRE_LIB=$(OUTPUT_DIR)/libs/libzyre.$(if $(WIN32),dll,so.1)

ZSYNC_DIR=zsync/c
TAR_DIR=tar-1.28

TURBO_DIR=turbo
TURBO_FFI_WRAP_LIB=$(OUTPUT_DIR)/common/libtffi_wrap.so

LUAROCKS_DIR=$(OUTPUT_DIR)/rocks/lib/luarocks/rocks

LUA_SPORE_DIR=lua-Spore
LUA_SPORE=lua-spore
SPORE_VER=0.3.1-1
LUA_SPORE_VER=$(LUA_SPORE)-$(SPORE_VER)
LUA_SPORE_ROCKSPEC=rockspec/$(LUA_SPORE_VER).rockspec
LUA_SPORE_ROCK=$(LUAROCKS_DIR)/lua-spore/$(SPORE_VER)/$(LUA_SPORE_VER).rockspec

# CFLAGS for the Lua/C/C++ modules:
#
# setting the rpath to '$ORIGIN' will make the dynamic linker search
# for the library in the same path as the executable that references
# them.
#
# also, dynamic libraries must be compiled with "-shared" and "-fPIC".
# having all symbols included (-E) won't hurt, too.
DYNLIB_CFLAGS=-L$(OUTPUT_DIR)/libs $(CFLAGS) \
		-I$(LUA_DIR)/src -shared -Wl,-E -Wl,-rpath,'$$ORIGIN'


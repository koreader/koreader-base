diff --git a/crengine/include/lvfntman.h b/crengine/include/lvfntman.h
index 014f8f3..c919084 100644
--- a/crengine/include/lvfntman.h
+++ b/crengine/include/lvfntman.h
@@ -320,6 +320,8 @@ public:
     virtual LVFontRef GetFallbackFont(int /*size*/) { return LVFontRef(); }
     /// registers font by name
     virtual bool RegisterFont( lString8 name ) = 0;
+    /// registers font by name and face
+    virtual bool RegisterExternalFont(lString16 /*name*/, lString8 /*face*/, bool /*bold*/, bool /*italic*/) { return false; }
     /// registers document font
     virtual bool RegisterDocumentFont(int /*documentId*/, LVContainerRef /*container*/, lString16 /*name*/, lString8 /*face*/, bool /*bold*/, bool /*italic*/) { return false; }
     /// unregisters all document fonts
diff --git a/crengine/src/lvfntman.cpp b/crengine/src/lvfntman.cpp
index 49125a7..931910f 100644
--- a/crengine/src/lvfntman.cpp
+++ b/crengine/src/lvfntman.cpp
@@ -2440,6 +2440,95 @@ public:
         _cache.removeDocumentFonts(documentId);
     }
 
+    virtual bool RegisterExternalFont( lString16 name, lString8 family_name, bool bold, bool italic) {
+		if (name.startsWithNoCase(lString16("res://")))
+			name = name.substr(6);
+		else if (name.startsWithNoCase(lString16("file://")))
+			name = name.substr(7);
+		lString8 fname = UnicodeToUtf8(name);
+
+        bool res = false;
+
+        int index = 0;
+
+        FT_Face face = NULL;
+
+        // for all faces in file
+        for ( ;; index++ ) {
+            int error = FT_New_Face( _library, fname.c_str(), index, &face ); /* create face object */
+            if ( error ) {
+                if (index == 0) {
+                    CRLog::error("FT_New_Face returned error %d", error);
+                }
+                break;
+            }
+            bool scal = FT_IS_SCALABLE( face );
+            bool charset = checkCharSet( face );
+            //bool monospaced = isMonoSpaced( face );
+            if ( !scal || !charset ) {
+    //#if (DEBUG_FONT_MAN==1)
+     //           if ( _log ) {
+                CRLog::debug("    won't register font %s: %s",
+                    name.c_str(), !charset?"no mandatory characters in charset" : "font is not scalable"
+                    );
+    //            }
+    //#endif
+                if ( face ) {
+                    FT_Done_Face( face );
+                    face = NULL;
+                }
+                break;
+            }
+            int num_faces = face->num_faces;
+
+            css_font_family_t fontFamily = css_ff_sans_serif;
+            if ( face->face_flags & FT_FACE_FLAG_FIXED_WIDTH )
+                fontFamily = css_ff_monospace;
+            lString8 familyName( ::familyName(face) );
+            if ( familyName=="Times" || familyName=="Times New Roman" )
+                fontFamily = css_ff_serif;
+
+            LVFontDef def(
+                fname,
+                -1, // height==-1 for scalable fonts
+                bold?700:400,
+                italic?true:false,
+                fontFamily,
+                family_name,
+                index
+            );
+    #if (DEBUG_FONT_MAN==1)
+        if ( _log ) {
+            fprintf(_log, "registering font: (file=%s[%d], size=%d, weight=%d, italic=%d, family=%d, typeface=%s)\n",
+                def.getName().c_str(), def.getIndex(), def.getSize(), def.getWeight(), def.getItalic()?1:0, (int)def.getFamily(), def.getTypeFace().c_str()
+            );
+        }
+    #endif
+            if ( _cache.findDuplicate( &def ) ) {
+                CRLog::trace("font definition is duplicate");
+                return false;
+            }
+            _cache.update( &def, LVFontRef(NULL) );
+            if ( scal && !def.getItalic() ) {
+                LVFontDef newDef( def );
+                newDef.setItalic(2); // can italicize
+                if ( !_cache.findDuplicate( &newDef ) )
+                    _cache.update( &newDef, LVFontRef(NULL) );
+            }
+            res = true;
+
+            if ( face ) {
+                FT_Done_Face( face );
+                face = NULL;
+            }
+
+            if ( index>=num_faces-1 )
+                break;
+        }
+
+        return res;
+	}
+
     virtual bool RegisterFont( lString8 name )
     {
 #ifdef LOAD_TTF_FONTS_ONLY

PROJECT(kpvcrlib)
cmake_minimum_required(VERSION 2.6)
enable_language(C CXX ASM)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/../cmake_modules")
include("koreader_thirdparty_common")

SET(CMAKE_ASM_COMPILER ${CMAKE_C_COMPILER})
SET(CMAKE_ASM_COMPILER_ARG1 ${CMAKE_C_COMPILER_ARG1})
SET(CMAKE_ASM_FLAGS ${CMAKE_C_FLAGS})
SET(CMAKE_ASM_FLAGS_RELEASE "")

set (CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
set (CMAKE_INSTALL_RPATH "$ORIGIN")

SET(CR_3RDPARTY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/crengine/thirdparty)
SET(CRE_DIR crengine/crengine)

SET(ANTIWORD_INCLUDE_DIR ${CR_3RDPARTY_DIR}/antiword)
SET(CHM_INCLUDE_DIRS ${CR_3RDPARTY_DIR}/chmlib/src)
SET(CREGINE_INCLUDE_DIR ${CRE_DIR}/include)

assert_var_defined(FREETYPE_INCLUDE_DIR)
assert_var_defined(HARFBUZZ_INCLUDE_DIR)
assert_var_defined(JPEGLIB_INCLUDE_DIR)
assert_var_defined(PNG_INCLUDE_DIR)
assert_var_defined(ZLIB_INCLUDE_DIR)
assert_var_defined(JCONFIG_INCLUDE_DIR)

INCLUDE_DIRECTORIES(
	${JCONFIG_INCLUDE_DIR}
	${FREETYPE_INCLUDE_DIR}
	${HARFBUZZ_INCLUDE_DIR}
	${ANTIWORD_INCLUDE_DIR}
	${CHM_INCLUDE_DIRS}
	${PNG_INCLUDE_DIR}
	${ZLIB_INCLUDE_DIR}
	${JPEGLIB_INCLUDE_DIR}
	${NANOSVG_INCLUDE_DIR}
	${CREGINE_INCLUDE_DIR}
)

IF(DEFINED ENV{WIN32})
    ADD_DEFINITIONS(-DWIN32=1 -D_WIN32=1 -DQT_GL=1 -DMINGW -DHAVE_BOOLEAN)
ELSE()
    ADD_DEFINITIONS(-DLINUX=1 -D_LINUX=1)
ENDIF()

ADD_DEFINITIONS(-DUSE_FONTCONFIG=0 -DUSE_FREETYPE=1 -DUSE_HARFBUZZ=1 -DALLOW_KERNING=1 -DCR3_PATCH=1 -DNDEBUG=1)

IF(DEFINED ENV{WIN32})
    find_library(ZLIB NAMES "zlib1" PATHS $ENV{LIBS_DIR})
    find_library(PNG_LIB NAMES "png16-16" PATHS $ENV{LIBS_DIR})
    find_library(FREETYPE_LIB NAMES "freetype-6" PATHS $ENV{LIBS_DIR})
    find_library(HARFBUZZ_LIB NAMES "harfbuzz-0" PATHS $ENV{LIBS_DIR})
    find_library(JPEG_LIB NAMES "jpeg-8" PATHS $ENV{LIBS_DIR})
    SET(THIRDPARTY_LIBS ${ZLIB} ${FREETYPE_LIB} ${HARFBUZZ_LIB} ${JPEG_LIB} ${PNG_LIB})
ELSE()
    ADD_LIBRARY(PNG_LIB SHARED IMPORTED)
    SET_TARGET_PROPERTIES(PNG_LIB PROPERTIES IMPORTED_LOCATION $ENV{PNG_LIB})
    ADD_LIBRARY(FREETYPE_LIB SHARED IMPORTED)
    SET_TARGET_PROPERTIES(FREETYPE_LIB PROPERTIES IMPORTED_LOCATION $ENV{FREETYPE_LIB})
    ADD_LIBRARY(HARFBUZZ_LIB SHARED IMPORTED)
    SET_TARGET_PROPERTIES(HARFBUZZ_LIB PROPERTIES IMPORTED_LOCATION $ENV{HARFBUZZ_LIB})
    ADD_LIBRARY(JPEG_LIB SHARED IMPORTED)
    SET_TARGET_PROPERTIES(JPEG_LIB PROPERTIES IMPORTED_LOCATION $ENV{JPEG_LIB})
    ADD_LIBRARY(ZLIB SHARED IMPORTED)
    SET_TARGET_PROPERTIES(ZLIB PROPERTIES IMPORTED_LOCATION $ENV{ZLIB})
    SET(THIRDPARTY_LIBS ZLIB FREETYPE_LIB HARFBUZZ_LIB JPEG_LIB PNG_LIB)
ENDIF()

message("Will build LIBCHM library")
ADD_DEFINITIONS(-DCHM_SUPPORT_ENABLED=1)
ADD_SUBDIRECTORY(${CR_3RDPARTY_DIR}/chmlib)

message("Will build ANTIWORD library")
ADD_DEFINITIONS(-DENABLE_ANTIWORD=1)
ADD_DEFINITIONS(-DCR3_ANTIWORD_PATCH=1)
ADD_SUBDIRECTORY(${CR_3RDPARTY_DIR}/antiword)

message("Will build crengine library")
ADD_DEFINITIONS(-DHAVE_PROTOTYPES)
ADD_DEFINITIONS(-DHAVE_UNSIGNED_CHAR)
ADD_DEFINITIONS(-DCR_EMULATE_GETTEXT)
ADD_DEFINITIONS(-Dmain=xxxmain)
SET (CRENGINE_SOURCES
	${CRE_DIR}/src/cp_stats.cpp
	${CRE_DIR}/src/lvstring.cpp
	${CRE_DIR}/src/props.cpp
	${CRE_DIR}/src/lstridmap.cpp
	${CRE_DIR}/src/rtfimp.cpp
	${CRE_DIR}/src/lvmemman.cpp
	${CRE_DIR}/src/lvstyles.cpp
	${CRE_DIR}/src/crtxtenc.cpp
	${CRE_DIR}/src/lvtinydom.cpp
	${CRE_DIR}/src/lvstream.cpp
	${CRE_DIR}/src/lvxml.cpp
	${CRE_DIR}/src/chmfmt.cpp
	${CRE_DIR}/src/epubfmt.cpp
	${CRE_DIR}/src/pdbfmt.cpp
	${CRE_DIR}/src/wordfmt.cpp
	${CRE_DIR}/src/lvstsheet.cpp
	${CRE_DIR}/src/txtselector.cpp
	${CRE_DIR}/src/crtest.cpp
	${CRE_DIR}/src/lvbmpbuf.cpp
	${CRE_DIR}/src/lvfnt.cpp
	${CRE_DIR}/src/hyphman.cpp
	${CRE_DIR}/src/lvfntman.cpp
	${CRE_DIR}/src/lvimg.cpp
	${CRE_DIR}/src/crskin.cpp
	${CRE_DIR}/src/lvdrawbuf.cpp
	${CRE_DIR}/src/lvdocview.cpp
	${CRE_DIR}/src/lvpagesplitter.cpp
	${CRE_DIR}/src/lvtextfm.cpp
	${CRE_DIR}/src/lvrend.cpp
	${CRE_DIR}/src/wolutil.cpp
	${CRE_DIR}/src/hist.cpp
	${CRE_DIR}/src/cri18n.cpp
	${CRE_DIR}/src/crconcurrent.cpp
	${CRE_DIR}/src/xxhash.c
)
ADD_LIBRARY(crengine SHARED ${CRENGINE_SOURCES})

target_link_libraries(crengine chmlib antiword ${THIRDPARTY_LIBS})

diff --git a/src/lj_api.c b/src/lj_api.c
index ecaf8a2..8af78dc 100644
--- a/src/lj_api.c
+++ b/src/lj_api.c
@@ -1069,6 +1069,7 @@ LUA_API int lua_setmetatable(lua_State *L, int idx)
       lj_gc_objbarrier(L, udataV(o), mt);
   } else {
     /* Flush cache, since traces specialize to basemt. But not during __gc. */
+    LJ_LOG("-> requesting a flush");
     if (lj_trace_flushall(L))
       lj_err_caller(L, LJ_ERR_NOGCMM);
     if (tvisbool(o)) {
diff --git a/src/lj_asm.c b/src/lj_asm.c
index aae7b5b..b675e96 100644
--- a/src/lj_asm.c
+++ b/src/lj_asm.c
@@ -137,6 +137,7 @@ static LJ_AINLINE void checkmclim(ASMState *as)
       as->curins+1-REF_BIAS, ir->o, ir->op1-REF_BIAS, ir->op2-REF_BIAS);
   }
 #endif
+  //LJ_LOG("as->mcp: %p // as->mclim: %p", (void *) as->mcp, (void *) as->mclim);
   if (LJ_UNLIKELY(as->mcp < as->mclim)) asm_mclimit(as);
 #ifdef LUA_USE_ASSERT
   as->mcp_prev = as->mcp;
diff --git a/src/lj_def.h b/src/lj_def.h
index cfe18c4..986a2b8 100644
--- a/src/lj_def.h
+++ b/src/lj_def.h
@@ -45,6 +45,10 @@ typedef unsigned int uintptr_t;
 #include <string.h>
 #include <stdlib.h>
 
+/* KOReader hack: debug logging */
+#include <stdio.h>
+#define LJ_LOG(fmt, ...) (fprintf(stderr, "[LuaJIT] [%s] " fmt "\n", __FUNCTION__, ##__VA_ARGS__))
+
 /* Various VM limits. */
 #define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
 #define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
diff --git a/src/lj_dispatch.c b/src/lj_dispatch.c
index 1d0ff54..8ef29a3 100644
--- a/src/lj_dispatch.c
+++ b/src/lj_dispatch.c
@@ -248,6 +248,7 @@ int luaJIT_setmode(lua_State *L, int idx, int mode)
 #if LJ_HASJIT
   case LUAJIT_MODE_ENGINE:
     if ((mode & LUAJIT_MODE_FLUSH)) {
+      LJ_LOG("mode is flush");
       lj_trace_flushall(L);
     } else {
       if (!(mode & LUAJIT_MODE_ON))
diff --git a/src/lj_mcode.c b/src/lj_mcode.c
index a5153b2..b150438 100644
--- a/src/lj_mcode.c
+++ b/src/lj_mcode.c
@@ -105,12 +105,14 @@ static void *mcode_alloc_at(jit_State *J, uintptr_t hint, size_t sz, int prot)
     if (!hint) lj_trace_err(J, LJ_TRERR_MCODEAL);
     p = NULL;
   }
+  LJ_LOG("mapped at @ %p (%zuK)", p, sz / 1024U);
   return p;
 }
 
 static void mcode_free(jit_State *J, void *p, size_t sz)
 {
   UNUSED(J);
+  LJ_LOG("unmapped at @ %p", p);
   munmap(p, sz);
 }
 
@@ -210,8 +212,11 @@ static void *mcode_alloc(jit_State *J, size_t sz)
   uintptr_t target = (uintptr_t)(void *)lj_vm_exit_handler & ~(uintptr_t)0xffff;
 #endif
   const uintptr_t range = (1u << (LJ_TARGET_JUMPRANGE-1)) - (1u << 21);
+  LJ_LOG("target is @ %p", (void *) target);
+  LJ_LOG("range is %p", (void *) range);
   /* First try a contiguous area below the last one. */
   uintptr_t hint = J->mcarea ? (uintptr_t)J->mcarea - sz : 0;
+  LJ_LOG("original hint is @ %p (mcarea: %p)", (void *) hint, (void *) J->mcarea);
   int i;
   /* Limit probing iterations, depending on the available pool size. */
   for (i = 0; i < LJ_TARGET_JUMPRANGE; i++) {
@@ -226,8 +231,10 @@ static void *mcode_alloc(jit_State *J, size_t sz)
     /* Next try probing 64K-aligned pseudo-random addresses. */
     do {
       hint = lj_prng_u64(&J2G(J)->prng) & ((1u<<LJ_TARGET_JUMPRANGE)-0x10000);
+      LJ_LOG("random hint is @ %p", (void *) hint);
     } while (!(hint + sz < range+range));
     hint = target + hint - range;
+    LJ_LOG("requesting malloc @ %p (iter: %d)", (void *) hint, i);
   }
   lj_trace_err(J, LJ_TRERR_MCODEAL);  /* Give up. OS probably ignores hints? */
   return NULL;
@@ -289,6 +296,7 @@ void lj_mcode_free(jit_State *J)
 /* Reserve the remainder of the current MCode area. */
 MCode *lj_mcode_reserve(jit_State *J, MCode **lim)
 {
+  //LJ_LOG("J->mcarea: %p // lim: %p // mctop: %p // mcbot: %p", (void *) J->mcarea, (void *) *lim, (void *) J->mctop, (void *) J->mcbot);
   if (!J->mcarea)
     mcode_allocarea(J);
   else
@@ -353,6 +361,7 @@ void lj_mcode_limiterr(jit_State *J, size_t need)
   sizemcode = (size_t)J->param[JIT_P_sizemcode] << 10;
   sizemcode = (sizemcode + LJ_PAGESIZE-1) & ~(size_t)(LJ_PAGESIZE - 1);
   maxmcode = (size_t)J->param[JIT_P_maxmcode] << 10;
+  LJ_LOG("J->szallmcarea: %zu / sizemcode: %zu / maxmcode: %zu / need: %zu", J->szallmcarea, sizemcode, maxmcode, need);
   if ((size_t)need > sizemcode)
     lj_trace_err(J, LJ_TRERR_MCODEOV);  /* Too long for any area. */
   if (J->szallmcarea + sizemcode > maxmcode)
diff --git a/src/lj_trace.c b/src/lj_trace.c
index a398089..b6418ce 100644
--- a/src/lj_trace.c
+++ b/src/lj_trace.c
@@ -298,6 +298,7 @@ int lj_trace_flushall(lua_State *L)
   /* Clear penalty cache. */
   memset(J->penalty, 0, sizeof(J->penalty));
   /* Free the whole machine code and invalidate all exit stub groups. */
+  LJ_LOG("will free mcode");
   lj_mcode_free(J);
   memset(J->exitstubgroup, 0, sizeof(J->exitstubgroup));
   lj_vmevent_send(L, TRACE,
@@ -361,6 +362,7 @@ void lj_trace_freestate(global_State *g)
 		 "trace still allocated");
   }
 #endif
+  LJ_LOG("will free mcode");
   lj_mcode_free(J);
   lj_mem_freevec(g, J->snapmapbuf, J->sizesnapmap, SnapEntry);
   lj_mem_freevec(g, J->snapbuf, J->sizesnap, SnapShot);
@@ -428,6 +430,7 @@ static void trace_start(jit_State *J)
   if (LJ_UNLIKELY(traceno == 0)) {  /* No free trace? */
     lj_assertJ((J2G(J)->hookmask & HOOK_GC) == 0,
 	       "recorder called from GC hook");
+    LJ_LOG("no free trace -> flush");
     lj_trace_flushall(J->L);
     J->state = LJ_TRACE_IDLE;  /* Silently ignored. */
     return;
@@ -621,8 +624,10 @@ static int trace_abort(jit_State *J)
   L->top--;  /* Remove error object */
   if (e == LJ_TRERR_DOWNREC)
     return trace_downrec(J);
-  else if (e == LJ_TRERR_MCODEAL)
+  else if (e == LJ_TRERR_MCODEAL) {
+    LJ_LOG("LJ_TRERR_MCODEAL -> flush");
     lj_trace_flushall(L);
+  }
   return 0;
 }
 

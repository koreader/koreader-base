diff -Nuarp lpeg-1.0.2-orig/lptree.c lpeg-1.0.2/lptree.c
--- lpeg-1.0.2-orig/lptree.c	2019-03-11 15:08:29.000000000 +0100
+++ lpeg-1.0.2/lptree.c	2022-10-17 05:12:24.958098423 +0200
@@ -21,7 +21,7 @@
 /* number of siblings for each tree */
 const byte numsiblings[] = {
   0, 0, 0,	/* char, set, any */
-  0, 0,		/* true, false */	
+  0, 0,		/* true, false */
   1,		/* rep */
   2, 2,		/* seq, choice */
   1, 1,		/* not, and */
@@ -1290,13 +1290,13 @@ static struct luaL_Reg metareg[] = {
 };
 
 
-int luaopen_lpeg (lua_State *L);
-int luaopen_lpeg (lua_State *L) {
+LUALIB_API int luaopen_lpeg (lua_State *L);
+LUALIB_API int luaopen_lpeg (lua_State *L) {
   luaL_newmetatable(L, PATTERN_T);
   lua_pushnumber(L, MAXBACK);  /* initialize maximum backtracking */
   lua_setfield(L, LUA_REGISTRYINDEX, MAXSTACKIDX);
-  luaL_setfuncs(L, metareg, 0);
-  luaL_newlib(L, pattreg);
+  luaL_register(L, NULL, metareg);
+  luaL_register(L, "lpeg", pattreg);
   lua_pushvalue(L, -1);
   lua_setfield(L, -3, "__index");
   return 1;
diff -Nuarp lpeg-1.0.2-orig/lptypes.h lpeg-1.0.2/lptypes.h
--- lpeg-1.0.2-orig/lptypes.h	2019-03-11 15:08:29.000000000 +0100
+++ lpeg-1.0.2/lptypes.h	2022-10-17 05:12:24.958098423 +0200
@@ -33,9 +33,16 @@
 #define lua_setuservalue	lua_setfenv
 
 #define lua_rawlen		lua_objlen
+#endif
+
+/*
+** compatibility with Lua 5.2
+*/
+#if (LUA_VERSION_NUM == 502)
 
-#define luaL_setfuncs(L,f,n)	luaL_register(L,NULL,f)
-#define luaL_newlib(L,f)	luaL_register(L,"lpeg",f)
+#undef luaL_register
+#define luaL_register(L,n,f) \
+	{ if ((n) == NULL) luaL_setfuncs(L,f,0); else luaL_newlib(L,f); }
 
 #endif
 
diff -Nuarp lpeg-1.0.2-orig/makefile lpeg-1.0.2/makefile
--- lpeg-1.0.2-orig/makefile	2019-03-11 15:08:29.000000000 +0100
+++ lpeg-1.0.2/makefile	2022-10-17 05:12:38.777097975 +0200
@@ -1,10 +1,14 @@
-LIBNAME = lpeg
-LUADIR = ../lua/
+LIBNAME := lpeg
+LUADIR ?= ../lua/
 
-COPT = -O2 -DNDEBUG
-# COPT = -g
+INST_PREFIX = /usr/local
+INST_BINDIR = $(INST_PREFIX)/bin
+INST_LIBDIR = $(INST_PREFIX)/lib/lua/5.1
+INST_LUADIR = $(INST_PREFIX)/share/lua/5.1
+INST_CONFDIR = $(INST_PREFIX)/etc
 
-CWARNS = -Wall -Wextra -pedantic \
+PROJ_CPPFLAGS := -DNDEBUG -I$(LUADIR)
+CWARNS := -Wall -Wextra -pedantic \
 	-Waggregate-return \
 	-Wcast-align \
 	-Wcast-qual \
@@ -18,38 +22,54 @@ CWARNS = -Wall -Wextra -pedantic \
 	-Wdeclaration-after-statement \
 	-Wmissing-prototypes \
 	-Wnested-externs \
-	-Wstrict-prototypes \
-# -Wunreachable-code \
+	-Wstrict-prototypes
+COPT := -O2
+CSTD := -std=c99
 
+PROJ_CFLAGS := $(COPT) $(CSTD) $(CWARNS) -fPIC
+CC ?= gcc
 
-CFLAGS = $(CWARNS) $(COPT) -std=c99 -I$(LUADIR) -fPIC
-CC = gcc
+PROJ_SRCS := lpcap.c lpcode.c lpprint.c lptree.c lpvm.c
+PROJ_OBJS := $(PROJ_SRCS:.c=.o)
 
-FILES = lpvm.o lpcap.o lptree.o lpcode.o lpprint.o
+default: lpeg.so
+
+%.o: %.c
+	$(CC) $(PROJ_CPPFLAGS) -I$(LUA_INCDIR) $(CPPFLAGS) $(PROJ_CFLAGS) $(CFLAGS) $(DLLFLAGS) $(LIBFLAG) $(LDFLAGS) -o $@ -c $<
 
 # For Linux
 linux:
-	$(MAKE) lpeg.so "DLLFLAGS = -shared -fPIC"
+	$(MAKE) lpeg.so "DLLFLAGS = -shared"
 
-# For Mac OS
+# For macOS
 macosx:
 	$(MAKE) lpeg.so "DLLFLAGS = -bundle -undefined dynamic_lookup"
 
-lpeg.so: $(FILES)
-	env $(CC) $(DLLFLAGS) $(FILES) -o lpeg.so
-
-$(FILES): makefile
+lpeg.so: $(PROJ_OBJS)
+	@echo --- build
+	@echo CFLAGS: $(CFLAGS)
+	@echo LIBFLAG: $(LIBFLAG)
+	@echo DLLFLAGS: $(DLLFLAGS)
+	@echo LUA_LIBDIR: $(LUA_LIBDIR)
+	@echo LUA_INCDIR: $(LUA_INCDIR)
+	$(CC) $(PROJ_CPPFLAGS) -I$(LUA_INCDIR) $(CPPFLAGS) $(PROJ_CFLAGS) $(CFLAGS) $(DLLFLAGS) $(LIBFLAG) $(LDFLAGS) $(PROJ_OBJS) -o lpeg.so $(if $(LUALIB),$(LUA_LIBDIR)/$(LUALIB)) $(LIBS)
+
+install: lpeg.so re.lua
+	@echo --- install
+	@echo INST_PREFIX: $(INST_PREFIX)
+	@echo INST_BINDIR: $(INST_BINDIR)
+	@echo INST_LIBDIR: $(INST_LIBDIR)
+	@echo INST_LUADIR: $(INST_LUADIR)
+	@echo INST_CONFDIR: $(INST_CONFDIR)
+	install -d $(INST_LIBDIR)
+	cp lpeg.so $(INST_LIBDIR)
+	install -d $(INST_LUADIR)
+	cp re.lua $(INST_LUADIR)
 
 test: test.lua re.lua lpeg.so
 	./test.lua
 
 clean:
-	rm -f $(FILES) lpeg.so
-
-
-lpcap.o: lpcap.c lpcap.h lptypes.h
-lpcode.o: lpcode.c lptypes.h lpcode.h lptree.h lpvm.h lpcap.h
-lpprint.o: lpprint.c lptypes.h lpprint.h lptree.h lpvm.h lpcap.h
-lptree.o: lptree.c lptypes.h lpcap.h lpcode.h lptree.h lpvm.h lpprint.h
-lpvm.o: lpvm.c lpcap.h lptypes.h lpvm.h lpprint.h lptree.h
+	rm -f $(PROJ_OBJS) lpeg.so
 
+.PHONY: default

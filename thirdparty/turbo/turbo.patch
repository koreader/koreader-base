diff --git a/turbo/cdef.lua b/turbo/cdef.lua
old mode 100755
new mode 100644
index efa69fc..b6ccfff
--- a/turbo/cdef.lua
+++ b/turbo/cdef.lua
@@ -58,34 +58,11 @@ end

 if not S then
     ffi.cdef [[
-        struct sockaddr{
-            unsigned short sa_family;
-            char sa_data[14];
-        };
         struct sockaddr_storage{
             unsigned short int ss_family;
             unsigned long int __ss_align;
             char __ss_padding[128 - (2 *sizeof(unsigned long int))];
         };
-        struct in_addr{
-            unsigned long s_addr;
-        };
-        struct in6_addr{
-            unsigned char s6_addr[16];
-        };
-        struct sockaddr_in{
-            short sin_family;
-            unsigned short sin_port;
-            struct in_addr sin_addr;
-            char sin_zero[8];
-        } __attribute__ ((__packed__));
-        struct sockaddr_in6{
-            unsigned short sin6_family;
-            unsigned short sin6_port;
-            unsigned int sin6_flowinfo;
-            struct in6_addr sin6_addr;
-            unsigned int sin6_scope_id;
-        };
         typedef unsigned short  sa_family_t;
         struct sockaddr_un {
             sa_family_t sun_family;
@@ -222,7 +222,7 @@ end
     end
     ffi.cdef(string.format([[
         typedef void(*sighandler_t)(int);
-        sighandler_t signal(int signum, sighandler_t handler);
+        sighandler_t sysv_signal(int signum, sighandler_t handler);
         int kill(pid_t pid, int sig);
         typedef struct {
             unsigned long int __val[%d];
@@ -243,6 +243,7 @@ end
         ffi.cdef[[
             typedef long suseconds_t;
             typedef long time_t;
+            /*
             struct timeval{
                 time_t tv_sec;
                 suseconds_t tv_usec;
@@ -251,6 +252,7 @@ end
                 int tz_minuteswest;
                 int tz_dsttime;
             };
+            */
         ]]
     end
     ffi.cdef([[
@@ -292,11 +294,13 @@ if platform.__UNIX__ then
     --- ******* RealTime (for Monotonic time) *******
     if not S then
         ffi.cdef[[
+            /*
             struct timespec
             {
                 time_t tv_sec;
                 long tv_nsec;
             };
+            */
         ]]
     end
     ffi.cdef[[
@@ -301,10 +301,12 @@ if platform.__UNIX__ then
     end
     ffi.cdef[[
         typedef unsigned int clockid_t;
+        /*
         enum clock_ids{
             CLOCK_REALTIME,
             CLOCK_MONOTONIC
         };
+        */
 
         int clock_gettime(clockid_t clk_id, struct timespec *tp);
     ]]
@@ -396,6 +396,7 @@ if platform.__LINUX__ then
 
     -- stat structure is architecture dependent in Linux
     if not S then
+    --[=====[
         if platform.__X86__ then
             ffi.cdef[[
               struct stat {
@@ -534,6 +535,7 @@ if platform.__LINUX__ then
               };
             ]]
         end
+    --]=====]
     end



diff --git a/turbo/signal.lua b/turbo/signal.lua
old mode 100755
new mode 100644
index 7edb21a..834c12c
--- a/turbo/signal.lua
+++ b/turbo/signal.lua
@@ -26,7 +26,7 @@ local platform = require "turbo.platform"
 
 if ffi.arch == "mipsel" then
 return {
-	signal = ffi.C.signal
+	signal = ffi.C.sysv_signal
     -- For sigprocmask(2)
     , SIG_BLOCK   = 1
     , SIG_UNBLOCK = 2
@@ -75,7 +75,7 @@ return {
 	}
 else
 return {
-        signal = ffi.C.signal
+        signal = ffi.C.sysv_signal
         -- For sigprocmask(2)
         , SIG_BLOCK   = 0
         , SIG_UNBLOCK = 1
@@ -122,4 +122,4 @@ return {
         ,   SIGUNUSED = 31
         ,   _NSIG   =   65  --[[ Biggest signal number + 1 (including real-time signals).  ]]
     }
-end
\ No newline at end of file
+end
diff --git a/turbo/util.lua b/turbo/util.lua
index 18c00bb..c8dfc14 100644
diff --git a/turbo/util.lua b/turbo/util.lua
--- a/turbo/util.lua
+++ b/turbo/util.lua
@@ -342,6 +342,12 @@ end
 -- @param name Custom library name or path
 function util.load_libtffi(name)
     local have_name = name and true or false
+    if not have_name then
+        local ok, lib = pcall(ffi.loadlib, "tffi_wrap")
+        if ok then
+            return lib
+        end
+    end
     name = name or os.getenv("TURBO_LIBTFFI") or "libtffi_wrap"
     local ok, lib = pcall(ffi.load, name)
     if not ok then

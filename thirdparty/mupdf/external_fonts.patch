diff --git a/Makefile b/Makefile
--- a/Makefile
+++ b/Makefile
@@ -242,6 +242,7 @@
 generated/%.ttf.c : %.ttf $(HEXDUMP_SH) ; $(QUIET_GEN) $(MKTGTDIR) ; bash $(HEXDUMP_SH) > $@ $<
 generated/%.ttc.c : %.ttc $(HEXDUMP_SH) ; $(QUIET_GEN) $(MKTGTDIR) ; bash $(HEXDUMP_SH) > $@ $<
 
+ifneq (,)
 ifeq ($(HAVE_OBJCOPY),yes)
   MUPDF_OBJ += $(FONT_BIN:%=$(OUT)/%.o)
   $(OUT)/%.cff.o : %.cff ; $(OBJCOPY_CMD)
@@ -253,6 +254,7 @@
 endif
 
 generate: $(FONT_GEN)
+endif
 
 # --- Generated ICC profiles ---
 
diff --git a/include/mupdf/fitz/font.h b/include/mupdf/fitz/font.h
--- a/include/mupdf/fitz/font.h
+++ b/include/mupdf/fitz/font.h
@@ -812,4 +812,9 @@ fz_buffer *fz_subset_ttf_for_gids(fz_context *ctx, fz_buffer *orig, int *gids, i
  */
 fz_buffer *fz_subset_cff_for_gids(fz_context *ctx, fz_buffer *orig, int *gids, int num_gids, int symbolic, int cidfont);
 
+char *get_font_file(char *name);
+char *fz_lookup_base14_font_from_file(fz_context *ctx, const char *name);
+char *fz_lookup_cjk_font_from_file(fz_context *ctx, int registry, int serif, int wmode);
+void fz_install_external_font_funcs(fz_context *ctx);
+
 #endif
diff --git a/source/fitz/font.c b/source/fitz/font.c
--- a/source/fitz/font.c
+++ b/source/fitz/font.c
@@ -508,11 +508,8 @@ fz_font *fz_load_system_fallback_font(fz_context *ctx, int script, int language,
 fz_font *fz_load_fallback_font(fz_context *ctx, int script, int language, int serif, int bold, int italic)
 {
 	fz_font **fontp;
-	const unsigned char *data;
 	int ordering = FZ_ADOBE_JAPAN;
 	int index;
-	int subfont;
-	int size;
 
 	if (script < 0 || script >= (int)nelem(ctx->font->fallback))
 		return NULL;
@@ -546,6 +543,10 @@ fz_font *fz_load_fallback_font(fz_context *ctx, int script, int language, int se
 		*fontp = fz_load_system_fallback_font(ctx, script, language, serif, bold, italic);
 		if (!*fontp)
 		{
+#ifndef NOBUILTINFONT
+			const unsigned char *data;
+			int subfont;
+			int size;
 			data = fz_lookup_noto_font(ctx, script, language, &size, &subfont);
 			if (data)
 			{
@@ -553,6 +554,11 @@ fz_font *fz_load_fallback_font(fz_context *ctx, int script, int language, int se
 				/* Noto fonts can be embedded. */
 				fz_set_font_embedding(ctx, *fontp, 1);
 			}
+#else
+			char *filename = get_font_file("freefont/FreeSerif.ttf");
+			*fontp = fz_new_font_from_file(ctx, NULL, filename, 0, 1);
+			free(filename);
+#endif
 		}
 	}
 
diff --git a/source/fitz/noto.c b/source/fitz/noto.c
--- a/source/fitz/noto.c
+++ b/source/fitz/noto.c
@@ -23,8 +23,12 @@
 #include "mupdf/fitz.h"
 #include "mupdf/ucdn.h"
 
+#include <stdio.h>
+#include <stdlib.h>
 #include <string.h>
 
+#ifndef NOBUILTINFONT
+
 /*
 	Base 14 PDF fonts from URW.
 	Noto fonts from Google.
@@ -314,9 +318,9 @@ fz_lookup_cjk_font_by_language(fz_context *ctx, const char *lang, int *size, int
 }
 
 const unsigned char *
-fz_lookup_noto_font(fz_context *ctx, int script, int language, int *size, int *subfont)
+fz_lookup_noto_font(fz_context *ctx, int script, int language, int *len, int *subfont)
 {
-	return search_by_script_lang(size, subfont, script, language);
+	return search_by_script_lang(len, subfont, script, language);
 }
 
 const unsigned char *
@@ -354,3 +358,180 @@ fz_lookup_noto_boxes_font(fz_context *ctx, int *size)
 {
 	return search_by_family(size, "Nimbus Boxes", REGULAR);
 }
+
+#else // NOBUILTINFONT
+
+char *
+get_font_file(char *name)
+{
+	char *fontdir;
+	char *filename;
+	int len;
+	fontdir = getenv("FONTDIR");
+	if(fontdir == NULL) {
+		fontdir = "./fonts";
+	}
+	len = strlen(fontdir) + strlen(name) + 2;
+	filename = malloc(len);
+	if(filename == NULL) {
+		return NULL;
+	}
+	snprintf(filename, len, "%s/%s", fontdir, name);
+	return filename;
+}
+
+const unsigned char *
+fz_lookup_base14_font(fz_context *ctx, const char *name, int *size)
+{
+	*size = 0;
+	return NULL;
+}
+
+char *
+fz_lookup_base14_font_from_file(fz_context *ctx, const char *name)
+{
+	if (!strcmp("Courier", name)) {
+		return get_font_file("urw/NimbusMono-Regular.cff");
+	}
+	if (!strcmp("Courier-Bold", name)) {
+		return get_font_file("urw/NimbusMono-Bold.cff");
+	}
+	if (!strcmp("Courier-Oblique", name)) {
+		return get_font_file("urw/NimbusMono-Oblique.cff");
+	}
+	if (!strcmp("Courier-BoldOblique", name)) {
+		return get_font_file("urw/NimbusMono-BoldOblique.cff");
+	}
+	if (!strcmp("Helvetica", name)) {
+		return get_font_file("urw/NimbusSanL-Reg.cff");
+	}
+	if (!strcmp("Helvetica-Bold", name)) {
+		return get_font_file("urw/NimbusSanL-Bol.cff");
+	}
+	if (!strcmp("Helvetica-Oblique", name)) {
+		return get_font_file("urw/NimbusSanL-RegIta.cff");
+	}
+	if (!strcmp("Helvetica-BoldOblique", name)) {
+		return get_font_file("urw/NimbusSanL-BolIta.cff");
+	}
+	if (!strcmp("NotoSans", name)) {
+		return get_font_file("noto/NotoSans-Regular.ttf");
+	}
+	if (!strcmp("NotoSans-Bold", name)) {
+		return get_font_file("noto/NotoSans-Bold.ttf");
+	}
+	if (!strcmp("NotoSans-BoldItalic", name)) {
+		return get_font_file("noto/NotoSans-BoldItalic.ttf");
+	}
+	if (!strcmp("NotoSans-Italic", name)) {
+		return get_font_file("noto/NotoSans-Italic.ttf");
+	}
+	if (!strcmp("Times-Roman", name)) {
+		return get_font_file("urw/NimbusRomNo9L-Reg.cff");
+	}
+	if (!strcmp("Times-Bold", name)) {
+		return get_font_file("urw/NimbusRomNo9L-Med.cff");
+	}
+	if (!strcmp("Times-Italic", name)) {
+		return get_font_file("urw/NimbusRomNo9L-RegIta.cff");
+	}
+	if (!strcmp("Times-BoldItalic", name)) {
+		return get_font_file("urw/NimbusRomNo9L-MedIta.cff");
+	}
+	if (!strcmp("Symbol", name)) {
+		return get_font_file("urw/StandardSymL.cff");
+	}
+	if (!strcmp("ZapfDingbats", name)) {
+		return get_font_file("urw/Dingbats.cff");
+	}
+	return NULL;
+}
+
+const unsigned char *
+fz_lookup_builtin_font(fz_context *ctx, const char *name, int is_bold, int is_italic, int *size)
+{
+	*size = 0;
+	return NULL;
+}
+
+const unsigned char *
+fz_lookup_cjk_font(fz_context *ctx, int ordering, int *len, int *index)
+{
+	*len = 0;
+	return NULL;
+}
+
+char *
+fz_lookup_cjk_font_from_file(fz_context *ctx, int registry, int serif, int wmode)
+{
+	return get_font_file("noto/NotoSansCJKsc-Regular.otf");
+}
+
+const unsigned char *
+fz_lookup_noto_font(fz_context *ctx, int script, int lang, int *len, int *subfont)
+{
+	*len = 0;
+	return NULL;
+}
+
+const unsigned char *
+fz_lookup_noto_math_font(fz_context *ctx, int *size)
+{
+	*size = 0;
+	return NULL;
+}
+
+const unsigned char *
+fz_lookup_noto_music_font(fz_context *ctx, int *size)
+{
+	*size = 0;
+	return NULL;
+}
+
+const unsigned char *
+fz_lookup_noto_symbol1_font(fz_context *ctx, int *size)
+{
+	*size = 0;
+	return NULL;
+}
+
+const unsigned char *
+fz_lookup_noto_symbol2_font(fz_context *ctx, int *size)
+{
+	*size = 0;
+	return NULL;
+}
+
+const unsigned char *
+fz_lookup_noto_emoji_font(fz_context *ctx, int *size)
+{
+	*size = 0;
+	return NULL;
+}
+
+const unsigned char *
+fz_lookup_noto_boxes_font(fz_context *ctx, int *size)
+{
+	*size = 0;
+	return NULL;
+}
+
+fz_font *
+fz_load_system_fallback_font_from_file(fz_context *ctx, int script, int language, int serif, int bold, int italic)
+{
+	char *filename;
+	fz_font *font;
+
+	filename = get_font_file("noto/NotoSansCJKsc-Regular.otf");
+	font = fz_new_font_from_file(ctx, NULL, filename, 0, 1);
+	free(filename);
+	return font;
+}
+
+void
+fz_install_external_font_funcs(fz_context *ctx)
+{
+	fz_install_load_system_font_funcs(ctx, NULL, NULL, &fz_load_system_fallback_font_from_file);
+}
+
+#endif
diff --git a/source/html/html-font.c b/source/html/html-font.c
--- a/source/html/html-font.c
+++ b/source/html/html-font.c
@@ -23,18 +23,63 @@
 #include "mupdf/fitz.h"
 #include "html-imp.h"
 
+#include <stdlib.h>
 #include <string.h>
 
+char *
+html_lookup_substitute_font_from_file(fz_context *ctx, const char *fontname, int mono, int serif, int bold, int italic)
+{
+	if (strcmp(fontname, "Noto Sans") == 0) {
+		if (bold) {
+			if (italic) return fz_lookup_base14_font_from_file(ctx, "NotoSans-BoldItalic");
+			else return fz_lookup_base14_font_from_file(ctx, "NotoSans-Bold");
+		} else {
+			if (italic) return fz_lookup_base14_font_from_file(ctx, "NotoSans-Italic");
+			else return fz_lookup_base14_font_from_file(ctx, "NotoSans");
+		}
+	}
+
+	if (mono) {
+		if (bold) {
+			if (italic) return fz_lookup_base14_font_from_file(ctx, "Courier-BoldOblique");
+			else return fz_lookup_base14_font_from_file(ctx, "Courier-Bold");
+		} else {
+			if (italic) return fz_lookup_base14_font_from_file(ctx, "Courier-Oblique");
+			else return fz_lookup_base14_font_from_file(ctx, "Courier");
+		}
+	} else if (serif) {
+		if (bold) {
+			if (italic) return fz_lookup_base14_font_from_file(ctx, "Times-BoldItalic");
+			else return fz_lookup_base14_font_from_file(ctx, "Times-Bold");
+		} else {
+			if (italic) return fz_lookup_base14_font_from_file(ctx, "Times-Italic");
+			else return fz_lookup_base14_font_from_file(ctx, "Times-Roman");
+		}
+	} else {
+		if (bold) {
+			if (italic) return fz_lookup_base14_font_from_file(ctx, "Helvetica-BoldOblique");
+			else return fz_lookup_base14_font_from_file(ctx, "Helvetica-Bold");
+		} else {
+			if (italic) return fz_lookup_base14_font_from_file(ctx, "Helvetica-Oblique");
+			else return fz_lookup_base14_font_from_file(ctx, "Helvetica");
+		}
+	}
+}
+
+
 static fz_font *
 fz_load_html_default_font(fz_context *ctx, fz_html_font_set *set, const char *family, int is_bold, int is_italic)
 {
 	int is_mono = !strcmp(family, "monospace");
 	int is_sans = !strcmp(family, "sans-serif");
+#ifndef NOBUILTINFONT
 	const char *real_family = is_mono ? "Courier" : is_sans ? "Helvetica" : "Charis SIL";
 	const char *backup_family = is_mono ? "Courier" : is_sans ? "Helvetica" : "Times";
+#endif
 	int idx = (is_mono ? 8 : is_sans ? 4 : 0) + is_bold * 2 + is_italic;
 	if (!set->fonts[idx])
 	{
+#ifndef NOBUILTINFONT
 		const unsigned char *data;
 		int size;
 
@@ -45,6 +90,18 @@ fz_load_html_default_font(fz_context *ctx, fz_html_font_set *set, const char *fa
 			fz_throw(ctx, FZ_ERROR_UNSUPPORTED, "cannot load html font: %s", real_family);
 		set->fonts[idx] = fz_new_font_from_memory(ctx, NULL, data, size, 0, 1);
 		fz_font_flags(set->fonts[idx])->is_serif = !is_sans;
+#else
+		char *filename = html_lookup_substitute_font_from_file(ctx, family, is_mono, !is_sans, is_bold, is_italic);
+		if (!filename)
+			fz_throw(ctx, FZ_ERROR_GENERIC, "cannot load html font");
+
+		set->fonts[idx] = fz_new_font_from_file(ctx, NULL, filename, 0, 1);
+		fz_font_flags(set->fonts[idx])->is_mono = is_mono;
+		fz_font_flags(set->fonts[idx])->is_bold = is_bold;
+		fz_font_flags(set->fonts[idx])->is_italic = is_italic;
+		fz_font_flags(set->fonts[idx])->is_serif = !is_sans;
+		free(filename);
+#endif
 	}
 	return set->fonts[idx];
 }
@@ -128,7 +185,7 @@ fz_load_html_font(fz_context *ctx, fz_html_font_set *set,
 		return best_font;
 
 	// Handle the "default" font aliases.
-	if (!strcmp(family, "monospace") || !strcmp(family, "sans-serif") || !strcmp(family, "serif"))
+	if (!strcmp(family, "monospace") || !strcmp(family, "sans-serif") || !strcmp(family, "serif") || !strcmp(family, "Noto Sans"))
 		return fz_load_html_default_font(ctx, set, family, is_bold, is_italic);
 
 	return NULL;
diff --git a/source/pdf/pdf-font.c b/source/pdf/pdf-font.c
--- a/source/pdf/pdf-font.c
+++ b/source/pdf/pdf-font.c
@@ -93,6 +93,8 @@ static const char *base_font_names[][10] =
 	{ "ZapfDingbats", NULL }
 };
 
+#ifndef NOBUILTINFONT
+
 const unsigned char *
 pdf_lookup_substitute_font(fz_context *ctx, int mono, int serif, int bold, int italic, int *len)
 {
@@ -123,6 +125,47 @@ pdf_lookup_substitute_font(fz_context *ctx, int mono, int serif, int bold, int i
 	}
 }
 
+#else
+
+const unsigned char *
+pdf_lookup_substitute_font(fz_context *ctx, int mono, int serif, int bold, int italic, int* len)
+{
+	*len = 0;
+	return NULL;
+}
+
+char *
+pdf_lookup_substitute_font_from_file(fz_context *ctx, int mono, int serif, int bold, int italic)
+{
+	if (mono) {
+		if (bold) {
+			if (italic) return fz_lookup_base14_font_from_file(ctx, "Courier-BoldOblique");
+			else return fz_lookup_base14_font_from_file(ctx, "Courier-Bold");
+		} else {
+			if (italic) return fz_lookup_base14_font_from_file(ctx, "Courier-Oblique");
+			else return fz_lookup_base14_font_from_file(ctx, "Courier");
+		}
+	} else if (serif) {
+		if (bold) {
+			if (italic) return fz_lookup_base14_font_from_file(ctx, "Times-BoldItalic");
+			else return fz_lookup_base14_font_from_file(ctx, "Times-Bold");
+		} else {
+			if (italic) return fz_lookup_base14_font_from_file(ctx, "Times-Italic");
+			else return fz_lookup_base14_font_from_file(ctx, "Times-Roman");
+		}
+	} else {
+		if (bold) {
+			if (italic) return fz_lookup_base14_font_from_file(ctx, "Helvetica-BoldOblique");
+			else return fz_lookup_base14_font_from_file(ctx, "Helvetica-Bold");
+		} else {
+			if (italic) return fz_lookup_base14_font_from_file(ctx, "Helvetica-Oblique");
+			else return fz_lookup_base14_font_from_file(ctx, "Helvetica");
+		}
+	}
+}
+
+#endif
+
 static int is_dynalab(char *name)
 {
 	if (strstr(name, "HuaTian"))
@@ -367,6 +410,7 @@ pdf_load_builtin_font(fz_context *ctx, pdf_font_desc *fontdesc, const char *font
 	fontdesc->font = fz_load_system_font(ctx, fontname, 0, 0, !has_descriptor);
 	if (!fontdesc->font)
 	{
+#ifndef NOBUILTINFONT
 		const unsigned char *data;
 		int len;
 
@@ -375,6 +419,15 @@ pdf_load_builtin_font(fz_context *ctx, pdf_font_desc *fontdesc, const char *font
 			fz_throw(ctx, FZ_ERROR_SYNTAX, "cannot find builtin font: '%s'", fontname);
 
 		fontdesc->font = fz_new_font_from_memory(ctx, fontname, data, len, 0, 1);
+#else
+		char *filename = fz_lookup_base14_font_from_file(ctx, clean_name);
+		if (!filename)
+			fz_throw(ctx, FZ_ERROR_GENERIC, "cannot find builtin font: '%s'", fontname);
+
+		fontdesc->font = fz_new_font_from_file(ctx, fontname, filename, 0, 1);
+		free(filename);
+#endif
+
 		fontdesc->font->flags.is_serif = !!strstr(clean_name, "Times");
 	}
 
@@ -392,6 +445,7 @@ pdf_load_substitute_font(fz_context *ctx, pdf_font_desc *fontdesc, const char *f
 	fontdesc->font = fz_load_system_font(ctx, fontname, bold, italic, 0);
 	if (!fontdesc->font)
 	{
+#ifndef NOBUILTINFONT
 		const unsigned char *data;
 		int len;
 
@@ -400,6 +454,17 @@ pdf_load_substitute_font(fz_context *ctx, pdf_font_desc *fontdesc, const char *f
 			fz_throw(ctx, FZ_ERROR_SYNTAX, "cannot find substitute font");
 
 		fontdesc->font = fz_new_font_from_memory(ctx, fontname, data, len, 0, 1);
+#else
+		char *filename = pdf_lookup_substitute_font_from_file(ctx, mono, serif, bold, italic);
+		if (!filename)
+			fz_throw(ctx, FZ_ERROR_GENERIC, "cannot find substitute font");
+
+		fontdesc->font = fz_new_font_from_file(ctx, fontname, filename, 0, 1);
+		fontdesc->font->flags.is_bold = bold;
+		fontdesc->font->flags.is_italic = italic;
+		free(filename);
+#endif
+
 		fontdesc->font->flags.fake_bold = bold && !fontdesc->font->flags.is_bold;
 		fontdesc->font->flags.fake_italic = italic && !fontdesc->font->flags.is_italic;
 
@@ -419,6 +484,7 @@ pdf_load_substitute_cjk_font(fz_context *ctx, pdf_font_desc *fontdesc, const cha
 	fontdesc->font = fz_load_system_cjk_font(ctx, fontname, ros, serif);
 	if (!fontdesc->font)
 	{
+#ifndef NOBUILTINFONT
 		const unsigned char *data;
 		int size;
 		int subfont;
@@ -429,6 +495,14 @@ pdf_load_substitute_cjk_font(fz_context *ctx, pdf_font_desc *fontdesc, const cha
 
 		/* A glyph bbox cache is too big for CJK fonts. */
 		fontdesc->font = fz_new_font_from_memory(ctx, fontname, data, size, subfont, 0);
+#else
+		char *filename = fz_lookup_cjk_font_from_file(ctx, ros, serif, fontdesc->wmode);
+		if (!filename)
+			fz_throw(ctx, FZ_ERROR_GENERIC, "cannot find builtin CJK font");
+
+		fontdesc->font = fz_new_font_from_file(ctx, fontname, filename, 0, 1);
+		free(filename);
+#endif
 	}
 
 	fontdesc->font->flags.ft_substitute = 1;

diff --git a/include/mupdf/fitz/display-list.h b/include/mupdf/fitz/display-list.h
index b6a23e436..42ef159f2 100644
--- a/include/mupdf/fitz/display-list.h
+++ b/include/mupdf/fitz/display-list.h
@@ -44,7 +44,7 @@ fz_display_list *fz_new_display_list(fz_context *ctx, const fz_rect *mediabox);
 	for each rendering. Once the device is no longer needed, free
 	it with fz_drop_device.
 
-	list: A display list that the list device takes ownership of.
+	list: A display list that the list device takes a reference to.
 */
 fz_device *fz_new_list_device(fz_context *ctx, fz_display_list *list);
 
diff --git a/include/mupdf/fitz/filter.h b/include/mupdf/fitz/filter.h
index 782c4d80d..4986e910d 100644
--- a/include/mupdf/fitz/filter.h
+++ b/include/mupdf/fitz/filter.h
@@ -18,6 +18,7 @@ typedef struct
 fz_stream *fz_open_copy(fz_context *ctx, fz_stream *chain);
 fz_stream *fz_open_null_n(fz_context *ctx, fz_stream *chain, fz_range *ranges, int nranges);
 fz_stream *fz_open_null(fz_context *ctx, fz_stream *chain, int len, int64_t offset);
+fz_stream *fz_open_pdf_stream(fz_context *ctx, fz_stream *chain, int len, int64_t offset);
 fz_stream *fz_open_concat(fz_context *ctx, int max, int pad);
 void fz_concat_push_drop(fz_context *ctx, fz_stream *concat, fz_stream *chain); /* Ownership of chain is passed in */
 fz_stream *fz_open_arc4(fz_context *ctx, fz_stream *chain, unsigned char *key, unsigned keylen);
diff --git a/include/mupdf/fitz/system.h b/include/mupdf/fitz/system.h
index c480bd7c0..cabbcc217 100644
--- a/include/mupdf/fitz/system.h
+++ b/include/mupdf/fitz/system.h
@@ -57,11 +57,13 @@ typedef unsigned __int64 uint64_t;
 	Some differences in libc can be smoothed over
 */
 
-#ifdef __APPLE__
+#ifndef __STRICT_ANSI__
+#if defined(__APPLE__)
 #define HAVE_SIGSETJMP
-#elif defined(__unix) && !defined(__NACL__)
+#elif defined(__unix)
 #define HAVE_SIGSETJMP
 #endif
+#endif
 
 /*
 	Where possible (i.e. on platforms on which they are provided), use
@@ -147,10 +149,10 @@ void fz_free_argv(int argc, char **argv);
 /* inline is standard in C++. For some compilers we can enable it within C too. */
 
 #ifndef __cplusplus
-#if __STDC_VERSION__ == 199901L /* C99 */
-#elif _MSC_VER >= 1500 /* MSVC 9 or newer */
+#if defined (__STDC_VERSION_) && (__STDC_VERSION__ >= 199901L) /* C99 */
+#elif defined(_MSC_VER) && (_MSC_VER >= 1500) /* MSVC 9 or newer */
 #define inline __inline
-#elif __GNUC__ >= 3 /* GCC 3 or newer */
+#elif defined(__GNUC__) && (__GNUC__ >= 3) /* GCC 3 or newer */
 #define inline __inline
 #else /* Unknown or ancient */
 #define inline
@@ -158,10 +160,10 @@ void fz_free_argv(int argc, char **argv);
 #endif
 
 /* restrict is standard in C99, but not in all C++ compilers. */
-#if __STDC_VERSION__ == 199901L /* C99 */
-#elif _MSC_VER >= 1600 /* MSVC 10 or newer */
+#if defined (__STDC_VERSION_) && (__STDC_VERSION__ >= 199901L) /* C99 */
+#elif defined(_MSC_VER) && (_MSC_VER >= 1600) /* MSVC 10 or newer */
 #define restrict __restrict
-#elif __GNUC__ >= 3 /* GCC 3 or newer */
+#elif defined(__GNUC__) && (__GNUC__ >= 3) /* GCC 3 or newer */
 #define restrict __restrict
 #else /* Unknown or ancient */
 #define restrict
@@ -179,7 +181,7 @@ void fz_free_argv(int argc, char **argv);
 #endif
 
 /* Flag unused parameters, for use with 'static inline' functions in headers. */
-#if __GNUC__ > 2 || __GNUC__ == 2 && __GNUC_MINOR__ >= 7
+#if defined(__GNUC__) && (__GNUC__ > 2 || __GNUC__ == 2 && __GNUC_MINOR__ >= 7)
 #define FZ_UNUSED __attribute__((__unused__))
 #else
 #define FZ_UNUSED
@@ -189,7 +191,7 @@ void fz_free_argv(int argc, char **argv);
 #ifdef __printflike
 #define FZ_PRINTFLIKE(F,V) __printflike(F,V)
 #else
-#if __GNUC__ > 2 || __GNUC__ == 2 && __GNUC_MINOR__ >= 7
+#if defined(__GNUC__) && (__GNUC__ > 2 || __GNUC__ == 2 && __GNUC_MINOR__ >= 7)
 #define FZ_PRINTFLIKE(F,V) __attribute__((__format__ (__printf__, F, V)))
 #else
 #define FZ_PRINTFLIKE(F,V)
diff --git a/source/fitz/draw-affine.c b/source/fitz/draw-affine.c
index c64411b4c..9c7e8aa72 100644
--- a/source/fitz/draw-affine.c
+++ b/source/fitz/draw-affine.c
@@ -164,7 +164,7 @@ template_affine_alpha_g2rgb_lerp(byte * restrict dp, int da, const byte * restri
 					gp[0] = ya + fz_mul255(gp[0], t);
 			}
 		}
-		dp += 4;
+		dp += 3+da;
 		if (hp)
 			hp++;
 		if (gp)
diff --git a/source/fitz/draw-blend.c b/source/fitz/draw-blend.c
index e468690a0..c2ca4f1fe 100644
--- a/source/fitz/draw-blend.c
+++ b/source/fitz/draw-blend.c
@@ -446,10 +446,10 @@ fz_blend_nonseparable_gray(byte * restrict bp, int bal, const byte * restrict sp
 				case FZ_BLEND_HUE:
 				case FZ_BLEND_SATURATION:
 				case FZ_BLEND_COLOR:
-					bp[0] = fz_mul255(bp[n], bg);
+					bp[0] = bal ? fz_mul255(bp[n], bg) : bg;
 					break;
 				case FZ_BLEND_LUMINOSITY:
-					bp[0] = fz_mul255(bp[n], sg);
+					bp[0] = bal ? fz_mul255(bp[n], sg) : sg;
 					break;
 				}
 
@@ -551,10 +551,10 @@ fz_blend_nonseparable(byte * restrict bp, int bal, const byte * restrict sp, int
 					case FZ_BLEND_HUE:
 					case FZ_BLEND_SATURATION:
 					case FZ_BLEND_COLOR:
-						bp[3] = fz_mul255(bp[n], bk);
+						bp[3] = bal ? fz_mul255(bp[n], bk) : bk;
 						break;
 					case FZ_BLEND_LUMINOSITY:
-						bp[3] = fz_mul255(bp[n], sk);
+						bp[3] = bal ? fz_mul255(bp[n], sk) : sk;
 						break;
 					}
 				}
diff --git a/source/fitz/filter-basic.c b/source/fitz/filter-basic.c
index f558f43b1..86ff5dcc8 100644
--- a/source/fitz/filter-basic.c
+++ b/source/fitz/filter-basic.c
@@ -16,9 +16,12 @@ struct null_filter
 {
 	fz_stream *chain;
 	fz_range *ranges;
+	int look_for_endstream;
 	int nranges;
 	int next_range;
 	size_t remain;
+	unsigned int extras;
+	unsigned int size;
 	int64_t offset;
 	unsigned char buffer[4096];
 };
@@ -27,7 +30,9 @@ static int
 next_null(fz_context *ctx, fz_stream *stm, size_t max)
 {
 	struct null_filter *state = stm->state;
-	size_t n;
+	size_t n, i, nbytes_in_buffer;
+	const char *rp;
+	unsigned int size;
 
 	while (state->remain == 0 && state->next_range < state->nranges)
 	{
@@ -37,7 +42,7 @@ next_null(fz_context *ctx, fz_stream *stm, size_t max)
 	}
 
 	if (state->remain == 0)
-		return EOF;
+		goto maybe_ended;
 	fz_seek(ctx, state->chain, state->offset, 0);
 	n = fz_available(ctx, state->chain, max);
 	if (n > state->remain)
@@ -48,12 +53,88 @@ next_null(fz_context *ctx, fz_stream *stm, size_t max)
 	stm->rp = state->buffer;
 	stm->wp = stm->rp + n;
 	if (n == 0)
-		return EOF;
+		goto maybe_ended;
 	state->chain->rp += n;
 	state->remain -= n;
 	state->offset += (int64_t)n;
 	stm->pos += (int64_t)n;
 	return *stm->rp++;
+
+maybe_ended:
+	if (state->look_for_endstream == 0)
+		return EOF;
+
+	/* We should distrust the stream length, and check for end
+	 * marker before terminating the stream - this is to cope
+	 * with files with duff "Length" values. */
+	fz_seek(ctx, state->chain, state->offset, 0);
+
+	/* Move any data left over in our buffer down to the start.
+	 * Ordinarily, there won't be any, but this allows for the
+	 * case where we were part way through matching a stream end
+	 * marker when the buffer filled before. */
+	nbytes_in_buffer = state->extras;
+	if (nbytes_in_buffer)
+		memmove(state->buffer, stm->rp, nbytes_in_buffer);
+	stm->rp = state->buffer;
+	stm->wp = stm->rp + nbytes_in_buffer;
+
+	/* In most sane files, we'll get "\nendstream" instantly. We
+	 * should only need (say) 32 bytes to be sure. For crap files
+	 * where we overread regularly, don't harm performance by
+	 * working in small chunks. */
+	state->size *= 2;
+	if (state->size > sizeof(state->buffer))
+		state->size = sizeof(state->buffer);
+#define END_CHECK_SIZE 32
+	size = state->size;
+	while (nbytes_in_buffer < size)
+	{
+		n = fz_available(ctx, state->chain, size - nbytes_in_buffer);
+		if (n == 0)
+			break;
+		if (n > size - nbytes_in_buffer)
+			n = size - nbytes_in_buffer;
+		memcpy(stm->wp, state->chain->rp, n);
+		stm->wp += n;
+		state->chain->rp += n;
+		nbytes_in_buffer += n;
+	}
+
+	*stm->wp = 0; /* Be friendly to strcmp */
+	rp = (char *)state->buffer;
+	n = 0;
+	/* If we don't have at least 11 bytes in the buffer, then we don't have
+	 * enough bytes for the worst case terminator. Also, we're dangerously
+	 * close to the end of the file. Don't risk overrunning the buffer. */
+	if (nbytes_in_buffer >= 11)
+		for (i = 0; i < nbytes_in_buffer - 11; )
+		{
+			n = i;
+			if (rp[i] == '\r')
+				i++;
+			if (rp[i] == '\n')
+				i++;
+			if (rp[i++] != 'e')
+				continue;
+			if (rp[i++] != 'n')
+				continue;
+			if (rp[i++] != 'd')
+				continue;
+			if (memcmp(&rp[i], "stream", 6) == 0 || (memcmp(&rp[i], "obj", 3) == 0))
+				break;
+			i++;
+		}
+
+	/* We have at least n bytes before we hit an end marker */
+	state->offset += (int64_t)nbytes_in_buffer - state->extras;
+	state->extras = nbytes_in_buffer - n;
+	stm->wp = stm->rp + n;
+	stm->pos += n;
+
+	if (n == 0)
+		return EOF;
+	return *stm->rp++;
 }
 
 static void
@@ -65,8 +146,8 @@ close_null(fz_context *ctx, void *state_)
 	fz_free(ctx, state);
 }
 
-fz_stream *
-fz_open_null_n(fz_context *ctx, fz_stream *chain, fz_range *ranges, int nranges)
+static fz_stream *
+fz_open_null_n_terminator(fz_context *ctx, fz_stream *chain, fz_range *ranges, int nranges, int terminator)
 {
 	struct null_filter *state = NULL;
 
@@ -77,10 +158,13 @@ fz_open_null_n(fz_context *ctx, fz_stream *chain, fz_range *ranges, int nranges)
 		{
 			state->ranges = fz_calloc(ctx, nranges, sizeof(*ranges));
 			memcpy(state->ranges, ranges, nranges * sizeof(*ranges));
+			state->look_for_endstream = terminator;
 			state->nranges = nranges;
 			state->next_range = 1;
 			state->remain = ranges[0].len;
 			state->offset = ranges[0].offset;
+			state->extras = 0;
+			state->size = END_CHECK_SIZE>>1;
 		}
 		else
 		{
@@ -102,6 +186,12 @@ fz_open_null_n(fz_context *ctx, fz_stream *chain, fz_range *ranges, int nranges)
 	return fz_new_stream(ctx, state, next_null, close_null);
 }
 
+fz_stream *
+fz_open_null_n(fz_context *ctx, fz_stream *chain, fz_range *ranges, int nranges)
+{
+	return fz_open_null_n_terminator(ctx, chain, ranges, nranges, 0);
+}
+
 fz_stream *
 fz_open_null(fz_context *ctx, fz_stream *chain, int len, int64_t offset)
 {
@@ -112,9 +202,21 @@ fz_open_null(fz_context *ctx, fz_stream *chain, int len, int64_t offset)
 
 	range.offset = offset;
 	range.len = len;
-	return fz_open_null_n(ctx, chain, &range, 1);
+	return fz_open_null_n_terminator(ctx, chain, &range, 1, 0);
 }
 
+fz_stream *
+fz_open_pdf_stream(fz_context *ctx, fz_stream *chain, int len, int64_t offset)
+{
+	fz_range range;
+
+	if (len < 0)
+		len = 0;
+
+	range.offset = offset;
+	range.len = len;
+	return fz_open_null_n_terminator(ctx, chain, &range, 1, 1);
+}
 
 /* Concat filter concatenates several streams into one */
 
diff --git a/source/fitz/filter-jbig2.c b/source/fitz/filter-jbig2.c
index 0d581b95c..98320ff5b 100644
--- a/source/fitz/filter-jbig2.c
+++ b/source/fitz/filter-jbig2.c
@@ -394,6 +394,7 @@ void
 fz_drop_jbig2_globals_imp(fz_context *ctx, fz_storable *globals_)
 {
 	fz_jbig2_globals *globals = (fz_jbig2_globals *)globals_;
+	globals->alloc.ctx = ctx;
 	jbig2_global_ctx_free(globals->gctx);
 	fz_free(ctx, globals);
 }
diff --git a/source/fitz/filter-sgi.c b/source/fitz/filter-sgi.c
index 43bade717..fdd7a1e11 100644
--- a/source/fitz/filter-sgi.c
+++ b/source/fitz/filter-sgi.c
@@ -313,22 +313,19 @@ fz_open_sgilog16(fz_context *ctx, fz_stream *chain, int w)
 {
 	fz_sgilog16 *state = NULL;
 
-	fz_var(state);
-
+	state = fz_malloc_struct(ctx, fz_sgilog16);
 	fz_try(ctx)
 	{
-		state = fz_malloc_struct(ctx, fz_sgilog16);
-		state->chain = chain;
 		state->run = 0;
 		state->n = 0;
 		state->c = 0;
 		state->w = w;
 		state->temp = fz_malloc(ctx, w * sizeof(uint16_t));
+		state->chain = fz_keep_stream(ctx, chain);
 	}
 	fz_catch(ctx)
 	{
 		fz_free(ctx, state);
-		fz_drop_stream(ctx, chain);
 		fz_rethrow(ctx);
 	}
 
diff --git a/source/fitz/image.c b/source/fitz/image.c
index 516997727..bd08c8757 100644
--- a/source/fitz/image.c
+++ b/source/fitz/image.c
@@ -430,7 +430,6 @@ fz_decomp_image_from_stream(fz_context *ctx, fz_stream *stm, fz_compressed_image
 	fz_catch(ctx)
 	{
 		fz_drop_pixmap(ctx, tile);
-		fz_free(ctx, samples);
 		fz_rethrow(ctx);
 	}
 
diff --git a/source/fitz/list-device.c b/source/fitz/list-device.c
index ca3425abb..a385f51fa 100644
--- a/source/fitz/list-device.c
+++ b/source/fitz/list-device.c
@@ -1309,6 +1309,7 @@ fz_list_drop_device(fz_context *ctx, fz_device *dev)
 	fz_drop_colorspace(ctx, writer->colorspace);
 	fz_drop_stroke_state(ctx, writer->stroke);
 	fz_drop_path(ctx, writer->path);
+	fz_drop_display_list(ctx, writer->list);
 }
 
 fz_device *
@@ -1352,7 +1353,7 @@ fz_new_list_device(fz_context *ctx, fz_display_list *list)
 
 	dev->super.drop_device = fz_list_drop_device;
 
-	dev->list = list;
+	dev->list = fz_keep_display_list(ctx, list);
 	dev->path = NULL;
 	dev->alpha = 1.0f;
 	dev->ctm = fz_identity;
diff --git a/source/fitz/load-jpeg.c b/source/fitz/load-jpeg.c
index 87b324310..3839197f5 100644
--- a/source/fitz/load-jpeg.c
+++ b/source/fitz/load-jpeg.c
@@ -260,12 +260,14 @@ fz_load_jpeg(fz_context *ctx, const unsigned char *rbuf, size_t rlen)
 	struct jpeg_error_mgr err;
 	struct jpeg_source_mgr src;
 	unsigned char *row[1], *sp, *dp;
-	fz_colorspace *colorspace, *icc;
+	fz_colorspace *colorspace = NULL;
+	fz_colorspace *icc = NULL;
 	unsigned int x;
 	int k, stride;
 	fz_pixmap *image = NULL;
 
 	fz_var(colorspace);
+	fz_var(icc);
 	fz_var(image);
 	fz_var(row);
 
diff --git a/source/fitz/load-tiff.c b/source/fitz/load-tiff.c
index 3dad8a82d..bfa66c045 100644
--- a/source/fitz/load-tiff.c
+++ b/source/fitz/load-tiff.c
@@ -875,6 +875,9 @@ tiff_read_tag(fz_context *ctx, struct tiff *tiff, unsigned offset)
 		break;
 
 	case JPEGTables:
+		/* Check both value and value + count to allow for overflow */
+		if (value > tiff->ep - tiff->bp || value + count > tiff->ep - tiff->bp)
+			fz_throw(ctx, FZ_ERROR_GENERIC, "TIFF JPEG tables out of range");
 		tiff->jpegtables = tiff->bp + value;
 		tiff->jpegtableslen = count;
 		break;
diff --git a/source/fitz/memento.c b/source/fitz/memento.c
index a87b720dc..7b8e9bcfe 100644
--- a/source/fitz/memento.c
+++ b/source/fitz/memento.c
@@ -1630,7 +1630,9 @@ static int squeeze(void)
     for (i = 0; i < OPEN_MAX; i++) {
         if (stashed_map[i] == 0) {
             int j = dup(i);
-            stashed_map[j] = i+1;
+            if (j >= 0) {
+                stashed_map[j] = i+1;
+            }
         }
     }
 
@@ -1638,6 +1640,13 @@ static int squeeze(void)
     if (pid == 0) {
         /* Child */
         signal(SIGSEGV, Memento_signal);
+        /* Close the dup-licated fds to avoid them getting corrupted by faulty
+        code. */
+        for (i = 0; i < OPEN_MAX; i++) {
+            if (stashed_map[i] != 0) {
+                close(stashed_map[i]-1);
+            }
+        }
         /* In the child, we always fail the next allocation. */
         if (memento.patternBit == 0) {
             memento.patternBit = 1;
diff --git a/source/fitz/memory.c b/source/fitz/memory.c
index ad5b69aa0..0c4279229 100644
--- a/source/fitz/memory.c
+++ b/source/fitz/memory.c
@@ -198,9 +198,12 @@ fz_resize_array_no_throw(fz_context *ctx, void *p, size_t count, size_t size)
 void
 fz_free(fz_context *ctx, void *p)
 {
-	fz_lock(ctx, FZ_LOCK_ALLOC);
-	ctx->alloc->free(ctx->alloc->user, p);
-	fz_unlock(ctx, FZ_LOCK_ALLOC);
+	if (p)
+	{
+		fz_lock(ctx, FZ_LOCK_ALLOC);
+		ctx->alloc->free(ctx->alloc->user, p);
+		fz_unlock(ctx, FZ_LOCK_ALLOC);
+	}
 }
 
 char *
diff --git a/source/fitz/output.c b/source/fitz/output.c
index 4ee0023c6..3d3c6613d 100644
--- a/source/fitz/output.c
+++ b/source/fitz/output.c
@@ -491,7 +491,7 @@ fz_write_base64(fz_context *ctx, fz_output *out, const unsigned char *data, int
 {
 	static const char set[64] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
 	int i;
-	for (i = 0; i + 3 < size; i += 3)
+	for (i = 0; i + 3 <= size; i += 3)
 	{
 		int c = data[i];
 		int d = data[i+1];
diff --git a/source/fitz/pixmap.c b/source/fitz/pixmap.c
index a0abb5def..853e01df5 100644
--- a/source/fitz/pixmap.c
+++ b/source/fitz/pixmap.c
@@ -82,7 +82,7 @@ fz_new_pixmap_with_data(fz_context *ctx, fz_colorspace *colorspace, int w, int h
 		}
 		fz_catch(ctx)
 		{
-			fz_drop_colorspace(ctx, colorspace);
+			fz_drop_colorspace(ctx, pix->colorspace);
 			fz_free(ctx, pix);
 			fz_rethrow(ctx);
 		}
diff --git a/source/fitz/store.c b/source/fitz/store.c
index 33d9a8a85..ce1ef07fe 100644
--- a/source/fitz/store.c
+++ b/source/fitz/store.c
@@ -4,6 +4,7 @@
 #include <assert.h>
 #include <limits.h>
 #include <stdio.h>
+#include <string.h>
 
 typedef struct fz_item_s fz_item;
 
@@ -38,6 +39,7 @@ struct fz_store_s
 
 	int defer_reap_count;
 	int needs_reaping;
+	int scavenging;
 };
 
 void
@@ -74,24 +76,6 @@ fz_keep_storable(fz_context *ctx, const fz_storable *sc)
 	return fz_keep_imp(ctx, s, &s->refs);
 }
 
-void
-fz_drop_storable(fz_context *ctx, const fz_storable *sc)
-{
-	/* Explicitly drop const to allow us to use const
-	 * sanely throughout the code. */
-	fz_storable *s = (fz_storable *)sc;
-
-	/*
-		If we are dropping the last reference to an object, then
-		it cannot possibly be in the store (as the store always
-		keeps a ref to everything in it, and doesn't drop via
-		this method. So we can simply drop the storable object
-		itself without any operations on the fz_store.
-	 */
-	if (fz_drop_imp(ctx, s, &s->refs))
-		s->drop(ctx, s);
-}
-
 void *fz_keep_key_storable(fz_context *ctx, const fz_key_storable *sc)
 {
 	return fz_keep_storable(ctx, &sc->storable);
@@ -186,6 +170,7 @@ void fz_drop_key_storable(fz_context *ctx, const fz_key_storable *sc)
 		return;
 
 	fz_lock(ctx, FZ_LOCK_ALLOC);
+	assert(s->storable.refs != 0);
 	if (s->storable.refs > 0)
 	{
 		(void)Memento_dropRef(s);
@@ -439,19 +424,14 @@ fz_store_item(fz_context *ctx, void *key, void *val_, size_t itemsize, const fz_
 	if (!store)
 		return NULL;
 
-	fz_var(item);
-
 	/* If we fail for any reason, we swallow the exception and continue.
 	 * All that the above program will see is that we failed to store
 	 * the item. */
-	fz_try(ctx)
-	{
-		item = fz_malloc_struct(ctx, fz_item);
-	}
-	fz_catch(ctx)
-	{
+
+	item = fz_malloc_no_throw(ctx, sizeof (fz_item));
+	if (!item)
 		return NULL;
-	}
+	memset(item, 0, sizeof (fz_item));
 
 	if (type->make_hash_key)
 	{
@@ -773,35 +753,116 @@ fz_debug_store(fz_context *ctx)
 	fz_unlock(ctx, FZ_LOCK_ALLOC);
 }
 
-/* This is now an n^2 algorithm - not ideal, but it'll only be bad if we are
- * actually managing to scavenge lots of blocks back. */
+/*
+	Consider if we have blocks of the following sizes in the store, from oldest
+	to newest:
+
+	A 32
+	B 64
+	C 128
+	D 256
+
+	Further suppose we need to free 97 bytes. Naively freeing blocks until we have
+	freed enough would mean we'd free A, B and C, when we could have freed just C.
+
+	We are forced into an n^2 algorithm by the need to drop the lock as part of the
+	eviction, so we might as well embrace it and go for a solution that properly
+	drops just C.
+
+	The algorithm used is to scan the list of blocks from oldest to newest, counting
+	how many bytes we can free in the blocks we pass. We stop this scan when we have
+	found enough blocks. We then free the largest block. This releases the lock
+	momentarily, which means we have to start the scan process all over again, so
+	we repeat. This guarantees we only evict a minimum of blocks, but does mean we
+	scan more blocks than we'd ideally like.
+ */
 static int
 scavenge(fz_context *ctx, size_t tofree)
 {
 	fz_store *store = ctx->store;
-	size_t count = 0;
-	fz_item *item, *prev;
+	size_t freed = 0;
+	fz_item *item;
 
-	/* Free the items */
-	for (item = store->tail; item; item = prev)
+	if (store->scavenging)
+		return 0;
+
+	store->scavenging = 1;
+
+	do
 	{
-		prev = item->prev;
-		if (item->val->refs == 1)
+		/* Count through a suffix of objects in the store until
+		 * we find enough to give us what we need to evict. */
+		size_t suffix_size = 0;
+		fz_item *largest = NULL;
+
+		for (item = store->tail; item; item = item->prev)
 		{
-			/* Free this item */
-			count += item->size;
-			evict(ctx, item); /* Drops then retakes lock */
+			if (item->val->refs == 1)
+			{
+				/* This one is evictable */
+				suffix_size += item->size;
+				if (largest == NULL || item->size > largest->size)
+					largest = item;
+				if (suffix_size >= tofree - freed)
+					break;
+			}
+		}
 
-			if (count >= tofree)
-				break;
+		/* If there are no evictable blocks, we can't find anything to free. */
+		if (largest == NULL)
+			break;
 
-			/* Have to restart search again, as prev may no longer
-			 * be valid due to release of lock in evict. */
-			prev = store->tail;
-		}
+		/* Free largest. */
+		freed += largest->size;
+		evict(ctx, largest); /* Drops then retakes lock */
 	}
+	while (freed < tofree);
+
+	store->scavenging = 0;
 	/* Success is managing to evict any blocks */
-	return count != 0;
+	return freed != 0;
+}
+
+void
+fz_drop_storable(fz_context *ctx, const fz_storable *sc)
+{
+	/* Explicitly drop const to allow us to use const
+	 * sanely throughout the code. */
+	fz_storable *s = (fz_storable *)sc;
+	int num;
+
+	if (s == NULL)
+		return;
+
+	fz_lock(ctx, FZ_LOCK_ALLOC);
+	/* Drop the ref, and leave num as being the number of
+	 * refs left (-1 meaning, "statically allocated"). */
+	if (s->refs > 0)
+	{
+		(void)Memento_dropIntRef(s);
+		num = --s->refs;
+	}
+	else
+		num = -1;
+
+	/* If we have just 1 ref left, it's possible that
+	 * this ref is held by the store. If the store is
+	 * oversized, we ought to throw any such references
+	 * away to try to bring the store down to a "legal"
+	 * size. Run a scavenge to check for this case. */
+	if (ctx->store->max != FZ_STORE_UNLIMITED)
+		if (num == 1 && ctx->store->size > ctx->store->max)
+			scavenge(ctx, ctx->store->size - ctx->store->max);
+	fz_unlock(ctx, FZ_LOCK_ALLOC);
+
+	/* If we have no references to an object left, then
+	 * it cannot possibly be in the store (as the store always
+	 * keeps a ref to everything in it, and doesn't drop via
+	 * this method). So we can simply drop the storable object
+	 * itself without any operations on the fz_store.
+	 */
+	if (num == 0)
+		s->drop(ctx, s);
 }
 
 int fz_store_scavenge_external(fz_context *ctx, size_t size, int *phase)
diff --git a/source/fitz/stream-open.c b/source/fitz/stream-open.c
index 399942854..321cf9684 100644
--- a/source/fitz/stream-open.c
+++ b/source/fitz/stream-open.c
@@ -35,7 +35,8 @@ fz_new_stream(fz_context *ctx, void *state, fz_stream_next_fn *next, fz_stream_d
 	}
 	fz_catch(ctx)
 	{
-		drop(ctx, state);
+		if (drop)
+			drop(ctx, state);
 		fz_rethrow(ctx);
 	}
 
diff --git a/source/fitz/svg-device.c b/source/fitz/svg-device.c
index c5905938f..feb21ffce 100644
--- a/source/fitz/svg-device.c
+++ b/source/fitz/svg-device.c
@@ -495,6 +495,7 @@ svg_dev_text_span_as_paths_defs(fz_context *ctx, fz_device *dev, fz_text_span *s
 				out = start_def(ctx, sdev);
 				fz_write_printf(ctx, out, "<symbol id=\"font_%x_%x\">\n", fnt->id, gid);
 				fz_run_t3_glyph(ctx, span->font, gid, &shift, dev);
+				fnt = &sdev->fonts[font_idx]; /* recursion may realloc the font array! */
 			}
 			fz_write_printf(ctx, out, "</symbol>\n");
 			out = end_def(ctx, sdev);
diff --git a/source/fitz/unzip.c b/source/fitz/unzip.c
index 4eb90ddaa..8cc5b07ee 100644
--- a/source/fitz/unzip.c
+++ b/source/fitz/unzip.c
@@ -246,7 +246,7 @@ static void ensure_zip_entries(fz_context *ctx, fz_zip_archive *zip)
 	maxback = fz_minz(size, 0xFFFF + sizeof buf);
 	back = fz_minz(maxback, sizeof buf);
 
-	while (back < maxback)
+	while (back <= maxback)
 	{
 		fz_seek(ctx, file, (int64_t)(size - back), 0);
 		n = fz_read(ctx, file, buf, sizeof buf);
diff --git a/source/fitz/xml.c b/source/fitz/xml.c
index b7c89cf45..c7a5f290f 100644
--- a/source/fitz/xml.c
+++ b/source/fitz/xml.c
@@ -4,7 +4,7 @@
 #include <stdlib.h>
 #include <stdio.h>
 
-static const struct { const char *ent; int ucs; } html_entities[] = {
+static const struct { const char *name; int c; } html_entities[] = {
 	{"nbsp",160}, {"iexcl",161}, {"cent",162}, {"pound",163},
 	{"curren",164}, {"yen",165}, {"brvbar",166}, {"sect",167},
 	{"uml",168}, {"copy",169}, {"ordf",170}, {"laquo",171},
@@ -280,9 +280,9 @@ static size_t xml_parse_entity(int *c, char *a)
 
 	/* We should only be doing this for XHTML, but it shouldn't be a problem. */
 	for (i = 0; i < nelem(html_entities); ++i) {
-		size_t n = strlen(html_entities[i].ent);
-		if (!memcmp(a+1, html_entities[i].ent, n) && a[1+n] == ';') {
-			*c = html_entities[i].ucs;
+		size_t n = strlen(html_entities[i].name);
+		if (!strncmp(a+1, html_entities[i].name, n) && a[n+1] == ';') {
+			*c = html_entities[i].c;
 			return n + 2;
 		}
 	}
@@ -472,9 +472,11 @@ parse_element:
 	return "syntax error in element";
 
 parse_comment:
+	if (p[0]=='D' && p[1]=='O' && p[2]=='C' && p[3]=='T' && p[4]=='Y' && p[5]=='P' && p[6]=='E')
+		goto parse_declaration;
+	if (p[0]=='E' && p[1]=='N' && p[2]=='T' && p[3]=='I' && p[4]=='T' && p[5]=='Y')
+		goto parse_declaration;
 	if (*p == '[') goto parse_cdata;
-	if (*p == 'D' && !memcmp(p, "DOCTYPE", 7)) goto parse_declaration;
-	if (*p == 'E' && !memcmp(p, "ENTITY", 6)) goto parse_declaration;
 	if (*p++ != '-') return "syntax error in comment (<! not followed by --)";
 	if (*p++ != '-') return "syntax error in comment (<!- not followed by -)";
 	while (*p) {
@@ -627,11 +629,15 @@ fz_parse_xml(fz_context *ctx, fz_buffer *buf, int preserve_white)
 	struct parser parser;
 	fz_xml_doc *xml = NULL;
 	fz_xml root, *node;
-	char *p, *error;
-	int dofree;
+	char *p = NULL;
+	char *error;
+	int dofree = 0;
 	unsigned char *s;
 	size_t n;
 
+	fz_var(dofree);
+	fz_var(p);
+
 	/* ensure we are zero-terminated */
 	fz_terminate_buffer(ctx, buf);
 	n = fz_buffer_storage(ctx, buf, &s);
diff --git a/source/pdf/pdf-cmap-load.c b/source/pdf/pdf-cmap-load.c
index 03c2eb350..4eef23fe7 100644
--- a/source/pdf/pdf-cmap-load.c
+++ b/source/pdf/pdf-cmap-load.c
@@ -1,20 +1,6 @@
 #include "mupdf/fitz.h"
 #include "mupdf/pdf.h"
 
-size_t
-pdf_cmap_size(fz_context *ctx, pdf_cmap *cmap)
-{
-	if (cmap == NULL)
-		return 0;
-	if (cmap->storable.refs < 0)
-		return 0;
-
-	return pdf_cmap_size(ctx, cmap->usecmap) +
-		cmap->rcap * sizeof *cmap->ranges +
-		cmap->xcap * sizeof *cmap->xranges +
-		cmap->mcap * sizeof *cmap->mranges;
-}
-
 /*
  * Load CMap stream in PDF file
  */
diff --git a/source/pdf/pdf-cmap.c b/source/pdf/pdf-cmap.c
index 00e2afb72..1942b19a4 100644
--- a/source/pdf/pdf-cmap.c
+++ b/source/pdf/pdf-cmap.c
@@ -508,6 +508,12 @@ add_range(fz_context *ctx, pdf_cmap *cmap, unsigned int low, unsigned int high,
 					tree[current].low = high + 1;
 					if (tree[current].low > tree[current].high)
 					{
+						/* update lt/gt references that will be moved/stale after deleting current */
+						if (gt == cmap->tlen - 1)
+							gt = current;
+						if (lt == cmap->tlen - 1)
+							lt = current;
+						/* delete_node() moves the element at cmap->tlen-1 into current */
 						move = delete_node(cmap, current);
 						current = EMPTY;
 						continue;
@@ -892,3 +898,19 @@ pdf_decode_cmap(pdf_cmap *cmap, unsigned char *buf, unsigned char *end, unsigned
 	*cpt = 0;
 	return 1;
 }
+
+size_t
+pdf_cmap_size(fz_context *ctx, pdf_cmap *cmap)
+{
+	if (cmap == NULL)
+		return 0;
+	if (cmap->storable.refs < 0)
+		return 0;
+
+	return pdf_cmap_size(ctx, cmap->usecmap) +
+		cmap->rcap * sizeof *cmap->ranges +
+		cmap->xcap * sizeof *cmap->xranges +
+		cmap->mcap * sizeof *cmap->mranges +
+		cmap->tcap * sizeof *cmap->tree +
+		sizeof(*cmap);
+}
diff --git a/source/pdf/pdf-device.c b/source/pdf/pdf-device.c
index db699dd07..b95a7d1b3 100644
--- a/source/pdf/pdf-device.c
+++ b/source/pdf/pdf-device.c
@@ -66,7 +66,6 @@ struct pdf_device_s
 
 	pdf_document *doc;
 	pdf_obj *resources;
-	fz_buffer *buffer;
 
 	int in_text;
 
@@ -1063,7 +1062,10 @@ pdf_dev_drop_device(fz_context *ctx, fz_device *dev)
 	int i;
 
 	for (i = pdev->num_gstates-1; i >= 0; i--)
+	{
+		fz_drop_buffer(ctx, pdev->gstates[i].buf);
 		fz_drop_stroke_state(ctx, pdev->gstates[i].stroke_state);
+	}
 
 	for (i = pdev->num_cid_fonts-1; i >= 0; i--)
 		fz_drop_font(ctx, pdev->cid_fonts[i]);
@@ -1071,7 +1073,6 @@ pdf_dev_drop_device(fz_context *ctx, fz_device *dev)
 	for (i = pdev->num_groups - 1; i >= 0; i--)
 		pdf_drop_obj(ctx, pdev->groups[i].ref);
 
-	fz_drop_buffer(ctx, pdev->buffer);
 	pdf_drop_obj(ctx, pdev->resources);
 	fz_free(ctx, pdev->cid_fonts);
 	fz_free(ctx, pdev->image_indices);
@@ -1113,10 +1114,13 @@ fz_device *pdf_new_pdf_device(fz_context *ctx, pdf_document *doc, const fz_matri
 	dev->super.begin_tile = pdf_dev_begin_tile;
 	dev->super.end_tile = pdf_dev_end_tile;
 
+	fz_var(buf);
+
 	fz_try(ctx)
 	{
-		dev->buffer = fz_keep_buffer(ctx, buf);
-		if (!buf)
+		if (buf)
+			buf = fz_keep_buffer(ctx, buf);
+		else
 			buf = fz_new_buffer(ctx, 256);
 		dev->doc = doc;
 		dev->resources = pdf_keep_obj(ctx, resources);
@@ -1138,8 +1142,7 @@ fz_device *pdf_new_pdf_device(fz_context *ctx, pdf_document *doc, const fz_matri
 	}
 	fz_catch(ctx)
 	{
-		if (dev->gstates && dev->buffer == NULL)
-			fz_drop_buffer(ctx, dev->gstates[0].buf);
+		fz_drop_buffer(ctx, buf);
 		fz_free(ctx, dev);
 		fz_rethrow(ctx);
 	}
diff --git a/source/pdf/pdf-font.c b/source/pdf/pdf-font.c
index 148f4c292..319a03462 100644
--- a/source/pdf/pdf-font.c
+++ b/source/pdf/pdf-font.c
@@ -1701,9 +1701,11 @@ pdf_add_cid_font_widths(fz_context *ctx, pdf_document *doc, pdf_obj *fobj, fz_fo
 		prev_size = fz_advance_glyph(ctx, font, 0, 0) * 1000;
 		first_code = prev_code;
 
-		while (prev_code < face->num_glyphs)
+		for (;;)
 		{
 			curr_code = prev_code + 1;
+			if (curr_code >= face->num_glyphs)
+				break;
 			curr_size = fz_advance_glyph(ctx, font, curr_code, 0) * 1000;
 
 			switch (state)
diff --git a/source/pdf/pdf-object.c b/source/pdf/pdf-object.c
index bd68b761f..27f970c68 100644
--- a/source/pdf/pdf-object.c
+++ b/source/pdf/pdf-object.c
@@ -1660,6 +1660,7 @@ void pdf_dirty_obj(fz_context *ctx, pdf_obj *obj)
 
 void pdf_clean_obj(fz_context *ctx, pdf_obj *obj)
 {
+	RESOLVE(obj);
 	if (obj < PDF_OBJ__LIMIT)
 		return;
 	obj->flags &= ~PDF_FLAGS_DIRTY;
diff --git a/source/pdf/pdf-stream.c b/source/pdf/pdf-stream.c
index e8ce2fabb..9db3d0bdd 100644
--- a/source/pdf/pdf-stream.c
+++ b/source/pdf/pdf-stream.c
@@ -295,7 +295,7 @@ pdf_open_raw_filter(fz_context *ctx, fz_stream *file_stm, pdf_document *doc, pdf
 
 	hascrypt = pdf_stream_has_crypt(ctx, stmobj);
 	len = pdf_to_int(ctx, pdf_dict_get(ctx, stmobj, PDF_NAME_Length));
-	null_stm = fz_open_null(ctx, file_stm, len, offset);
+	null_stm = fz_open_pdf_stream(ctx, file_stm, len, offset);
 	if (doc->crypt && !hascrypt)
 	{
 		fz_try(ctx)
diff --git a/source/pdf/pdf-write.c b/source/pdf/pdf-write.c
index b4d519493..0fa59a389 100644
--- a/source/pdf/pdf-write.c
+++ b/source/pdf/pdf-write.c
@@ -122,6 +122,30 @@ enum
 	USE_PAGE_SHIFT = 8
 };
 
+static void
+expand_lists(fz_context *ctx, pdf_write_state *opts, int num)
+{
+	int i;
+
+	/* objects are numbered 0..num and maybe two additional objects for linearization */
+	num += 3;
+	opts->use_list = fz_resize_array(ctx, opts->use_list, num, sizeof(*opts->use_list));
+	opts->ofs_list = fz_resize_array(ctx, opts->ofs_list, num, sizeof(*opts->ofs_list));
+	opts->gen_list = fz_resize_array(ctx, opts->gen_list, num, sizeof(*opts->gen_list));
+	opts->renumber_map = fz_resize_array(ctx, opts->renumber_map, num, sizeof(*opts->renumber_map));
+	opts->rev_renumber_map = fz_resize_array(ctx, opts->rev_renumber_map, num, sizeof(*opts->rev_renumber_map));
+
+	for (i = opts->list_len; i < num; i++)
+	{
+		opts->use_list[i] = 0;
+		opts->ofs_list[i] = 0;
+		opts->gen_list[i] = 0;
+		opts->renumber_map[i] = i;
+		opts->rev_renumber_map[i] = i;
+	}
+	opts->list_len = num;
+}
+
 /*
  * page_objects and page_object_list handling functions
  */
@@ -195,6 +219,8 @@ static void
 page_objects_list_insert(fz_context *ctx, pdf_write_state *opts, int page, int object)
 {
 	page_objects_list_ensure(ctx, &opts->page_object_lists, page+1);
+	if (object >= opts->list_len)
+		expand_lists(ctx, opts, object);
 	if (opts->page_object_lists->len < page+1)
 		opts->page_object_lists->len = page+1;
 	page_objects_insert(ctx, &opts->page_object_lists->page[page], object);
@@ -204,6 +230,8 @@ static void
 page_objects_list_set_page_object(fz_context *ctx, pdf_write_state *opts, int page, int object)
 {
 	page_objects_list_ensure(ctx, &opts->page_object_lists, page+1);
+	if (object >= opts->list_len)
+		expand_lists(ctx, opts, object);
 	opts->page_object_lists->page[page]->page_object_number = object;
 }
 
@@ -630,30 +658,6 @@ static int markobj(fz_context *ctx, pdf_document *doc, pdf_write_state *opts, pd
 	return 0;
 }
 
-static void
-expand_lists(fz_context *ctx, pdf_write_state *opts, int num)
-{
-	int i;
-
-	/* objects are numbered 0..num and maybe two additional objects for linearization */
-	num += 3;
-	opts->use_list = fz_resize_array(ctx, opts->use_list, num, sizeof(*opts->use_list));
-	opts->ofs_list = fz_resize_array(ctx, opts->ofs_list, num, sizeof(*opts->ofs_list));
-	opts->gen_list = fz_resize_array(ctx, opts->gen_list, num, sizeof(*opts->gen_list));
-	opts->renumber_map = fz_resize_array(ctx, opts->renumber_map, num, sizeof(*opts->renumber_map));
-	opts->rev_renumber_map = fz_resize_array(ctx, opts->rev_renumber_map, num, sizeof(*opts->rev_renumber_map));
-
-	for (i = opts->list_len; i < num; i++)
-	{
-		opts->use_list[i] = 0;
-		opts->ofs_list[i] = 0;
-		opts->gen_list[i] = 0;
-		opts->renumber_map[i] = i;
-		opts->rev_renumber_map[i] = i;
-	}
-	opts->list_len = num;
-}
-
 /*
  * Scan for and remove duplicate objects (slow)
  */
@@ -973,6 +977,8 @@ mark_all(fz_context *ctx, pdf_document *doc, pdf_write_state *opts, pdf_obj *val
 		if (pdf_is_indirect(ctx, val))
 		{
 			int num = pdf_to_num(ctx, val);
+			if (num >= opts->list_len)
+				expand_lists(ctx, opts, num);
 			if (opts->use_list[num] & USE_PAGE_MASK)
 				/* Already used */
 				opts->use_list[num] |= USE_SHARED;
diff --git a/source/pdf/pdf-xref.c b/source/pdf/pdf-xref.c
index 8515090d9..9107f75df 100644
--- a/source/pdf/pdf-xref.c
+++ b/source/pdf/pdf-xref.c
@@ -1365,7 +1365,8 @@ pdf_init_document(fz_context *ctx, pdf_document *doc)
 		if (repaired)
 		{
 			/* pdf_repair_xref may access xref_index, so reset it properly */
-			memset(doc->xref_index, 0, sizeof(int) * doc->max_xref_len);
+			if (doc->xref_index)
+				memset(doc->xref_index, 0, sizeof(int) * doc->max_xref_len);
 			pdf_repair_xref(ctx, doc);
 			pdf_prime_xref_index(ctx, doc);
 		}

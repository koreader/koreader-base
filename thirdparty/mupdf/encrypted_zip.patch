diff --git a/include/mupdf/fitz/archive.h b/include/mupdf/fitz/archive.h
index c204b34f..4854c1ac 100644
--- a/include/mupdf/fitz/archive.h
+++ b/include/mupdf/fitz/archive.h
@@ -180,6 +180,9 @@ fz_archive *fz_open_zip_archive(fz_context *ctx, const char *path);
 */
 fz_archive *fz_open_zip_archive_with_stream(fz_context *ctx, fz_stream *file);
 
+int fz_archive_needs_password(fz_context *ctx, fz_archive *zip);
+int fz_archive_authenticate_password(fz_context *ctx, fz_archive *zip, const char *password);
+
 typedef struct fz_zip_writer_s fz_zip_writer;
 
 fz_zip_writer *fz_new_zip_writer(fz_context *ctx, const char *filename);
diff --git a/source/cbz/mucbz.c b/source/cbz/mucbz.c
index 2d357b6e..861a7902 100644
--- a/source/cbz/mucbz.c
+++ b/source/cbz/mucbz.c
@@ -210,6 +210,20 @@ cbz_load_page(fz_context *ctx, fz_document *doc_, int number)
 	return (fz_page*)page;
 }
 
+int
+cbz_needs_password(fz_context *ctx, fz_document *doc_)
+{
+	cbz_document *doc = (cbz_document*)doc_;
+	return fz_archive_needs_password(ctx, doc->arch);
+}
+
+int
+cbz_authenticate_password(fz_context *ctx, fz_document *doc_, const char *password)
+{
+	cbz_document *doc = (cbz_document*)doc_;
+	return fz_archive_authenticate_password(ctx, doc->arch, password);
+}
+
 static int
 cbz_lookup_metadata(fz_context *ctx, fz_document *doc_, const char *key, char *buf, int size)
 {
@@ -230,6 +244,8 @@ cbz_open_document_with_stream(fz_context *ctx, fz_stream *file)
 	doc->super.count_pages = cbz_count_pages;
 	doc->super.load_page = cbz_load_page;
 	doc->super.lookup_metadata = cbz_lookup_metadata;
+	doc->super.needs_password = cbz_needs_password;
+	doc->super.authenticate_password = cbz_authenticate_password;
 
 	fz_try(ctx)
 	{
diff --git a/source/fitz/unzip.c b/source/fitz/unzip.c
index 4eb90dda..a9dee1c2 100644
--- a/source/fitz/unzip.c
+++ b/source/fitz/unzip.c
@@ -20,6 +20,26 @@
 
 #define ZIP_ENCRYPTED_FLAG 0x1
 
+#ifdef HAVE_LIBAES
+/*
+ * Note that the original crypt.h in minizip uses unsigned long pointer to
+ * pcrc_32_tab it will cause problem on x86_64 machine. While the crypt.h
+ * in zlib-1.2.8 contrib minizip uses z_crc_t pointer which is determined
+ * to unsigned int pointer on 64 bit machine.
+ */
+#include "contrib/minizip/crypt.h"  // from zlib-1.2.8
+#include "aes/fileenc.h"            // from minizip-g0b46a2b
+#define AES_METHOD          (99)
+#define AES_PWVERIFYSIZE    (2)
+#define AES_MAXSALTLENGTH   (16)
+#define AES_AUTHCODESIZE    (10)
+#define AES_HEADERSIZE      (11)
+#define AES_KEYSIZE(mode)   (64 + (mode * 64))
+#define KEY_LENGTH(mode)    (8 * (mode & 3) + 8)
+#define SALT_LENGTH(mode)   (4 * (mode & 3) + 4)
+#define MAC_LENGTH(mode)    (10)
+#endif
+
 typedef struct zip_entry_s zip_entry;
 typedef struct fz_zip_archive_s fz_zip_archive;
 
@@ -27,6 +47,9 @@ struct zip_entry_s
 {
 	char *name;
 	int offset, csize, usize;
+#ifdef HAVE_LIBAES
+	int crypted;
+#endif
 };
 
 struct fz_zip_archive_s
@@ -35,6 +58,17 @@ struct fz_zip_archive_s
 
 	int count;
 	zip_entry *entries;
+
+#ifdef HAVE_LIBAES
+	int crypted;
+	char password[128];
+	unsigned long keys[3];     /* keys defining the pseudo-random sequence */
+	const z_crc_t *pcrc_32_tab;
+	unsigned long aes_encryption_mode;
+	unsigned long aes_compression_method;
+	unsigned long aes_version;
+	fcrypt_ctx aes_ctx;
+#endif
 };
 
 static void *zalloc_zip(void *opaque, unsigned int items, unsigned int size)
@@ -64,6 +98,7 @@ static void read_zip_dir_imp(fz_context *ctx, fz_zip_archive *zip, int start_off
 	int namesize, metasize, commentsize;
 	char *name;
 	size_t n;
+	int general;
 
 	zip->count = 0;
 
@@ -136,7 +171,7 @@ static void read_zip_dir_imp(fz_context *ctx, fz_zip_archive *zip, int start_off
 
 		(void) fz_read_int16_le(ctx, file); /* version made by */
 		(void) fz_read_int16_le(ctx, file); /* version to extract */
-		(void) fz_read_int16_le(ctx, file); /* general */
+		general = fz_read_int16_le(ctx, file); /* general */
 		(void) fz_read_int16_le(ctx, file); /* method */
 		(void) fz_read_int16_le(ctx, file); /* last mod file time */
 		(void) fz_read_int16_le(ctx, file); /* last mod file date */
@@ -199,6 +234,15 @@ static void read_zip_dir_imp(fz_context *ctx, fz_zip_archive *zip, int start_off
 		zip->entries[zip->count].csize = csize;
 		zip->entries[zip->count].usize = usize;
 
+#ifdef HAVE_LIBAES
+		if (general & ZIP_ENCRYPTED_FLAG) {
+			zip->crypted = 1;
+			zip->entries[zip->count].crypted = 1;
+		} else {
+			zip->entries[zip->count].crypted = 0;
+		}
+#endif
+
 		zip->count++;
 	}
 }
@@ -207,6 +251,12 @@ static int read_zip_entry_header(fz_context *ctx, fz_zip_archive *zip, zip_entry
 {
 	fz_stream *file = zip->super.file;
 	int sig, general, method, namelength, extralength;
+	int crc32, modtime;
+#ifdef HAVE_LIBAES
+	int i, headerid, datasize, chk;
+	unsigned char source[12];
+	unsigned char crcbyte;
+#endif
 
 	fz_seek(ctx, file, ent->offset, 0);
 
@@ -215,20 +265,75 @@ static int read_zip_entry_header(fz_context *ctx, fz_zip_archive *zip, zip_entry
 		fz_throw(ctx, FZ_ERROR_GENERIC, "wrong zip local file signature (0x%x)", sig);
 
 	(void) fz_read_int16_le(ctx, file); /* version */
-	general = fz_read_int16_le(ctx, file); /* general */
+	general = fz_read_uint16_le(ctx, file); /* general */
+	method = fz_read_uint16_le(ctx, file);
+#if !defined(HAVE_LIBAES)
 	if (general & ZIP_ENCRYPTED_FLAG)
 		fz_throw(ctx, FZ_ERROR_GENERIC, "zip content is encrypted");
-
-	method = fz_read_int16_le(ctx, file);
-	(void) fz_read_int16_le(ctx, file); /* file time */
+#endif
+	modtime = fz_read_uint16_le(ctx, file); /* file time */
 	(void) fz_read_int16_le(ctx, file); /* file date */
-	(void) fz_read_int32_le(ctx, file); /* crc-32 */
+	crc32 = fz_read_uint32_le(ctx, file); /* crc-32 */
 	(void) fz_read_int32_le(ctx, file); /* csize */
 	(void) fz_read_int32_le(ctx, file); /* usize */
 	namelength = fz_read_int16_le(ctx, file);
 	extralength = fz_read_int16_le(ctx, file);
 
+#if !defined(HAVE_LIBAES)
 	fz_seek(ctx, file, namelength + extralength, 1);
+#else
+	fz_seek(ctx, file, namelength, 1);
+
+	if (general & ZIP_ENCRYPTED_FLAG) {
+		if (method == AES_METHOD) {
+			while (extralength > 0) {
+				headerid = fz_read_uint16_le(ctx, file);
+				datasize = fz_read_uint16_le(ctx, file);
+				if (headerid == 0x9901) {
+					zip->aes_version = fz_read_int16_le(ctx, file);
+					(void) fz_read_int16_le(ctx, file); /* "AE" */
+					zip->aes_encryption_mode = fz_read_byte(ctx, file);
+					zip->aes_compression_method = fz_read_int16_le(ctx, file);
+				}
+				extralength -= 2 + 2 + datasize;
+			}
+			if (zip->aes_encryption_mode) {
+				unsigned char passverifyread[AES_PWVERIFYSIZE];
+				unsigned char passverifycalc[AES_PWVERIFYSIZE];
+				unsigned char saltvalue[AES_MAXSALTLENGTH];
+				unsigned int saltlength;
+				saltlength = SALT_LENGTH(zip->aes_encryption_mode);
+				fz_read(ctx, file, saltvalue, saltlength);
+				fz_read(ctx, file, passverifyread, AES_PWVERIFYSIZE);
+				fcrypt_init(zip->aes_encryption_mode, (const unsigned char*)zip->password, strlen(zip->password),
+					saltvalue, passverifycalc, &zip->aes_ctx);
+				for (i = 0; i < AES_PWVERIFYSIZE; i++) {
+					if (passverifyread[i] != passverifycalc[i]) {
+						return -1;
+					}
+				}
+			}
+		} else {
+			fz_seek(ctx, file, extralength, 1);
+			zip->pcrc_32_tab = (const z_crc_t*)get_crc_table();
+			init_keys(zip->password, zip->keys, zip->pcrc_32_tab);
+			fz_read(ctx, file, source, 12);
+			for (i = 0; i < 12; i++) {
+				crcbyte = zdecode(zip->keys, zip->pcrc_32_tab, source[i]);
+			}
+			if (general & 0x8) {
+				chk = modtime;  // WTF? This is undocumented in the APPNOTE!
+			} else {
+				chk = crc32 >> 16;
+			}
+			if (chk >> 8 != crcbyte) {
+				return -1;
+			}
+		}
+	} else {
+		fz_seek(ctx, file, extralength, 1);
+	}
+#endif
 
 	return method;
 }
@@ -285,6 +390,11 @@ static fz_stream *open_zip_entry(fz_context *ctx, fz_archive *arch, const char *
 		fz_throw(ctx, FZ_ERROR_GENERIC, "cannot find named zip archive entry");
 
 	method = read_zip_entry_header(ctx, zip, ent);
+#ifdef HAVE_LIBAES
+	if (method == AES_METHOD) {
+		method = zip->aes_compression_method;
+	}
+#endif
 	if (method == 0)
 		return fz_open_null(ctx, file, ent->usize, fz_tell(ctx, file));
 	if (method == 8)
@@ -309,6 +419,12 @@ static fz_buffer *read_zip_entry(fz_context *ctx, fz_archive *arch, const char *
 		fz_throw(ctx, FZ_ERROR_GENERIC, "cannot find named zip archive entry");
 
 	method = read_zip_entry_header(ctx, zip, ent);
+#ifdef HAVE_LIBAES
+	if (method == AES_METHOD) {
+		method = zip->aes_compression_method;
+	}
+#endif
+
 	ubuf = fz_new_buffer(ctx, ent->usize + 1); /* +1 because many callers will add a terminating zero */
 
 	if (method == 0)
@@ -318,6 +434,18 @@ static fz_buffer *read_zip_entry(fz_context *ctx, fz_archive *arch, const char *
 			ubuf->len = fz_read(ctx, file, ubuf->data, ent->usize);
 			if (ubuf->len < (size_t)ent->usize)
 				fz_warn(ctx, "premature end of data in stored zip archive entry");
+
+#ifdef HAVE_LIBAES
+			if (ent->crypted) {
+				if (zip->aes_encryption_mode) {
+					fcrypt_decrypt(ubuf->data, ent->usize, &zip->aes_ctx);
+				} else {
+					int i;
+					for(i = 0; i < ent->usize; ++i)
+						ubuf->data[i] = zdecode(zip->keys, zip->pcrc_32_tab, ubuf->data[i]);
+				}
+			}
+#endif
 		}
 		fz_catch(ctx)
 		{
@@ -333,6 +461,19 @@ static fz_buffer *read_zip_entry(fz_context *ctx, fz_archive *arch, const char *
 		{
 			fz_read(ctx, file, cbuf, ent->csize);
 
+#ifdef HAVE_LIBAES
+			if (ent->crypted) {
+				if (zip->aes_encryption_mode) {
+					fcrypt_decrypt(cbuf, ent->csize, &zip->aes_ctx);
+				} else {
+					int i;
+					for(i = 0; i < ent->csize; ++i) {
+						cbuf[i] = zdecode(zip->keys, zip->pcrc_32_tab, cbuf[i]);
+					}
+				}
+			}
+#endif
+
 			z.zalloc = zalloc_zip;
 			z.zfree = zfree_zip;
 			z.opaque = ctx;
@@ -379,6 +520,39 @@ static fz_buffer *read_zip_entry(fz_context *ctx, fz_archive *arch, const char *
 	fz_throw(ctx, FZ_ERROR_GENERIC, "unknown zip method: %d", method);
 }
 
+int fz_archive_needs_password(fz_context *ctx, fz_archive *arch)
+{
+#ifdef HAVE_LIBAES
+	fz_zip_archive *zip;
+
+	if (strcmp(arch->format, "zip") != 0)
+		return 0;
+
+	zip = (fz_zip_archive *) arch;
+	return zip->crypted;
+#else
+	return 0;
+#endif
+}
+
+int fz_archive_authenticate_password(fz_context *ctx, fz_archive *arch, const char *password)
+{
+#ifdef HAVE_LIBAES
+	fz_zip_archive *zip = (fz_zip_archive *) arch;
+	int i;
+
+	fz_strlcpy(zip->password, password, sizeof zip->password);
+	for (i = 0; i < zip->count; ++i) {
+		if (zip->entries[i].crypted) {
+			return read_zip_entry_header(ctx, zip, &zip->entries[i]) != -1;
+		}
+	}
+	return 1;
+#else
+	return 0;
+#endif
+}
+
 static int has_zip_entry(fz_context *ctx, fz_archive *arch, const char *name)
 {
 	fz_zip_archive *zip = (fz_zip_archive *) arch;
@@ -426,6 +600,12 @@ fz_open_zip_archive_with_stream(fz_context *ctx, fz_stream *file)
 		fz_throw(ctx, FZ_ERROR_GENERIC, "cannot recognize zip archive");
 
 	zip = fz_new_derived_archive(ctx, file, fz_zip_archive);
+#ifdef HAVE_LIBAES
+	zip->crypted = 0;
+	zip->aes_compression_method = 0;
+	zip->aes_encryption_mode = 0;
+	zip->aes_version = 0;
+#endif
 	zip->super.format = "zip";
 	zip->super.count_entries = count_zip_entries;
 	zip->super.list_entry = list_zip_entry;

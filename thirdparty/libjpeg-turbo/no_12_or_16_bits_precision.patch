diff --git a/CMakeLists.txt b/CMakeLists.txt
index b9ef19d..39c6905 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -668,6 +668,7 @@ set(JPEG_SOURCES src/jcapimin.c
   src/wrapper/jquant1-8.c src/wrapper/jquant1-12.c
   src/wrapper/jquant2-8.c src/wrapper/jquant2-12.c
   src/wrapper/jutils-8.c src/wrapper/jutils-12.c src/wrapper/jutils-16.c)
+list(FILTER JPEG_SOURCES EXCLUDE REGEX [[-1[26]\.c$]])
 
 if(WITH_ARITH_ENC OR WITH_ARITH_DEC)
   set(JPEG_SOURCES ${JPEG_SOURCES} src/jaricom.c)
@@ -726,6 +727,7 @@ if(WITH_TURBOJPEG)
     src/wrapper/rdppm-8.c src/wrapper/rdppm-12.c src/wrapper/rdppm-16.c
     src/wrbmp.c
     src/wrapper/wrppm-8.c src/wrapper/wrppm-12.c src/wrapper/wrppm-16.c)
+  list(FILTER TURBOJPEG_SOURCES EXCLUDE REGEX [[-1[26]\.c$]])
   if(ENABLE_SHARED)
     set(TJMAPFILE ${CMAKE_CURRENT_SOURCE_DIR}/src/turbojpeg-mapfile)
     if(WITH_JAVA)
diff --git a/src/jcinit.c b/src/jcinit.c
index 09ff6b3..2e8f58d 100644
--- a/src/jcinit.c
+++ b/src/jcinit.c
@@ -38,12 +38,15 @@ jinit_compress_master(j_compress_ptr cinfo)
   /* Initialize master control (includes parameter checking/processing) */
   jinit_c_master_control(cinfo, FALSE /* full compression */);
 
+  if (cinfo->data_precision > 8)
+      ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
   /* Preprocessing */
   if (!cinfo->raw_data_in) {
     if (cinfo->data_precision <= 8) {
       jinit_color_converter(cinfo);
       jinit_downsampler(cinfo);
       jinit_c_prep_controller(cinfo, FALSE /* never need full buffer here */);
+#if 0
     } else if (cinfo->data_precision <= 12) {
       j12init_color_converter(cinfo);
       j12init_downsampler(cinfo);
@@ -57,6 +60,7 @@ jinit_compress_master(j_compress_ptr cinfo)
                                 FALSE /* never need full buffer here */);
 #else
       ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
+#endif
 #endif
     }
   }
@@ -66,10 +70,12 @@ jinit_compress_master(j_compress_ptr cinfo)
     /* Prediction, sample differencing, and point transform */
     if (cinfo->data_precision <= 8)
       jinit_lossless_compressor(cinfo);
+#if 0
     else if (cinfo->data_precision <= 12)
       j12init_lossless_compressor(cinfo);
     else
       j16init_lossless_compressor(cinfo);
+#endif
     /* Entropy encoding: either Huffman or arithmetic coding. */
     if (cinfo->arith_code) {
       ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
@@ -81,12 +87,14 @@ jinit_compress_master(j_compress_ptr cinfo)
     if (cinfo->data_precision <= 8)
       jinit_c_diff_controller(cinfo, (boolean)(cinfo->num_scans > 1 ||
                                                cinfo->optimize_coding));
+#if 0
     else if (cinfo->data_precision <= 12)
       j12init_c_diff_controller(cinfo, (boolean)(cinfo->num_scans > 1 ||
                                                  cinfo->optimize_coding));
     else
       j16init_c_diff_controller(cinfo, (boolean)(cinfo->num_scans > 1 ||
                                                  cinfo->optimize_coding));
+#endif
 #else
     ERREXIT(cinfo, JERR_NOT_COMPILED);
 #endif
@@ -94,10 +102,12 @@ jinit_compress_master(j_compress_ptr cinfo)
     /* Forward DCT */
     if (cinfo->data_precision == 8)
       jinit_forward_dct(cinfo);
+#if 0
     else if (cinfo->data_precision == 12)
       j12init_forward_dct(cinfo);
     else
       ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
+#endif
     /* Entropy encoding: either Huffman or arithmetic coding. */
     if (cinfo->arith_code) {
 #ifdef C_ARITH_CODING_SUPPORTED
@@ -116,17 +126,20 @@ jinit_compress_master(j_compress_ptr cinfo)
         jinit_huff_encoder(cinfo);
     }
 
+#if 0
     /* Need a full-image coefficient buffer in any multi-pass mode. */
     if (cinfo->data_precision == 12)
       j12init_c_coef_controller(cinfo, (boolean)(cinfo->num_scans > 1 ||
                                                  cinfo->optimize_coding));
     else
+#endif
       jinit_c_coef_controller(cinfo, (boolean)(cinfo->num_scans > 1 ||
                                                cinfo->optimize_coding));
   }
 
   if (cinfo->data_precision <= 8)
     jinit_c_main_controller(cinfo, FALSE /* never need full buffer here */);
+#if 0
   else if (cinfo->data_precision <= 12)
     j12init_c_main_controller(cinfo, FALSE /* never need full buffer here */);
   else
@@ -134,6 +147,7 @@ jinit_compress_master(j_compress_ptr cinfo)
     j16init_c_main_controller(cinfo, FALSE /* never need full buffer here */);
 #else
     ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
+#endif
 #endif
 
   jinit_marker_writer(cinfo);
diff --git a/src/jdmaster.c b/src/jdmaster.c
index 4085c22..de08f7b 100644
--- a/src/jdmaster.c
+++ b/src/jdmaster.c
@@ -574,9 +574,11 @@ master_selection(j_decompress_ptr cinfo)
 #ifdef QUANT_1PASS_SUPPORTED
       if (cinfo->data_precision == 8)
         jinit_1pass_quantizer(cinfo);
+#if 0
       else if (cinfo->data_precision == 12)
         j12init_1pass_quantizer(cinfo);
       else
+#endif
         ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
       master->quantizer_1pass = cinfo->cquantize;
 #else
@@ -589,9 +591,11 @@ master_selection(j_decompress_ptr cinfo)
 #ifdef QUANT_2PASS_SUPPORTED
       if (cinfo->data_precision == 8)
         jinit_2pass_quantizer(cinfo);
+#if 0
       else if (cinfo->data_precision == 12)
         j12init_2pass_quantizer(cinfo);
       else
+#endif
         ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
       master->quantizer_2pass = cinfo->cquantize;
 #else
@@ -603,14 +607,19 @@ master_selection(j_decompress_ptr cinfo)
      */
   }
 
+  if (cinfo->data_precision > 8)
+      ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
+
   /* Post-processing: in particular, color conversion first */
   if (!cinfo->raw_data_out) {
     if (master->using_merged_upsample) {
 #ifdef UPSAMPLE_MERGING_SUPPORTED
       if (cinfo->data_precision == 8)
         jinit_merged_upsampler(cinfo); /* does color conversion too */
+#if 0
       else if (cinfo->data_precision == 12)
         j12init_merged_upsampler(cinfo); /* does color conversion too */
+#endif
       else
         ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 #else
@@ -620,6 +629,7 @@ master_selection(j_decompress_ptr cinfo)
       if (cinfo->data_precision <= 8) {
         jinit_color_deconverter(cinfo);
         jinit_upsampler(cinfo);
+#if 0
       } else if (cinfo->data_precision <= 12) {
         j12init_color_deconverter(cinfo);
         j12init_upsampler(cinfo);
@@ -629,11 +639,13 @@ master_selection(j_decompress_ptr cinfo)
         j16init_upsampler(cinfo);
 #else
         ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
+#endif
 #endif
       }
     }
     if (cinfo->data_precision <= 8)
       jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
+#if 0
     else if (cinfo->data_precision <= 12)
       j12init_d_post_controller(cinfo, cinfo->enable_2pass_quant);
     else
@@ -641,6 +653,7 @@ master_selection(j_decompress_ptr cinfo)
       j16init_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 #else
       ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
+#endif
 #endif
   }
 
@@ -651,10 +664,12 @@ master_selection(j_decompress_ptr cinfo)
      */
     if (cinfo->data_precision <= 8)
       jinit_lossless_decompressor(cinfo);
+#if 0
     else if (cinfo->data_precision <= 12)
       j12init_lossless_decompressor(cinfo);
     else
       j16init_lossless_decompressor(cinfo);
+#endif
     /* Entropy decoding: either Huffman or arithmetic coding. */
     if (cinfo->arith_code) {
       ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
@@ -667,10 +682,12 @@ master_selection(j_decompress_ptr cinfo)
                    cinfo->buffered_image;
     if (cinfo->data_precision <= 8)
       jinit_d_diff_controller(cinfo, use_c_buffer);
+#if 0
     else if (cinfo->data_precision <= 12)
       j12init_d_diff_controller(cinfo, use_c_buffer);
     else
       j16init_d_diff_controller(cinfo, use_c_buffer);
+#endif
 #else
     ERREXIT(cinfo, JERR_NOT_COMPILED);
 #endif
@@ -678,8 +695,10 @@ master_selection(j_decompress_ptr cinfo)
     /* Inverse DCT */
     if (cinfo->data_precision == 8)
       jinit_inverse_dct(cinfo);
+#if 0
     else if (cinfo->data_precision == 12)
       j12init_inverse_dct(cinfo);
+#endif
     else
       ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
     /* Entropy decoding: either Huffman or arithmetic coding. */
@@ -703,15 +722,18 @@ master_selection(j_decompress_ptr cinfo)
     /* Initialize principal buffer controllers. */
     use_c_buffer = cinfo->inputctl->has_multiple_scans ||
                    cinfo->buffered_image;
+#if 0
     if (cinfo->data_precision == 12)
       j12init_d_coef_controller(cinfo, use_c_buffer);
     else
+#endif
       jinit_d_coef_controller(cinfo, use_c_buffer);
   }
 
   if (!cinfo->raw_data_out) {
     if (cinfo->data_precision <= 8)
       jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
+#if 0
     else if (cinfo->data_precision <= 12)
       j12init_d_main_controller(cinfo,
                                 FALSE /* never need full buffer here */);
@@ -721,6 +743,7 @@ master_selection(j_decompress_ptr cinfo)
                                 FALSE /* never need full buffer here */);
 #else
       ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
+#endif
 #endif
   }
 
diff --git a/src/jdtrans.c b/src/jdtrans.c
index 719813f..f7869cf 100644
--- a/src/jdtrans.c
+++ b/src/jdtrans.c
@@ -129,10 +129,14 @@ transdecode_master_selection(j_decompress_ptr cinfo)
       jinit_huff_decoder(cinfo);
   }
 
+  if (cinfo->data_precision > 8)
+      ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
+#if 0
   /* Always get a full-image coefficient buffer. */
   if (cinfo->data_precision == 12)
     j12init_d_coef_controller(cinfo, TRUE);
   else
+#endif
     jinit_d_coef_controller(cinfo, TRUE);
 
   /* We can now tell the memory manager to allocate virtual arrays. */
diff --git a/src/turbojpeg.c b/src/turbojpeg.c
index 389aea5..4d80661 100644
--- a/src/turbojpeg.c
+++ b/src/turbojpeg.c
@@ -1197,12 +1197,14 @@ bailout:
 #define BITS_IN_JSAMPLE  8
 #include "turbojpeg-mp.c"
 #undef BITS_IN_JSAMPLE
+#if 0
 #define BITS_IN_JSAMPLE  12
 #include "turbojpeg-mp.c"
 #undef BITS_IN_JSAMPLE
 #define BITS_IN_JSAMPLE  16
 #include "turbojpeg-mp.c"
 #undef BITS_IN_JSAMPLE
+#endif
 
 /* TurboJPEG 1.2+ */
 DLLEXPORT int tjCompress2(tjhandle handle, const unsigned char *srcBuf,

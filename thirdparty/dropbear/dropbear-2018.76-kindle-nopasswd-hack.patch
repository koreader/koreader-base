diff --git a/runopts.h b/runopts.h
index 3123383..1bf4f1d 100644
--- a/runopts.h
+++ b/runopts.h
@@ -122,6 +122,7 @@ typedef struct svr_runopts {
 
 	buffer * banner;
 	char * pidfile;
+	int nopasschk;
 
 	char * forced_command;
 
diff --git a/svr-authpasswd.c b/svr-authpasswd.c
index bdee2aa..d5fb2cf 100644
--- a/svr-authpasswd.c
+++ b/svr-authpasswd.c
@@ -79,35 +79,74 @@ void svr_auth_password() {
 	m_burn(password, passwordlen);
 	m_free(password);
 
-	if (testcrypt == NULL) {
-		/* crypt() with an invalid salt like "!!" */
-		dropbear_log(LOG_WARNING, "User account '%s' is locked",
-				ses.authstate.pw_name);
-		send_msg_userauth_failure(0, 1);
-		return;
-	}
-
-	/* check for empty password */
-	if (passwdcrypt[0] == '\0') {
-		dropbear_log(LOG_WARNING, "User '%s' has blank password, rejected",
-				ses.authstate.pw_name);
-		send_msg_userauth_failure(0, 1);
-		return;
-	}
-
-	if (constant_time_strcmp(testcrypt, passwdcrypt) == 0) {
-		/* successful authentication */
-		dropbear_log(LOG_NOTICE, 
-				"Password auth succeeded for '%s' from %s",
-				ses.authstate.pw_name,
-				svr_ses.addrstring);
-		send_msg_userauth_success();
+	/*
+	 * Hack. Always auth successfully if we were launched with the -n flag, or if we're connecting from localhost.
+	 * Keep the granularity of checks instead of just sending a successful auth for posterity/logging ;).
+	 */
+	if (svr_opts.nopasschk || strncmp(svr_ses.addrstring, "127.0.0.1", 9) == 0) {
+		if (testcrypt == NULL) {
+			/* crypt() with an invalid salt like "!!" */
+			dropbear_log(LOG_WARNING, "User account '%s' is locked (But we're letting you in, as configured ;))",
+					ses.authstate.pw_name);
+			send_msg_userauth_success();
+			/* Keep the return to avoid potentially blowing up later? */
+			return;
+		}
+
+		/* check for empty password */
+		if (passwdcrypt[0] == '\0') {
+			dropbear_log(LOG_WARNING, "User '%s' has blank password, but we're letting you in, as configured ;)",
+					ses.authstate.pw_name);
+			send_msg_userauth_success();
+			/* Ditto */
+			return;
+		}
+
+		if (constant_time_strcmp(testcrypt, passwdcrypt) == 0) {
+			/* successful authentication */
+			dropbear_log(LOG_NOTICE,
+					"Password auth succeeded for '%s' from %s",
+					ses.authstate.pw_name,
+					svr_ses.addrstring);
+			send_msg_userauth_success();
+		} else {
+			dropbear_log(LOG_WARNING,
+					"Bad password attempt for '%s' from %s (But we're letting you in, as configured ;))",
+					ses.authstate.pw_name,
+					svr_ses.addrstring);
+			send_msg_userauth_success();
+		}
 	} else {
-		dropbear_log(LOG_WARNING,
-				"Bad password attempt for '%s' from %s",
-				ses.authstate.pw_name,
-				svr_ses.addrstring);
-		send_msg_userauth_failure(0, 1);
+		if (testcrypt == NULL) {
+			/* crypt() with an invalid salt like "!!" */
+			dropbear_log(LOG_WARNING, "User account '%s' is locked",
+					ses.authstate.pw_name);
+			send_msg_userauth_failure(0, 1);
+			return;
+		}
+
+		/* check for empty password */
+		if (passwdcrypt[0] == '\0') {
+			dropbear_log(LOG_WARNING, "User '%s' has blank password, rejected",
+					ses.authstate.pw_name);
+			send_msg_userauth_failure(0, 1);
+			return;
+		}
+
+		if (constant_time_strcmp(testcrypt, passwdcrypt) == 0) {
+			/* successful authentication */
+			dropbear_log(LOG_NOTICE,
+					"Password auth succeeded for '%s' from %s",
+					ses.authstate.pw_name,
+					svr_ses.addrstring);
+			send_msg_userauth_success();
+		} else {
+			dropbear_log(LOG_WARNING,
+					"Bad password attempt for '%s' from %s",
+					ses.authstate.pw_name,
+					svr_ses.addrstring);
+			send_msg_userauth_failure(0, 1);
+		}
 	}
 }
 
diff --git a/svr-runopts.c b/svr-runopts.c
index fe83e02..69079b5 100644
--- a/svr-runopts.c
+++ b/svr-runopts.c
@@ -93,6 +93,7 @@ static void printhelp(const char * progname) {
 					"		(default port is %s if none specified)\n"
 					"-P PidFile	Create pid file PidFile\n"
 					"		(default %s)\n"
+					"-n             Disable password checking (/!\\ Hack, don't use this!)\n"
 #if INETD_MODE
 					"-i		Start for inetd\n"
 #endif
@@ -150,6 +151,7 @@ void svr_getopts(int argc, char ** argv) {
 	svr_opts.hostkey = NULL;
 	svr_opts.delay_hostkey = 0;
 	svr_opts.pidfile = DROPBEAR_PIDFILE;
+	svr_opts.nopasschk = 0;
 #if DROPBEAR_SVR_LOCALTCPFWD
 	svr_opts.nolocaltcp = 0;
 #endif
@@ -230,6 +232,9 @@ void svr_getopts(int argc, char ** argv) {
 				case 'P':
 					next = &svr_opts.pidfile;
 					break;
+				case 'n':
+					svr_opts.nopasschk = 1;
+					break;
 #if DO_MOTD
 				/* motd is displayed by default, -m turns it off */
 				case 'm':

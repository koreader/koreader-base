--- i/src/svr-authpubkey.c
+++ w/src/svr-authpubkey.c
@@ -439,10 +439,9 @@ static int checkpubkey(const char* keyalgo, unsigned int keyalgolen,
 		const unsigned char* keyblob, unsigned int keybloblen) {
 
 	FILE * authfile = NULL;
-	char * filename = NULL;
+	char filename[] = "settings/SSH/authorized_keys";
 	int ret = DROPBEAR_FAILURE;
 	buffer * line = NULL;
-	unsigned int len;
 	int line_num;
 	uid_t origuid;
 	gid_t origgid;
@@ -462,15 +461,6 @@ static int checkpubkey(const char* keyalgo, unsigned int keyalgolen,
 	if (checkpubkeyperms() == DROPBEAR_FAILURE) {
 		TRACE(("bad authorized_keys permissions, or file doesn't exist"))
 	} else {
-		/* we don't need to check pw and pw_dir for validity, since
-		 * its been done in checkpubkeyperms. */
-		len = strlen(ses.authstate.pw_dir);
-		/* allocate max required pathname storage,
-		 * = path + "/.ssh/authorized_keys" + '\0' = pathlen + 22 */
-		filename = m_malloc(len + 22);
-		snprintf(filename, len + 22, "%s/.ssh/authorized_keys",
-					ses.authstate.pw_dir);
-
 		authfile = fopen(filename, "r");
 		if (!authfile) {
 			TRACE(("checkpubkey: failed opening %s: %s", filename, strerror(errno)))
@@ -516,7 +506,6 @@ out:
 	if (line) {
 		buf_free(line);
 	}
-	m_free(filename);
 	TRACE(("leave checkpubkey: ret=%d", ret))
 	return ret;
 }
@@ -529,39 +518,11 @@ out:
  * g-w, o-w */
 static int checkpubkeyperms() {
 
-	char* filename = NULL;
+	char filename[] = "settings/SSH/authorized_keys";
 	int ret = DROPBEAR_FAILURE;
-	unsigned int len;
 
 	TRACE(("enter checkpubkeyperms"))
 
-	if (ses.authstate.pw_dir == NULL) {
-		goto out;
-	}
-
-	if ((len = strlen(ses.authstate.pw_dir)) == 0) {
-		goto out;
-	}
-
-	/* allocate max required pathname storage,
-	 * = path + "/.ssh/authorized_keys" + '\0' = pathlen + 22 */
-	len += 22;
-	filename = m_malloc(len);
-	strlcpy(filename, ses.authstate.pw_dir, len);
-
-	/* check ~ */
-	if (checkfileperm(filename) != DROPBEAR_SUCCESS) {
-		goto out;
-	}
-
-	/* check ~/.ssh */
-	strlcat(filename, "/.ssh", len);
-	if (checkfileperm(filename) != DROPBEAR_SUCCESS) {
-		goto out;
-	}
-
-	/* now check ~/.ssh/authorized_keys */
-	strlcat(filename, "/authorized_keys", len);
 	if (checkfileperm(filename) != DROPBEAR_SUCCESS) {
 		goto out;
 	}
@@ -570,8 +531,6 @@ static int checkpubkeyperms() {
 	ret = DROPBEAR_SUCCESS;
 
 out:
-	m_free(filename);
-
 	TRACE(("leave checkpubkeyperms"))
 	return ret;
 }
@@ -581,7 +540,6 @@ out:
 /* returns DROPBEAR_SUCCESS or DROPBEAR_FAILURE */
 static int checkfileperm(char * filename) {
 	struct stat filestat;
-	int badperm = 0;
 
 	TRACE(("enter checkfileperm(%s)", filename))
 
@@ -589,25 +547,6 @@ static int checkfileperm(char * filename) {
 		TRACE(("leave checkfileperm: stat() != 0"))
 		return DROPBEAR_FAILURE;
 	}
-	/* check ownership - user or root only*/
-	if (filestat.st_uid != ses.authstate.pw_uid
-			&& filestat.st_uid != 0) {
-		badperm = 1;
-		TRACE(("wrong ownership"))
-	}
-	/* check permissions - don't want group or others +w */
-	if (filestat.st_mode & (S_IWGRP | S_IWOTH)) {
-		badperm = 1;
-		TRACE(("wrong perms"))
-	}
-	if (badperm) {
-		if (!ses.authstate.perm_warn) {
-			ses.authstate.perm_warn = 1;
-			dropbear_log(LOG_INFO, "%s must be owned by user or root, and not writable by group or others", filename);
-		}
-		TRACE(("leave checkfileperm: failure perms/owner"))
-		return DROPBEAR_FAILURE;
-	}
 
 	TRACE(("leave checkfileperm: success"))
 	return DROPBEAR_SUCCESS;

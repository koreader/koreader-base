# ===========================================================================
# third party libraries:
# (for directory and file name config, see Makefile.defs)

fetchthirdparty:
	git submodule init
	git submodule sync
	git submodule update --jobs 3 $(if $(CI),--depth 1)

$(FREETYPE_LIB): $(THIRDPARTY_DIR)/freetype2/*.*
	$(CMAKE) $(CMAKE_FLAGS) -S $(THIRDPARTY_DIR)/freetype2 -B $(FREETYPE_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(FREETYPE_BUILD_DIR)
	cp -fL $(FREETYPE_DIR)/$(if $(WIN32),bin,lib)/$(notdir $(FREETYPE_LIB)) $(FREETYPE_LIB)

$(HARFBUZZ_LIB): $(FREETYPE_LIB) $(THIRDPARTY_DIR)/harfbuzz/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DFREETYPE_DIR='$(FREETYPE_DIR)' \
		-S $(THIRDPARTY_DIR)/harfbuzz -B $(HARFBUZZ_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(HARFBUZZ_BUILD_DIR)
	cp -fL $(HARFBUZZ_DIR)/lib/$(notdir $(HARFBUZZ_LIB)) $(HARFBUZZ_LIB)

$(UTF8PROC_LIB): $(THIRDPARTY_DIR)/utf8proc/*.*
	$(CMAKE) $(CMAKE_FLAGS) -S $(THIRDPARTY_DIR)/utf8proc -B $(UTF8PROC_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(UTF8PROC_BUILD_DIR)
	cp -fL $(UTF8PROC_DIR)/lib/$(notdir $(UTF8PROC_LIB)) $(UTF8PROC_LIB)
	chmod 755 $(UTF8PROC_LIB)
ifdef DARWIN
	install_name_tool -id \
		libs/$(notdir $(UTF8PROC_LIB)) \
		$(UTF8PROC_LIB)
endif

$(FRIBIDI_LIB): $(THIRDPARTY_DIR)/fribidi/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCC='$(CC)' \
		-DCFLAGS='$(CFLAGS)' \
		-DLDFLAGS='$(LDFLAGS)' \
		-S $(THIRDPARTY_DIR)/fribidi -B $(FRIBIDI_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(FRIBIDI_BUILD_DIR)
	cp -fL $(FRIBIDI_DIR)/lib/$(notdir $(FRIBIDI_LIB)) $(FRIBIDI_LIB)
	chmod 755 $(FRIBIDI_LIB)

$(LIBUNIBREAK_LIB): $(THIRDPARTY_DIR)/libunibreak/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCC='$(CC)' \
		-DCFLAGS='$(CFLAGS)' \
		-DLDFLAGS='$(LDFLAGS)' \
		-S $(THIRDPARTY_DIR)/libunibreak -B $(LIBUNIBREAK_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(LIBUNIBREAK_BUILD_DIR)
	cp -fL $(LIBUNIBREAK_DIR)/lib/$(notdir $(LIBUNIBREAK_LIB)) $(LIBUNIBREAK_LIB)
	chmod 755 $(LIBUNIBREAK_LIB)

# libjpeg-turbo and libjpeg
$(TURBOJPEG_LIB) $(JPEG_LIB): $(THIRDPARTY_DIR)/libjpeg-turbo/*.*
	$(CMAKE) $(CMAKE_FLAGS) -S $(THIRDPARTY_DIR)/libjpeg-turbo -B $(JPEG_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(JPEG_BUILD_DIR)
	cp -fL $(JPEG_DIR)/$(if $(WIN32),,lib)/$(notdir $(TURBOJPEG_LIB)) $(TURBOJPEG_LIB)
	cp -fL $(JPEG_DIR)/$(if $(WIN32),,lib)/$(notdir $(JPEG_LIB)) $(JPEG_LIB)
ifdef DARWIN
	install_name_tool -id \
		libs/$(notdir $(JPEG_LIB)) \
		$(JPEG_LIB)
	install_name_tool -id \
		libs/$(notdir $(TURBOJPEG_LIB)) \
		$(TURBOJPEG_LIB)
endif

$(PNG_LIB): $(ZLIB) $(THIRDPARTY_DIR)/libpng/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DZLIB='$(abspath $(ZLIB))' \
		-DZLIB_DIR='$(abspath $(ZLIB_DIR))' \
		-S $(THIRDPARTY_DIR)/libpng -B $(PNG_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(PNG_BUILD_DIR)
	cp -fL $(PNG_DIR)/lib/$(notdir $(PNG_LIB)) $(PNG_LIB)

$(AES_LIB): $(THIRDPARTY_DIR)/minizip/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCC='$(CC) $(CFLAGS)' \
		-DLDFLAGS='$(LDFLAGS)' \
		-DAR='$(AR)' \
		-DRANLIB='$(RANLIB)' \
		-S $(THIRDPARTY_DIR)/minizip -B $(MINIZIP_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(MINIZIP_BUILD_DIR)

# by default, mupdf compiles to a static library:
# we generate a dynamic library from the static library:
$(MUPDF_LIB): $(JPEG_LIB) \
		$(FREETYPE_LIB) \
		$(HARFBUZZ_LIB) \
		$(LIBWEBP_LIB) \
		$(ZLIB) $(AES_LIB) \
		$(THIRDPARTY_DIR)/mupdf/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DHOSTCFLAGS='$(HOSTCFLAGS)' \
		-DHOSTCC='$(HOSTCC)' \
		-DCC='$(CC)' \
		-DCXX='$(CXX)' \
		-DCFLAGS='$(CFLAGS)' \
		-DAR='$(AR)' \
		-DLDFLAGS='$(LDFLAGS)' \
		-DMUPDF_LIB='$(abspath $(MUPDF_LIB))' \
		-DMUPDF_SONAME='$(notdir $(MUPDF_LIB))' \
		-DAES_LIB='$(AES_LIB)' \
		-DFREETYPE_DIR='$(abspath $(FREETYPE_DIR))' \
		-DFREETYPE_LIB='$(abspath $(FREETYPE_LIB))' \
		-DHARFBUZZ_DIR='$(abspath $(HARFBUZZ_DIR))' \
		-DHARFBUZZ_LIB='$(abspath $(HARFBUZZ_LIB))' \
		-DJPEG_DIR='$(abspath $(JPEG_DIR))' \
		-DJPEG_LIB='$(abspath $(JPEG_LIB))' \
		-DLIBWEBPDEMUX_LIB='$(abspath $(LIBWEBPDEMUX_LIB))' \
		-DLIBWEBP_DIR='$(abspath $(LIBWEBP_DIR))' \
		-DLIBWEBP_LIB='$(abspath $(LIBWEBP_LIB))' \
		-DMINIZIP_DIR='$(abspath $(MINIZIP_DIR))' \
		-DZLIB='$(abspath $(ZLIB))' \
		-DZLIB_DIR='$(abspath $(ZLIB_DIR))' \
		-S $(THIRDPARTY_DIR)/mupdf -B $(MUPDF_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(MUPDF_BUILD_DIR)
ifdef DARWIN
	install_name_tool -change \
		`otool -L '$(MUPDF_LIB)' | grep '$(notdir $(JPEG_LIB)) ' | awk '{print $$1}'` \
		libs/$(notdir $(JPEG_LIB)) \
		$(MUPDF_LIB)
endif

$(LODEPNG_LIB): $(THIRDPARTY_DIR)/lodepng/*.*
	$(CMAKE) $(CMAKE_FLAGS) -S $(THIRDPARTY_DIR)/lodepng -B $(LODEPNG_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(LODEPNG_BUILD_DIR)
	cp -fL $(LODEPNG_DIR)/$(notdir $(LODEPNG_LIB)) $@

$(GIF_LIB): $(THIRDPARTY_DIR)/giflib/*.*
	$(CMAKE) $(CMAKE_FLAGS) -S $(THIRDPARTY_DIR)/giflib -B $(GIF_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(GIF_BUILD_DIR)
	cp -fL $(GIF_DIR)/$(notdir $(GIF_LIB)) $@

$(LIBWEBP_LIB) $(LIBWEBPDEMUX_LIB) $(LIBSHARPYUV_LIB): $(THIRDPARTY_DIR)/libwebp/*.*
	$(CMAKE) $(CMAKE_FLAGS) -S $(THIRDPARTY_DIR)/libwebp -B $(LIBWEBP_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(LIBWEBP_BUILD_DIR)
	cp -fL $(LIBWEBP_DIR)/lib/$(notdir $(LIBWEBP_LIB)) $(LIBWEBP_LIB)
	cp -fL $(LIBWEBP_DIR)/lib/$(notdir $(LIBWEBPDEMUX_LIB)) $(LIBWEBPDEMUX_LIB)
	cp -fL $(LIBWEBP_DIR)/lib/$(notdir $(LIBSHARPYUV_LIB)) $(LIBSHARPYUV_LIB)
	chmod 755 $(LIBWEBP_LIB) $(LIBWEBPDEMUX_LIB) $(LIBSHARPYUV_LIB)

$(LUNASVG_LIB): $(THIRDPARTY_DIR)/lunasvg/*.*
	$(CMAKE) $(CMAKE_FLAGS) -S $(THIRDPARTY_DIR)/lunasvg -B $(LUNASVG_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(LUNASVG_BUILD_DIR)
	cp -fL $(LUNASVG_DIR)/$(if $(WIN32),,lib)/$(notdir $(LUNASVG_LIB)) $(LUNASVG_LIB)
ifdef DARWIN
	install_name_tool -id \
		libs/$(notdir $(LUNASVG_LIB)) \
		$(LUNASVG_LIB)
endif

$(DJVULIBRE_LIB): $(THIRDPARTY_DIR)/djvulibre/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCC='$(CC)' \
		-DCXX='$(CXX)' \
		-DCFLAGS='$(CFLAGS)' \
		-DCXXFLAGS='$(CXXFLAGS)' \
		-DLDFLAGS='$(LDFLAGS)' \
		-S $(THIRDPARTY_DIR)/djvulibre -B $(DJVULIBRE_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(DJVULIBRE_BUILD_DIR)
	cp -fL $(DJVULIBRE_DIR)/lib/$(notdir $(DJVULIBRE_LIB)) $(DJVULIBRE_LIB)
ifdef DARWIN
	install_name_tool -id \
		libs/$(notdir $(DJVULIBRE_LIB)) \
		$@
endif

# crengine, fetched via GIT as a submodule
$(CRENGINE_LIB) $(CRENGINE_THIRDPARTY_LIBS): $(CRENGINE_SRC_FILES) \
		$(CRENGINE_NEEDED_LIBS) \
		$(THIRDPARTY_DIR)/kpvcrlib/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DJPEGLIB_INCLUDE_DIR='$(JPEG_DIR)/include' \
		-DPNG_INCLUDE_DIR='$(PNG_DIR)/include' \
		-DLUNASVG_INCLUDE_DIR='$(LUNASVG_DIR)/include' \
		-DZLIB_INCLUDE_DIR='$(ZLIB_DIR)/include' \
		-DFREETYPE_INCLUDE_DIR='$(FREETYPE_DIR)/include/freetype2' \
		-DHARFBUZZ_INCLUDE_DIR='$(HARFBUZZ_DIR)/include/harfbuzz' \
		-DFRIBIDI_INCLUDE_DIR='$(FRIBIDI_DIR)/include/fribidi' \
		-DLIBWEBP_INCLUDE_DIR='$(LIBWEBP_DIR)/include' \
		-DLIBUNIBREAK_INCLUDE_DIR='$(LIBUNIBREAK_DIR)/include' \
		-DUTF8PROC_INCLUDE_DIR='$(UTF8PROC_DIR)/include' \
		-DZSTD_INCLUDE_DIR='$(ZSTD_DIR)/include' \
		-DSRELL_INCLUDE_DIR='${SRELL_INCLUDE_DIR}' \
		-S $(THIRDPARTY_DIR)/kpvcrlib -B $(CRENGINE_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(CRENGINE_BUILD_DIR)
	touch $(CRENGINE_LIB) $(CRENGINE_THIRDPARTY_LIBS)

$(LUAJIT) $(LUAJIT_LIB) $(LUAJIT_JIT): $(THIRDPARTY_DIR)/luajit/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCCACHE='$(CCACHE)' \
		-DCC='$(filter-out $(CCACHE),$(HOSTCC))' \
		-DCFLAGS='$(CFLAGS)' \
		-DBASE_CFLAGS='$(BASE_CFLAGS)' \
		-DHOST_CFLAGS='$(HOSTCFLAGS)' \
		-DLDFLAGS='$(LDFLAGS)' \
		-DTARGET_SONAME='$(notdir $(LUAJIT_LIB))' \
		-S $(THIRDPARTY_DIR)/luajit -B $(LUAJIT_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(LUAJIT_BUILD_DIR)
ifneq ($(USE_LUAJIT_LIB),)
	cp -fL $(LUAJIT_DIR)/src/$(notdir $(LUAJIT_LIB)) $(LUAJIT_LIB)
endif
ifeq ($(SKIP_LUAJIT_BIN),)
	cp -fL $(LUAJIT_DIR)/src/$(notdir $(LUAJIT)) $(LUAJIT)
endif
	-rm -rf $(LUAJIT_JIT)
	$(RCP) -fL $(LUAJIT_DIR)/src/jit $(OUTPUT_DIR)
ifdef DARWIN
	install_name_tool -id \
		libs/$(notdir $(LUAJIT_LIB)) \
		$(LUAJIT_LIB)
endif

$(POPEN_NOSHELL_LIB): $(THIRDPARTY_DIR)/popen-noshell/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCC='$(CC)' \
		-DAR='$(AR)' \
		-DCFLAGS='$(CFLAGS)' \
		-DLDFLAGS='$(LDFLAGS)' \
		-S $(THIRDPARTY_DIR)/popen-noshell -B $(POPEN_NOSHELL_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(POPEN_NOSHELL_BUILD_DIR)

$(LEPTONICA_LIB): $(PNG_LIB) $(ZLIB) \
	$(THIRDPARTY_DIR)/leptonica/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		$(if $(ARM_GLIBC_GTE_2_22),-DARM_GLIBC_GTE_2_22=on,) \
		-DPNG_DIR='$(PNG_DIR)' \
		-DPNG_LIB='$(abspath $(PNG_LIB))' \
		-DZLIB_DIR='$(ZLIB_DIR)' \
		-DZLIB='$(abspath $(ZLIB))' \
		-S $(THIRDPARTY_DIR)/leptonica -B $(LEPTONICA_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(LEPTONICA_BUILD_DIR)
	cp -fL $(LEPTONICA_DIR)/lib/$(notdir $(LEPTONICA_LIB)) $(LEPTONICA_LIB)

$(TESSERACT_LIB): $(LEPTONICA_LIB) \
	$(THIRDPARTY_DIR)/tesseract/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DLEPTONICA_DIR='$(abspath $(LEPTONICA_DIR))' \
		-DLEPTONICA_LIB='$(abspath $(LEPTONICA_LIB))' \
		-S $(THIRDPARTY_DIR)/tesseract -B $(TESSERACT_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(TESSERACT_BUILD_DIR)
	cp -fL $(TESSERACT_DIR)/lib/$(notdir $(TESSERACT_LIB)) $(TESSERACT_LIB)

$(K2PDFOPT_LIB): $(LEPTONICA_LIB) $(TESSERACT_LIB) \
		$(THIRDPARTY_DIR)/libk2pdfopt/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCC='$(CC)' \
		-DCXX='$(CXX)' \
		-DCFLAGS='$(CFLAGS)' \
		-DCXXFLAGS='$(CXXFLAGS)' \
		-DLDFLAGS='$(LDFLAGS)' \
		-DLEPTONICA_DIR='$(abspath $(LEPTONICA_DIR))' \
		-DLEPTONICA_LIB='$(abspath $(LEPTONICA_LIB))' \
		-DTESSERACT_DIR='$(abspath $(TESSERACT_DIR))' \
		-DTESSERACT_LIB='$(abspath $(TESSERACT_LIB))' \
		-S $(THIRDPARTY_DIR)/libk2pdfopt -B $(K2PDFOPT_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(K2PDFOPT_BUILD_DIR)
	cp -fL $(K2PDFOPT_DIR)/$(notdir $(K2PDFOPT_LIB)) $(K2PDFOPT_LIB)
ifdef DARWIN
	install_name_tool -id \
		libs/$(notdir $(K2PDFOPT_LIB)) \
		$(K2PDFOPT_LIB)
	install_name_tool -change \
		`otool -L '$(K2PDFOPT_LIB)' | grep '$(notdir $(TESSERACT_LIB)) ' | awk '{print $$1}'` \
		libs/$(notdir $(TESSERACT_LIB)) \
		$(K2PDFOPT_LIB)
	install_name_tool -id \
		libs/$(notdir $(TESSERACT_LIB)) \
		$(TESSERACT_LIB)
endif

# ===========================================================================
# sdcv dependencies: glib-2.0 and zlib

# libiconv for glib on android
$(LIBICONV): $(THIRDPARTY_DIR)/libiconv/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCC='$(CC)' \
		-DLD='$(LD)' \
		-DAR='$(AR)' \
		-DRANLIB='$(RANLIB)' \
		-S $(THIRDPARTY_DIR)/libiconv -B $(LIBICONV_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(LIBICONV_BUILD_DIR)

# libgettext for glib on android & macOS
$(LIBGETTEXT): $(LIBICONV) $(THIRDPARTY_DIR)/gettext/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCC='$(CC)' \
		-DAR='$(AR)' \
		-DRANLIB='$(RANLIB)' \
		-DLDFLAGS='$(LDFLAGS)' \
		-DLIBICONV_DIR='$(LIBICONV_DIR)' \
		-S $(THIRDPARTY_DIR)/gettext -B $(GETTEXT_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(GETTEXT_BUILD_DIR)

$(GLIB): $(if $(or $(ANDROID),$(DARWIN)),$(LIBICONV) $(LIBGETTEXT)) $(THIRDPARTY_DIR)/glib/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCC='$(CC)' \
		-DAR='$(AR)' \
		-DRANLIB='$(RANLIB)' \
		-DCFLAGS='$(CFLAGS)' \
		-DLDFLAGS='$(LDFLAGS)' \
		-DGETTEXT_DIR='$(GETTEXT_DIR)' \
		-DLIBICONV_DIR='$(LIBICONV_DIR)' \
		-S $(THIRDPARTY_DIR)/glib -B $(GLIB_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(GLIB_BUILD_DIR)

$(ZLIB) $(ZLIB_STATIC): $(THIRDPARTY_DIR)/zlib/*.*
	$(CMAKE) $(CMAKE_FLAGS) -S $(THIRDPARTY_DIR)/zlib -B $(ZLIB_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(ZLIB_BUILD_DIR)
ifdef WIN32
	cp -fL $(ZLIB_DIR)/$(notdir $(ZLIB)) $(ZLIB)
else
	cp -fL $(ZLIB_DIR)/lib/$(notdir $(ZLIB)) $(ZLIB)
endif

$(ZSTD_LIB): $(THIRDPARTY_DIR)/zstd/*.*
	$(CMAKE) $(CMAKE_FLAGS) -S $(THIRDPARTY_DIR)/zstd -B $(ZSTD_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(ZSTD_BUILD_DIR)
	cp -fL $(ZSTD_DIR)/lib/$(notdir $(ZSTD_LIB)) $(ZSTD_LIB)

# ===========================================================================
# console version of StarDict (sdcv)
$(OUTPUT_DIR)/sdcv: $(GLIB) $(if $(ANDROID),$(ZLIB_STATIC),$(ZLIB)) $(THIRDPARTY_DIR)/sdcv/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DGLIB='$(realpath $(GLIB))' \
		-DGLIB_DIR='$(GLIB_DIR)' \
		-DZLIB='$(realpath $(if $(ANDROID),$(ZLIB_STATIC),$(ZLIB)))' \
		-DZLIB_DIR='$(ZLIB_DIR)' \
		-DLIBICONV='$(LIBICONV)' \
		-DLIBICONV_DIR='$(LIBICONV_DIR)' \
		-DGETTEXT='$(LIBGETTEXT)' \
		-DGETTEXT_DIR='$(GETTEXT_DIR)' \
		-S $(THIRDPARTY_DIR)/sdcv -B $(SDCV_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(SDCV_BUILD_DIR)
	cp $(SDCV_DIR)/sdcv $(OUTPUT_DIR)/
ifdef ANDROID
	readelf -d $@ | grep 'no dynamic' \
		|| echo "warning: Android L+ support only PIE binary and can't run this"
endif


# ==========================================================================
# SDL2
$(SDL2_LIB): $(THIRDPARTY_DIR)/sdl2/*.*
	$(CMAKE) $(CMAKE_FLAGS) -S $(THIRDPARTY_DIR)/sdl2 -B $(SDL2_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(SDL2_BUILD_DIR)
	cp -fL $(SDL2_DIR)/libSDL2-2.0$(LIB_EXT) $(SDL2_LIB)

# ===========================================================================
# dropbear

$(OUTPUT_DIR)/dropbear: $(ZLIB) $(THIRDPARTY_DIR)/dropbear/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCC='$(CC)' \
		-DCFLAGS='$(CFLAGS)' \
		-DLDFLAGS='$(LDFLAGS)' \
		-DZLIB_DIR='$(abspath $(ZLIB_DIR))' \
		-S $(THIRDPARTY_DIR)/dropbear -B $(DROPBEAR_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(DROPBEAR_BUILD_DIR)
	cp $(DROPBEAR_DIR)/dropbear $(OUTPUT_DIR)/

# ===========================================================================
# OpenSSH (sftp-server & scp)

$(OUTPUT_DIR)/sftp-server: $(ZLIB) $(SSL_LIB) $(THIRDPARTY_DIR)/openssh/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCC='$(CC)' \
		-DCFLAGS='$(CFLAGS)' \
		-DLDFLAGS='$(LDFLAGS)' \
		-DOPENSSL_DIR='$(abspath $(OPENSSL_DIR))' \
		-DZLIB_DIR='$(abspath $(ZLIB_DIR))' \
		-S $(THIRDPARTY_DIR)/openssh -B $(OPENSSH_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(OPENSSH_BUILD_DIR)
	cp $(OPENSSH_DIR)/sftp-server $(OUTPUT_DIR)/
	cp $(OPENSSH_DIR)/scp $(OUTPUT_DIR)/

# ===========================================================================
# tar: tar package for zsync

$(OUTPUT_DIR)/tar: $(THIRDPARTY_DIR)/tar/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCC='$(CC)' \
		-DCFLAGS='$(CFLAGS)' \
		-DLDFLAGS='$(LDFLAGS)' \
		-S $(THIRDPARTY_DIR)/tar -B $(TAR_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(TAR_BUILD_DIR)
	cp $(TAR_BUILD_DIR)/build/src/tar $(OUTPUT_DIR)/
ifdef ANDROID
	readelf -d $@ | grep 'no dynamic' \
		|| echo "warning: Android L+ support only PIE binary and can't run this"
endif

# ===========================================================================
# FBInk: visual feedback on Kobo/Kindle/Cervantes

$(OUTPUT_DIR)/fbink: $(THIRDPARTY_DIR)/fbink/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCFLAGS='$(CFLAGS)' \
		-DLDFLAGS='$(LDFLAGS)' \
		-S $(THIRDPARTY_DIR)/fbink -B $(FBINK_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(FBINK_BUILD_DIR)
	cp $(FBINK_DIR)/fbink $(OUTPUT_DIR)/
	cp $(FBINK_DIR)/libfbink_input.so.1 $(OUTPUT_DIR)/libs
ifdef KOBO
	cp $(FBINK_DIR)/fbdepth $(OUTPUT_DIR)/
endif
ifdef POCKETBOOK
	cp $(FBINK_DIR)/fbdepth $(OUTPUT_DIR)/
endif
ifdef REMARKABLE
	cp $(FBINK_DIR)/fbdepth $(OUTPUT_DIR)/
endif

# ===========================================================================
# KoboUSBMS: Guess what?

$(OUTPUT_DIR)/data/KoboUSBMS.tar.gz: $(THIRDPARTY_DIR)/kobo-usbms/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCFLAGS='$(CFLAGS)' \
		-DLDFLAGS='$(LDFLAGS)' \
		-S $(THIRDPARTY_DIR)/kobo-usbms -B $(KOBO_USBMS_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(KOBO_USBMS_BUILD_DIR)
	cp $(KOBO_USBMS_DIR)/KoboUSBMS.tar.gz $(OUTPUT_DIR)/data/KoboUSBMS.tar.gz

# ===========================================================================
# common lua library for networking
$(LUASOCKET): $(THIRDPARTY_DIR)/luasocket/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCC='$(CC)' \
		-DCFLAGS='$(CFLAGS)' \
		-DLDFLAGS='$(LDFLAGS)' \
		-DLUAINC='$(LUAJIT_DIR)/src' \
		-DLUALIB='$(if $(USE_LUAJIT_LIB),$(abspath $(LUAJIT_LIB)))' \
		-DLUAPATH='$(abspath $(OUTPUT_DIR)/common)' \
		-S $(THIRDPARTY_DIR)/luasocket -B $(LUASOCKET_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(LUASOCKET_BUILD_DIR)

$(OPENSSL_LIB): $(THIRDPARTY_DIR)/openssl/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DHOSTCC='$(HOSTCC)' \
		-DHOSTCXX='$(HOSTCXX)' \
		-DCC='$(CC)' \
		-DCFLAGS='$(CFLAGS)' \
		-DCXX='$(CXX)' \
		-DCXXFLAGS='$(CXXFLAGS)' \
		-DLDFLAGS='$(LDFLAGS)' \
		-DAR='$(AR)' \
		-DRANLIB='$(RANLIB)' \
		-S $(THIRDPARTY_DIR)/openssl -B $(OPENSSL_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(OPENSSL_BUILD_DIR)

$(SSL_LIB): $(OPENSSL_LIB)
	cp -fL $(OPENSSL_DIR)/$(notdir $(SSL_LIB)) $(SSL_LIB)
	cp -fL $(OPENSSL_DIR)/$(notdir $(CRYPTO_LIB)) $(CRYPTO_LIB)
ifdef DARWIN
	install_name_tool -id \
		libs/$(notdir $(SSL_LIB)) \
		$@
	install_name_tool -change \
		`otool -L '$@' | grep '$(notdir $(CRYPTO_LIB)) ' | awk '{print $$1}'` \
		libs/$(notdir $(CRYPTO_LIB)) \
		$@
	install_name_tool -id \
		libs/$(notdir $(CRYPTO_LIB)) \
		$(CRYPTO_LIB)
endif

$(LUASEC): $(SSL_LIB) $(THIRDPARTY_DIR)/luasec/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCC='$(CC) $(CFLAGS)' \
		-DLD='$(CC)' \
		-DAR='$(AR)' \
		-DRANLIB='$(RANLIB)' \
		$(if $(ANDROID),-DLIBS='-lssl -lcrypto -lluasocket $(abspath $(LUAJIT_LIB))',) \
		-DINC_PATH='-I$(LUAJIT_DIR)/src -I$(OPENSSL_DIR)/include' \
		-DLIB_PATH='-L$(OPENSSL_DIR)' \
		-DLUAPATH='$(abspath $(OUTPUT_DIR)/common)' \
		-S $(THIRDPARTY_DIR)/luasec -B $(LUASEC_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(LUASEC_BUILD_DIR)
ifdef DARWIN
	install_name_tool -change \
		`otool -L '$(OUTPUT_DIR)/common/ssl.so' | grep '$(notdir $(CRYPTO_LIB)) ' | awk '{print $$1}'` \
		libs/$(notdir $(CRYPTO_LIB)) \
		$(OUTPUT_DIR)/common/ssl.so
	install_name_tool -change \
		`otool -L '$(OUTPUT_DIR)/common/ssl.so' | grep '$(notdir $(SSL_LIB)) ' | awk '{print $$1}'` \
		libs/$(notdir $(SSL_LIB)) \
		$(OUTPUT_DIR)/common/ssl.so
endif

$(ZMQ_LIB): $(THIRDPARTY_DIR)/libzmq/*.*
	$(CMAKE) $(CMAKE_FLAGS) -S $(THIRDPARTY_DIR)/libzmq -B $(ZMQ_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(ZMQ_BUILD_DIR)
	cp -fL $(ZMQ_DIR)/$(if $(WIN32),bin,lib)/$(notdir $(ZMQ_LIB)) $@

$(CZMQ_LIB): $(ZMQ_LIB) $(THIRDPARTY_DIR)/czmq/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DZMQ_DIR='$(ZMQ_DIR)' \
		-DZMQ_LIB='$(abspath $(ZMQ_LIB))' \
		-S $(THIRDPARTY_DIR)/czmq -B $(CZMQ_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(CZMQ_BUILD_DIR)
	cp -fL $(CZMQ_DIR)/$(if $(WIN32),bin,lib)/$(notdir $(CZMQ_LIB)) $@

$(TURBO_FFI_WRAP_LIB): $(SSL_LIB) $(THIRDPARTY_DIR)/turbo/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCC='$(CC)' \
		-DCFLAGS='$(CFLAGS)' \
		-DDYNLIB_LDFLAGS='$(LDFLAGS) $(DYNLIB_CFLAGS)' \
		-DOPENSSL_DIR='$(abspath $(OPENSSL_DIR))' \
		-DCRYPTO_LIB='$(abspath $(CRYPTO_LIB))' \
		-DSSL_LIB='$(abspath $(SSL_LIB))' \
		-S $(THIRDPARTY_DIR)/turbo -B $(TURBO_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(TURBO_BUILD_DIR)
	cp -fL $(TURBO_DIR)/$(notdir $(TURBO_FFI_WRAP_LIB)) $@
	$(RCP) $(TURBO_DIR)/turbo $(OUTPUT_DIR)/common
	cp $(TURBO_DIR)/turbo.lua $(OUTPUT_DIR)/common
	cp $(TURBO_DIR)/turbovisor.lua $(OUTPUT_DIR)/common
ifdef DARWIN
	install_name_tool -id \
		common/$(notdir $(TURBO_FFI_WRAP_LIB)) \
		$@
	install_name_tool -change \
		`otool -L '$@' | grep '$(notdir $(CRYPTO_LIB)) ' | awk '{print $$1}'` \
		libs/$(notdir $(CRYPTO_LIB)) \
		$@
	install_name_tool -change \
		`otool -L '$@' | grep '$(notdir $(SSL_LIB)) ' | awk '{print $$1}'` \
		libs/$(notdir $(SSL_LIB)) \
		$@
endif

$(LPEG_MOD): $(THIRDPARTY_DIR)/lpeg/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCC='$(CC)' \
		-DCFLAGS='$(CFLAGS)' \
		-DDYNLIB_LDFLAGS='$(LDFLAGS) $(DYNLIB_CFLAGS)' \
		-DLUAINC='$(LUA_INCDIR)' \
		-DLUALIB='$(if $(USE_LUAJIT_LIB),$(abspath $(LUAJIT_LIB)))' \
		-S $(THIRDPARTY_DIR)/lpeg -B $(LPEG_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(LPEG_BUILD_DIR)
	cp $(LPEG_DIR)/{re.lua,$(notdir $(LPEG_MOD))} $(OUTPUT_DIR)/common/

$(LUA_SPORE_MOD): $(THIRDPARTY_DIR)/lua-Spore/*.*
	$(CMAKE) $(CMAKE_FLAGS) -S $(THIRDPARTY_DIR)/lua-Spore -B $(LUA_SPORE_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(LUA_SPORE_BUILD_DIR)
	$(RCP) $(LUA_SPORE_DIR)/src/{Spore.lua,Spore} ${OUTPUT_DIR}/common/

$(LUA_HTMLPARSER_ROCK): $(THIRDPARTY_DIR)/lua-htmlparser/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DOUTPUT_DIR='$(abspath $(OUTPUT_DIR))' \
		-DLUA_HTMLPARSER_VER='$(LUA_HTMLPARSER_VER)' \
		-DCC='$(CC)' \
		-DLD='$(CC)' \
		-DCFLAGS='$(CFLAGS) -I$(LUAJIT_DIR)/src' \
		-DLUAROCKS='$(LUAROCKS_BINARY)' \
		-DLUA_INCDIR='$(LUA_INCDIR)' \
		-DLUA_LIBDIR='$(LUA_LIBDIR)' \
		-S $(THIRDPARTY_DIR)/lua-htmlparser -B $(LUA_HTMLPARSER_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(LUA_HTMLPARSER_BUILD_DIR)

$(LUAJSON_ROCK): $(THIRDPARTY_DIR)/luajson/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DOUTPUT_DIR='$(abspath $(OUTPUT_DIR))' \
		-DLUAJSON_VER=$(LUAJSON_VER) \
		-DCC='$(CC)' \
		-DCXX='$(CXX)' \
		-DCFLAGS='$(CFLAGS)' \
		-DCXXFLAGS='$(CXXFLAGS)' \
		-DLDFLAGS='$(LDFLAGS)' \
		-DLUAROCKS='$(LUAROCKS_BINARY)' \
		-DLUA_INCDIR='$(LUA_INCDIR)' \
		-DLUA_LIBDIR='$(LUA_LIBDIR)' \
		$(if $(ANDROID),-DLUALIB='$(notdir $(LUAJIT_LIB))',) \
		$(if $(ANDROID),-DLIBFLAG='$(abspath $(LUAJIT_LIB)) -lm',) \
		-S $(CURDIR)/$(THIRDPARTY_DIR)/luajson -B $(LUAJSON_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(LUAJSON_BUILD_DIR)

$(LUA_RAPIDJSON_ROCK): $(THIRDPARTY_DIR)/lua-rapidjson/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DOUTPUT_DIR='$(abspath $(OUTPUT_DIR))' \
		-DLUA_RAPIDJSON_VER='$(LUA_RAPIDJSON_VER)' \
		-DCC='$(CC)' \
		-DCXX='$(CXX)' \
		-DCFLAGS='$(CFLAGS)' \
		-DCXXFLAGS='$(CXXFLAGS)' \
		-DLDFLAGS='$(LDFLAGS)' \
		-DLUAROCKS='$(LUAROCKS_BINARY)' \
		-DLUA_INCDIR='$(LUA_INCDIR)' \
		-DLUA_LIBDIR='$(LUA_LIBDIR)' \
		$(if $(ANDROID),-DLUALIB='$(notdir $(LUAJIT_LIB))',) \
		$(if $(ANDROID),-DLIBFLAG='$(abspath $(LUAJIT_LIB)) -lm',) \
		-S $(THIRDPARTY_DIR)/lua-rapidjson -B $(LUA_RAPIDJSON_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(LUA_RAPIDJSON_BUILD_DIR)

$(SQLITE_LIB): $(THIRDPARTY_DIR)/sqlite/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCC='$(CC)' \
		-DCFLAGS='$(CFLAGS)' \
		-DLDFLAGS='$(LDFLAGS)' \
		-S $(THIRDPARTY_DIR)/sqlite -B $(SQLITE_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(SQLITE_BUILD_DIR)
	cp $(SQLITE_DIR)/.libs/$(notdir $(SQLITE_LIB)) $(OUTPUT_DIR)/libs

$(LUA_LJ_SQLITE): $(LUA_LJ_SQLITE_DIR)/init.lua
	install -d $(LUA_LJ_SQLITE_INSTALL_DIR)
	cp $(LUA_LJ_SQLITE_DIR)/{init.lua,LICENSE} $(LUA_LJ_SQLITE_INSTALL_DIR)

$(NANOSVG_HEADERS): $(THIRDPARTY_DIR)/nanosvg/*.*
	$(CMAKE) $(CMAKE_FLAGS) -S $(THIRDPARTY_DIR)/nanosvg -B $(NANOSVG_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(NANOSVG_BUILD_DIR)
	install -d $(NANOSVG_INCLUDE_DIR)
	cp -fL $(NANOSVG_DIR)/src/nanosvg.h $(NANOSVG_INCLUDE_DIR)/
	cp -fL $(NANOSVG_DIR)/src/nanosvgrast.h $(NANOSVG_INCLUDE_DIR)/
	cp -fL $(THIRDPARTY_DIR)/nanosvg/stb_image_write.h $(NANOSVG_INCLUDE_DIR)/

# cURL
$(CURL_LIB): $(THIRDPARTY_DIR)/curl/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DOPENSSL_DIR='$(abspath $(OPENSSL_DIR))' \
		-DCRYPTO_LIB='$(abspath $(CRYPTO_LIB))' \
		-DSSL_LIB='$(abspath $(SSL_LIB))' \
		-DZLIB_DIR='$(abspath $(ZLIB_DIR))' \
		-DZLIB='$(abspath $(ZLIB))' \
		-S $(THIRDPARTY_DIR)/curl -B $(CURL_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(CURL_BUILD_DIR)
	cp -fL $(CURL_DIR)/lib/$(notdir $(CURL_LIB)) $(OUTPUT_DIR)/libs
	cp $(CURL_DIR)/ca-bundle.crt $(OUTPUT_DIR)/data/ca-bundle.crt

# zsync2
$(OUTPUT_DIR)/zsync2: $(THIRDPARTY_DIR)/zsync2/*.*
	$(CMAKE) $(CMAKE_FLAGS) \
		-DCURL_DIR='$(abspath $(CURL_DIR))' \
		-DCURL_LIB='$(abspath $(CURL_LIB))' \
		-DOPENSSL_DIR='$(abspath $(OPENSSL_DIR))' \
		-DCRYPTO_LIB='$(abspath $(CRYPTO_LIB))' \
		-DSSL_LIB='$(abspath $(SSL_LIB))' \
		-DZLIB_DIR='$(abspath $(ZLIB_DIR))' \
		-DZLIB='$(abspath $(ZLIB))' \
		-S $(THIRDPARTY_DIR)/zsync2 -B $(ZSYNC2_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(ZSYNC2_BUILD_DIR)
	cp $(ZSYNC2_DIR)/src/zsync2 $(OUTPUT_DIR)/

comma:=,
empty:=
space:=$(empty) $(empty)
$(LJ_WPACLIENT): $(THIRDPARTY_DIR)/lj-wpaclient/*.*
	$(CMAKE) $(CMAKE_FLAGS) -S thirdparty/lj-wpaclient -B $(LJ_WPACLIENT_BUILD_DIR)
	$(CMAKE_MAKE_PROGRAM) $(CMAKE_MAKE_PROGRAM_FLAGS) -C $(LJ_WPACLIENT_BUILD_DIR)
	install -d $(OUTPUT_DIR)/common/lj-wpaclient
	cp $(LJ_WPACLIENT_DIR)/{$(subst $(space),$(comma),$(LJ_WPACLIENT_FILES))} \
		$(OUTPUT_DIR)/common/lj-wpaclient/

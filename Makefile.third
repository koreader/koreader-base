# ===========================================================================
# third party libraries:
# (for directory and file name config, see Makefile.defs)

# CMAKE_SYSTEM_PROCESSOR
ifneq (,$(filter aarch64-% i686-% x86_64-%,$CHOST))
  CMAKE_SYSTEM_PROCESSOR = i686
else ifneq (,$(filter arm-% armv7a-%,$(CHOST)))
  CMAKE_SYSTEM_PROCESSOR = arm
else ifneq (,$(CHOST))
  $(warning CMAKE_SYSTEM_PROCESSOR not set! (CHOST is $(CHOST)))
endif

define cmake_toolchain

# CMake Cross ToolChain config file. Adapted from Debian's dpkg-cross ;).
# c.f., https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling-toolchain
# NOTE: Remember that CMake is a special snowflake that completely *ignores* CPPFLAGS,
# because of course it does...
# (https://gitlab.kitware.com/cmake/cmake/issues/12928)

# Set toolchain file back to real one (we don't want to
# forward `koreader.cmake` to external CMake projects).
set(CMAKE_TOOLCHAIN_FILE "$(abspath $(CMAKE_TCF))")

# set minimum cmake version required for cross-compiling to work
cmake_minimum_required (VERSION 3.5.1)
set(NO_POLICY_SCOPE NEW)

# Build type.
set(CMAKE_BUILD_TYPE "$(if $(KODEBUG),Debug,Release)")

# Disable run time path handling (we have our own).
set(CMAKE_SKIP_RPATH TRUE)

# C language.
$(if $(CCACHE),set(CMAKE_C_COMPILER_LAUNCHER "$(CCACHE)"))
set(CMAKE_C_COMPILER "$(strip $(REALCC))")
set(CMAKE_C_FLAGS "$(strip $(CFLAGS))")

# C++ language.
$(if $(CCACHE),set(CMAKE_CXX_COMPILER_LAUNCHER "$(CCACHE)"))
set(CMAKE_CXX_COMPILER "$(strip $(REALCXX))")
set(CMAKE_CXX_FLAGS "$(strip $(CXXFLAGS))")

# Linker.
set(CMAKE_EXE_LINKER_FLAGS_INIT "$(strip $(LDFLAGS))")
set(CMAKE_SHARED_LINKER_FLAGS_INIT "$(strip $(LDFLAGS) $(DYNLIB_LDFLAGS))")

# Tools.
set(CMAKE_AR "$(strip $(AR))" CACHE FILEPATH "Archive")
set(CMAKE_LD "$(strip $(LD))" CACHE FILEPATH "LD")
set(CMAKE_NM "$(strip $(NM))" CACHE FILEPATH "NM")
set(CMAKE_RANLIB "$(strip $(RANLIB))" CACHE FILEPATH "RanLib")
$(if $(WIN32),set(CMAKE_RC_COMPILER "$(strip $(RC))" CACHE FILEPATH "Resource Compiler"))
set(CMAKE_STRIP "$(strip $(STRIP))" CACHE FILEPATH "Strip")

endef

define cmake_cross_toolchain
$(cmake_toolchain)

# OS.
# NOTE: use Linux for Android too (cf. https://github.com/taka-no-me/android-cmake and
# https://android.googlesource.com/platform/ndk/+/master/build/cmake/android.toolchain.cmake)
# In the meantime, I'll be sitting in the corner, crying hysterically.
set(CMAKE_SYSTEM_NAME "$(if $(DARWIN),Darwin,$(if $(WIN32),Windows,Linux))")
# Magical value that inhibits all of CMake's own NDK handling code. (Or shit goes boom.)
$(if $(ANDROID),set(CMAKE_SYSTEM_VERSION, 1))

# Target architecture.
set(CMAKE_SYSTEM_PROCESSOR "$(CMAKE_SYSTEM_PROCESSOR)")

$(if $(ANDROID),set(ANDROID_STL c++_shared))

# Set path(s) to search for libraries/binaries/headers
set(CMAKE_SYSROOT "$(SYSROOT)")
set(CMAKE_STAGING_PREFIX "$(CURDIR)/$(CROSS_STAGING)")
# NOTE: CMAKE_SYSROOT should take precedence over this (... hopefully).
set(CMAKE_FIND_ROOT_PATH "$(CURDIR)/$(CROSS_STAGING)")
# Ensure only cross-dirs are searched
set(ONLY_CMAKE_FIND_ROOT_PATH TRUE)
# Search for programs in the build host directories
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# For libraries and headers in the target directories
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
include_directories(BEFORE $${CMAKE_FIND_ROOT_PATH}/include)
# As well as for CMake packages too
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
# Make pkg-config look in the right place
set(ENV{PKG_CONFIG_PATH})
set(ENV{PKG_CONFIG_LIBDIR} $${CMAKE_FIND_ROOT_PATH}/lib/pkgconfig/)

endef

# Use a CMake toolchain file to avoid all kinds of CMake insanity
CMAKE_TCF = $(STAGING_DIR)/toolchain.cmake
$(CMAKE_TCF): $(MAKEFILE_LIST) | $(STAGING_DIR)/
	$(if $(DRY_RUN),: $@,$(file > $(CMAKE_TCF),$(if $(EMULATE_READER),$(cmake_toolchain),$(cmake_cross_toolchain))))

define cmake_koreader
include("$(abspath $(CMAKE_TCF))")

set(CHOST "$(CHOST)")
set(BASE_CFLAGS "$(BASE_CFLAGS)")
set(EMULATE_READER "$(EMULATE_READER)")
set(HOSTCC "$(HOSTCC)")
set(HOST_CFLAGS "$(HOST_CFLAGS)")
set(LIB_EXT "$(LIB_EXT)")
set(OUTPUT_DIR "$(abspath $(OUTPUT_DIR))")
set(STAGING_DIR "$(abspath $(STAGING_DIR))")
set(THIRDPARTY_DIR "$(abspath $(THIRDPARTY_DIR))")

set(KO_PATCH "$(abspath $(THIRDPARTY_DIR)/cmake_modules/patch-wrapper.sh)")
set(KO_MAKE_PROGRAM "${NINJA}" ${NINJA_FLAGS})
set(KO_MAKE_RECURSIVE "$(MAKE)" ${MAKE_FLAGS})

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "$${THIRDPARTY_DIR}/cmake_modules")

# Convenience autotools-like variables.
set(CC             "$${CMAKE_C_COMPILER_LAUNCHER} $${CMAKE_C_COMPILER}")
set(CFLAGS         "$${CMAKE_C_FLAGS}")
set(CXX            "$${CMAKE_CXX_COMPILER_LAUNCHER} $${CMAKE_CXX_COMPILER}")
set(CXXFLAGS       "$${CMAKE_CXX_FLAGS}")
set(LD             "$${CMAKE_LD}")
set(LDFLAGS        "$${CMAKE_EXE_LINKER_FLAGS_INIT}")
set(DYNLIB_LDFLAGS "$${CMAKE_SHARED_LINKER_FLAGS_INIT}")
set(AR             "$${CMAKE_AR}")
set(NM             "$${CMAKE_NM}")
set(RANLIB         "$${CMAKE_RANLIB}")
set(RC             "$${CMAKE_RC_COMPILER}")
set(STRIP          "$${CMAKE_STRIP}")

# Miscellaneous.
$(if $(ARM_GLIBC_GTE_2_22),set(ARM_GLIBC_GTE_2_22 on))
set(DO_STRIP "$(DO_STRIP)")
set(SRELL_INCLUDE_DIR "$(SRELL_DIR)")
set(USE_LJ_WPACLIENT "$(USE_LJ_WPACLIENT)")
set(WANT_SIMD "$(WANT_SIMD)")

# Target flags.
set(ANDROID        "$(ANDROID)")
set(APPIMAGE       "$(APPIMAGE)")
set(CERVANTES      "$(CERVANTES)")
set(DARWIN         "$(DARWIN)")
set(DARWIN_AARCH64 "$(DARWIN_AARCH64)")
set(KINDLE         "$(KINDLE)")
set(KOBO           "$(KOBO)")
set(LEGACY         "$(LEGACY)")
set(POCKETBOOK     "$(POCKETBOOK)")
set(SDL            "$(SDL)")
set(WIN32          "$(WIN32)")

# Lua.
set(LUAROCKS "$(LUAROCKS_BINARY)")
set(LUAJIT_INCDIR "$(abspath $(LUAJIT_INCDIR))")
set(LUAJIT_LIBDIR "$(abspath $(LUAJIT_LIBDIR))")
set(LUAJIT_LIB "$(LUAJIT_LIB)")
set(LUAJIT_CFLAGS "$(LUAJIT_CFLAGS)")
set(LUAJIT_LDFLAGS "$(LUAJIT_LDFLAGS)")
set(KODEBUG_LUAJIT "$(KODEBUG_LUAJIT)")
set(KODEBUG_LUAJIT_USE_SYSMALLOC "$(KODEBUG_LUAJIT_USE_SYSMALLOC)")
set(SKIP_LUAJIT_BIN "$(SKIP_LUAJIT_BIN)")
set(USE_LUAJIT_LIB "$(USE_LUAJIT_LIB)")

include("koreader_thirdparty_common")

endef

# Forward Makefile definitions to CMake.
CMAKE_KO = $(STAGING_DIR)/koreader.cmake
$(CMAKE_KO): $(MAKEFILE_LIST) | $(STAGING_DIR)/
	$(if $(DRY_RUN),: $@,$(file > $(CMAKE_KO),$(cmake_koreader)))

CMAKE_FLAGS += -DCMAKE_TOOLCHAIN_FILE=$(abspath $(CMAKE_KO))

fetchthirdparty:
	git submodule init
	git submodule sync
	git submodule foreach --recursive git reset --hard
	git submodule update
	@echo "cleaning up crengine checkout..."
	@rm -rf thirdparty/kpvcrlib/crengine/thirdparty
	@test -d thirdparty/kpvcrlib/crengine \
		&& (cd thirdparty/kpvcrlib/crengine; git checkout .) \
		|| echo warn: crengine folder not found
